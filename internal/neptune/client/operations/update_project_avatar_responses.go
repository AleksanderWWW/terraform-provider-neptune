// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// UpdateProjectAvatarReader is a Reader for the UpdateProjectAvatar structure.
type UpdateProjectAvatarReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateProjectAvatarReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateProjectAvatarOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateProjectAvatarBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateProjectAvatarUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateProjectAvatarForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateProjectAvatarNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewUpdateProjectAvatarRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateProjectAvatarUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /api/backend/v1/projects1/{projectId}/avatar] updateProjectAvatar", response, response.Code())
	}
}

// NewUpdateProjectAvatarOK creates a UpdateProjectAvatarOK with default headers values
func NewUpdateProjectAvatarOK() *UpdateProjectAvatarOK {
	return &UpdateProjectAvatarOK{}
}

/*
UpdateProjectAvatarOK describes a response with status code 200, with default header values.

OK
*/
type UpdateProjectAvatarOK struct {
	Payload *models.Link
}

// IsSuccess returns true when this update project avatar o k response has a 2xx status code
func (o *UpdateProjectAvatarOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update project avatar o k response has a 3xx status code
func (o *UpdateProjectAvatarOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project avatar o k response has a 4xx status code
func (o *UpdateProjectAvatarOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update project avatar o k response has a 5xx status code
func (o *UpdateProjectAvatarOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update project avatar o k response a status code equal to that given
func (o *UpdateProjectAvatarOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update project avatar o k response
func (o *UpdateProjectAvatarOK) Code() int {
	return 200
}

func (o *UpdateProjectAvatarOK) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects1/{projectId}/avatar][%d] updateProjectAvatarOK  %+v", 200, o.Payload)
}

func (o *UpdateProjectAvatarOK) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects1/{projectId}/avatar][%d] updateProjectAvatarOK  %+v", 200, o.Payload)
}

func (o *UpdateProjectAvatarOK) GetPayload() *models.Link {
	return o.Payload
}

func (o *UpdateProjectAvatarOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Link)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateProjectAvatarBadRequest creates a UpdateProjectAvatarBadRequest with default headers values
func NewUpdateProjectAvatarBadRequest() *UpdateProjectAvatarBadRequest {
	return &UpdateProjectAvatarBadRequest{}
}

/*
UpdateProjectAvatarBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateProjectAvatarBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update project avatar bad request response has a 2xx status code
func (o *UpdateProjectAvatarBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project avatar bad request response has a 3xx status code
func (o *UpdateProjectAvatarBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project avatar bad request response has a 4xx status code
func (o *UpdateProjectAvatarBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project avatar bad request response has a 5xx status code
func (o *UpdateProjectAvatarBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update project avatar bad request response a status code equal to that given
func (o *UpdateProjectAvatarBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update project avatar bad request response
func (o *UpdateProjectAvatarBadRequest) Code() int {
	return 400
}

func (o *UpdateProjectAvatarBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects1/{projectId}/avatar][%d] updateProjectAvatarBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateProjectAvatarBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects1/{projectId}/avatar][%d] updateProjectAvatarBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateProjectAvatarBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateProjectAvatarBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateProjectAvatarUnauthorized creates a UpdateProjectAvatarUnauthorized with default headers values
func NewUpdateProjectAvatarUnauthorized() *UpdateProjectAvatarUnauthorized {
	return &UpdateProjectAvatarUnauthorized{}
}

/*
UpdateProjectAvatarUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateProjectAvatarUnauthorized struct {
}

// IsSuccess returns true when this update project avatar unauthorized response has a 2xx status code
func (o *UpdateProjectAvatarUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project avatar unauthorized response has a 3xx status code
func (o *UpdateProjectAvatarUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project avatar unauthorized response has a 4xx status code
func (o *UpdateProjectAvatarUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project avatar unauthorized response has a 5xx status code
func (o *UpdateProjectAvatarUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update project avatar unauthorized response a status code equal to that given
func (o *UpdateProjectAvatarUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update project avatar unauthorized response
func (o *UpdateProjectAvatarUnauthorized) Code() int {
	return 401
}

func (o *UpdateProjectAvatarUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects1/{projectId}/avatar][%d] updateProjectAvatarUnauthorized ", 401)
}

func (o *UpdateProjectAvatarUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects1/{projectId}/avatar][%d] updateProjectAvatarUnauthorized ", 401)
}

func (o *UpdateProjectAvatarUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectAvatarForbidden creates a UpdateProjectAvatarForbidden with default headers values
func NewUpdateProjectAvatarForbidden() *UpdateProjectAvatarForbidden {
	return &UpdateProjectAvatarForbidden{}
}

/*
UpdateProjectAvatarForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateProjectAvatarForbidden struct {
}

// IsSuccess returns true when this update project avatar forbidden response has a 2xx status code
func (o *UpdateProjectAvatarForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project avatar forbidden response has a 3xx status code
func (o *UpdateProjectAvatarForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project avatar forbidden response has a 4xx status code
func (o *UpdateProjectAvatarForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project avatar forbidden response has a 5xx status code
func (o *UpdateProjectAvatarForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update project avatar forbidden response a status code equal to that given
func (o *UpdateProjectAvatarForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update project avatar forbidden response
func (o *UpdateProjectAvatarForbidden) Code() int {
	return 403
}

func (o *UpdateProjectAvatarForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects1/{projectId}/avatar][%d] updateProjectAvatarForbidden ", 403)
}

func (o *UpdateProjectAvatarForbidden) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects1/{projectId}/avatar][%d] updateProjectAvatarForbidden ", 403)
}

func (o *UpdateProjectAvatarForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectAvatarNotFound creates a UpdateProjectAvatarNotFound with default headers values
func NewUpdateProjectAvatarNotFound() *UpdateProjectAvatarNotFound {
	return &UpdateProjectAvatarNotFound{}
}

/*
UpdateProjectAvatarNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateProjectAvatarNotFound struct {
}

// IsSuccess returns true when this update project avatar not found response has a 2xx status code
func (o *UpdateProjectAvatarNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project avatar not found response has a 3xx status code
func (o *UpdateProjectAvatarNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project avatar not found response has a 4xx status code
func (o *UpdateProjectAvatarNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project avatar not found response has a 5xx status code
func (o *UpdateProjectAvatarNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update project avatar not found response a status code equal to that given
func (o *UpdateProjectAvatarNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update project avatar not found response
func (o *UpdateProjectAvatarNotFound) Code() int {
	return 404
}

func (o *UpdateProjectAvatarNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects1/{projectId}/avatar][%d] updateProjectAvatarNotFound ", 404)
}

func (o *UpdateProjectAvatarNotFound) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects1/{projectId}/avatar][%d] updateProjectAvatarNotFound ", 404)
}

func (o *UpdateProjectAvatarNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectAvatarRequestTimeout creates a UpdateProjectAvatarRequestTimeout with default headers values
func NewUpdateProjectAvatarRequestTimeout() *UpdateProjectAvatarRequestTimeout {
	return &UpdateProjectAvatarRequestTimeout{}
}

/*
UpdateProjectAvatarRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type UpdateProjectAvatarRequestTimeout struct {
}

// IsSuccess returns true when this update project avatar request timeout response has a 2xx status code
func (o *UpdateProjectAvatarRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project avatar request timeout response has a 3xx status code
func (o *UpdateProjectAvatarRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project avatar request timeout response has a 4xx status code
func (o *UpdateProjectAvatarRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project avatar request timeout response has a 5xx status code
func (o *UpdateProjectAvatarRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this update project avatar request timeout response a status code equal to that given
func (o *UpdateProjectAvatarRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the update project avatar request timeout response
func (o *UpdateProjectAvatarRequestTimeout) Code() int {
	return 408
}

func (o *UpdateProjectAvatarRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects1/{projectId}/avatar][%d] updateProjectAvatarRequestTimeout ", 408)
}

func (o *UpdateProjectAvatarRequestTimeout) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects1/{projectId}/avatar][%d] updateProjectAvatarRequestTimeout ", 408)
}

func (o *UpdateProjectAvatarRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectAvatarUnprocessableEntity creates a UpdateProjectAvatarUnprocessableEntity with default headers values
func NewUpdateProjectAvatarUnprocessableEntity() *UpdateProjectAvatarUnprocessableEntity {
	return &UpdateProjectAvatarUnprocessableEntity{}
}

/*
UpdateProjectAvatarUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type UpdateProjectAvatarUnprocessableEntity struct {
}

// IsSuccess returns true when this update project avatar unprocessable entity response has a 2xx status code
func (o *UpdateProjectAvatarUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project avatar unprocessable entity response has a 3xx status code
func (o *UpdateProjectAvatarUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project avatar unprocessable entity response has a 4xx status code
func (o *UpdateProjectAvatarUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project avatar unprocessable entity response has a 5xx status code
func (o *UpdateProjectAvatarUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update project avatar unprocessable entity response a status code equal to that given
func (o *UpdateProjectAvatarUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update project avatar unprocessable entity response
func (o *UpdateProjectAvatarUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateProjectAvatarUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects1/{projectId}/avatar][%d] updateProjectAvatarUnprocessableEntity ", 422)
}

func (o *UpdateProjectAvatarUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects1/{projectId}/avatar][%d] updateProjectAvatarUnprocessableEntity ", 422)
}

func (o *UpdateProjectAvatarUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
