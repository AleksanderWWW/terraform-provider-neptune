// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"terraform-provider-neptune/internal/neptune/models"
)

// AddMonitoringHoursReader is a Reader for the AddMonitoringHours structure.
type AddMonitoringHoursReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddMonitoringHoursReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddMonitoringHoursOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddMonitoringHoursBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAddMonitoringHoursUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddMonitoringHoursForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddMonitoringHoursNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewAddMonitoringHoursRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewAddMonitoringHoursUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /api/backend/v1/payments/limits/addMonitoringHours] addMonitoringHours", response, response.Code())
	}
}

// NewAddMonitoringHoursOK creates a AddMonitoringHoursOK with default headers values
func NewAddMonitoringHoursOK() *AddMonitoringHoursOK {
	return &AddMonitoringHoursOK{}
}

/*
AddMonitoringHoursOK describes a response with status code 200, with default header values.

OK
*/
type AddMonitoringHoursOK struct {
	Payload *models.PurchaseResultDTO
}

// IsSuccess returns true when this add monitoring hours o k response has a 2xx status code
func (o *AddMonitoringHoursOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add monitoring hours o k response has a 3xx status code
func (o *AddMonitoringHoursOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add monitoring hours o k response has a 4xx status code
func (o *AddMonitoringHoursOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this add monitoring hours o k response has a 5xx status code
func (o *AddMonitoringHoursOK) IsServerError() bool {
	return false
}

// IsCode returns true when this add monitoring hours o k response a status code equal to that given
func (o *AddMonitoringHoursOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the add monitoring hours o k response
func (o *AddMonitoringHoursOK) Code() int {
	return 200
}

func (o *AddMonitoringHoursOK) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/limits/addMonitoringHours][%d] addMonitoringHoursOK  %+v", 200, o.Payload)
}

func (o *AddMonitoringHoursOK) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/limits/addMonitoringHours][%d] addMonitoringHoursOK  %+v", 200, o.Payload)
}

func (o *AddMonitoringHoursOK) GetPayload() *models.PurchaseResultDTO {
	return o.Payload
}

func (o *AddMonitoringHoursOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PurchaseResultDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddMonitoringHoursBadRequest creates a AddMonitoringHoursBadRequest with default headers values
func NewAddMonitoringHoursBadRequest() *AddMonitoringHoursBadRequest {
	return &AddMonitoringHoursBadRequest{}
}

/*
AddMonitoringHoursBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AddMonitoringHoursBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this add monitoring hours bad request response has a 2xx status code
func (o *AddMonitoringHoursBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add monitoring hours bad request response has a 3xx status code
func (o *AddMonitoringHoursBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add monitoring hours bad request response has a 4xx status code
func (o *AddMonitoringHoursBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this add monitoring hours bad request response has a 5xx status code
func (o *AddMonitoringHoursBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this add monitoring hours bad request response a status code equal to that given
func (o *AddMonitoringHoursBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the add monitoring hours bad request response
func (o *AddMonitoringHoursBadRequest) Code() int {
	return 400
}

func (o *AddMonitoringHoursBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/limits/addMonitoringHours][%d] addMonitoringHoursBadRequest  %+v", 400, o.Payload)
}

func (o *AddMonitoringHoursBadRequest) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/limits/addMonitoringHours][%d] addMonitoringHoursBadRequest  %+v", 400, o.Payload)
}

func (o *AddMonitoringHoursBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *AddMonitoringHoursBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddMonitoringHoursUnauthorized creates a AddMonitoringHoursUnauthorized with default headers values
func NewAddMonitoringHoursUnauthorized() *AddMonitoringHoursUnauthorized {
	return &AddMonitoringHoursUnauthorized{}
}

/*
AddMonitoringHoursUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AddMonitoringHoursUnauthorized struct {
}

// IsSuccess returns true when this add monitoring hours unauthorized response has a 2xx status code
func (o *AddMonitoringHoursUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add monitoring hours unauthorized response has a 3xx status code
func (o *AddMonitoringHoursUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add monitoring hours unauthorized response has a 4xx status code
func (o *AddMonitoringHoursUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this add monitoring hours unauthorized response has a 5xx status code
func (o *AddMonitoringHoursUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this add monitoring hours unauthorized response a status code equal to that given
func (o *AddMonitoringHoursUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the add monitoring hours unauthorized response
func (o *AddMonitoringHoursUnauthorized) Code() int {
	return 401
}

func (o *AddMonitoringHoursUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/limits/addMonitoringHours][%d] addMonitoringHoursUnauthorized ", 401)
}

func (o *AddMonitoringHoursUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/limits/addMonitoringHours][%d] addMonitoringHoursUnauthorized ", 401)
}

func (o *AddMonitoringHoursUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddMonitoringHoursForbidden creates a AddMonitoringHoursForbidden with default headers values
func NewAddMonitoringHoursForbidden() *AddMonitoringHoursForbidden {
	return &AddMonitoringHoursForbidden{}
}

/*
AddMonitoringHoursForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AddMonitoringHoursForbidden struct {
}

// IsSuccess returns true when this add monitoring hours forbidden response has a 2xx status code
func (o *AddMonitoringHoursForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add monitoring hours forbidden response has a 3xx status code
func (o *AddMonitoringHoursForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add monitoring hours forbidden response has a 4xx status code
func (o *AddMonitoringHoursForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this add monitoring hours forbidden response has a 5xx status code
func (o *AddMonitoringHoursForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this add monitoring hours forbidden response a status code equal to that given
func (o *AddMonitoringHoursForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the add monitoring hours forbidden response
func (o *AddMonitoringHoursForbidden) Code() int {
	return 403
}

func (o *AddMonitoringHoursForbidden) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/limits/addMonitoringHours][%d] addMonitoringHoursForbidden ", 403)
}

func (o *AddMonitoringHoursForbidden) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/limits/addMonitoringHours][%d] addMonitoringHoursForbidden ", 403)
}

func (o *AddMonitoringHoursForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddMonitoringHoursNotFound creates a AddMonitoringHoursNotFound with default headers values
func NewAddMonitoringHoursNotFound() *AddMonitoringHoursNotFound {
	return &AddMonitoringHoursNotFound{}
}

/*
AddMonitoringHoursNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AddMonitoringHoursNotFound struct {
}

// IsSuccess returns true when this add monitoring hours not found response has a 2xx status code
func (o *AddMonitoringHoursNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add monitoring hours not found response has a 3xx status code
func (o *AddMonitoringHoursNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add monitoring hours not found response has a 4xx status code
func (o *AddMonitoringHoursNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this add monitoring hours not found response has a 5xx status code
func (o *AddMonitoringHoursNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this add monitoring hours not found response a status code equal to that given
func (o *AddMonitoringHoursNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the add monitoring hours not found response
func (o *AddMonitoringHoursNotFound) Code() int {
	return 404
}

func (o *AddMonitoringHoursNotFound) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/limits/addMonitoringHours][%d] addMonitoringHoursNotFound ", 404)
}

func (o *AddMonitoringHoursNotFound) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/limits/addMonitoringHours][%d] addMonitoringHoursNotFound ", 404)
}

func (o *AddMonitoringHoursNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddMonitoringHoursRequestTimeout creates a AddMonitoringHoursRequestTimeout with default headers values
func NewAddMonitoringHoursRequestTimeout() *AddMonitoringHoursRequestTimeout {
	return &AddMonitoringHoursRequestTimeout{}
}

/*
AddMonitoringHoursRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type AddMonitoringHoursRequestTimeout struct {
}

// IsSuccess returns true when this add monitoring hours request timeout response has a 2xx status code
func (o *AddMonitoringHoursRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add monitoring hours request timeout response has a 3xx status code
func (o *AddMonitoringHoursRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add monitoring hours request timeout response has a 4xx status code
func (o *AddMonitoringHoursRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this add monitoring hours request timeout response has a 5xx status code
func (o *AddMonitoringHoursRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this add monitoring hours request timeout response a status code equal to that given
func (o *AddMonitoringHoursRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the add monitoring hours request timeout response
func (o *AddMonitoringHoursRequestTimeout) Code() int {
	return 408
}

func (o *AddMonitoringHoursRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/limits/addMonitoringHours][%d] addMonitoringHoursRequestTimeout ", 408)
}

func (o *AddMonitoringHoursRequestTimeout) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/limits/addMonitoringHours][%d] addMonitoringHoursRequestTimeout ", 408)
}

func (o *AddMonitoringHoursRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddMonitoringHoursUnprocessableEntity creates a AddMonitoringHoursUnprocessableEntity with default headers values
func NewAddMonitoringHoursUnprocessableEntity() *AddMonitoringHoursUnprocessableEntity {
	return &AddMonitoringHoursUnprocessableEntity{}
}

/*
AddMonitoringHoursUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type AddMonitoringHoursUnprocessableEntity struct {
}

// IsSuccess returns true when this add monitoring hours unprocessable entity response has a 2xx status code
func (o *AddMonitoringHoursUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add monitoring hours unprocessable entity response has a 3xx status code
func (o *AddMonitoringHoursUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add monitoring hours unprocessable entity response has a 4xx status code
func (o *AddMonitoringHoursUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this add monitoring hours unprocessable entity response has a 5xx status code
func (o *AddMonitoringHoursUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this add monitoring hours unprocessable entity response a status code equal to that given
func (o *AddMonitoringHoursUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the add monitoring hours unprocessable entity response
func (o *AddMonitoringHoursUnprocessableEntity) Code() int {
	return 422
}

func (o *AddMonitoringHoursUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/limits/addMonitoringHours][%d] addMonitoringHoursUnprocessableEntity ", 422)
}

func (o *AddMonitoringHoursUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/limits/addMonitoringHours][%d] addMonitoringHoursUnprocessableEntity ", 422)
}

func (o *AddMonitoringHoursUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
