// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListProjectsMembersParams creates a new ListProjectsMembersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListProjectsMembersParams() *ListProjectsMembersParams {
	return &ListProjectsMembersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListProjectsMembersParamsWithTimeout creates a new ListProjectsMembersParams object
// with the ability to set a timeout on a request.
func NewListProjectsMembersParamsWithTimeout(timeout time.Duration) *ListProjectsMembersParams {
	return &ListProjectsMembersParams{
		timeout: timeout,
	}
}

// NewListProjectsMembersParamsWithContext creates a new ListProjectsMembersParams object
// with the ability to set a context for a request.
func NewListProjectsMembersParamsWithContext(ctx context.Context) *ListProjectsMembersParams {
	return &ListProjectsMembersParams{
		Context: ctx,
	}
}

// NewListProjectsMembersParamsWithHTTPClient creates a new ListProjectsMembersParams object
// with the ability to set a custom HTTPClient for a request.
func NewListProjectsMembersParamsWithHTTPClient(client *http.Client) *ListProjectsMembersParams {
	return &ListProjectsMembersParams{
		HTTPClient: client,
	}
}

/*
ListProjectsMembersParams contains all the parameters to send to the API endpoint

	for the list projects members operation.

	Typically these are written to a http.Request.
*/
type ListProjectsMembersParams struct {

	// IncludeInvitations.
	//
	// Default: "Some(true)"
	IncludeInvitations *bool

	// ProjectIdentifier.
	ProjectIdentifier []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list projects members params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListProjectsMembersParams) WithDefaults() *ListProjectsMembersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list projects members params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListProjectsMembersParams) SetDefaults() {
	var (
		includeInvitationsDefault = true
	)

	val := ListProjectsMembersParams{
		IncludeInvitations: &includeInvitationsDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the list projects members params
func (o *ListProjectsMembersParams) WithTimeout(timeout time.Duration) *ListProjectsMembersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list projects members params
func (o *ListProjectsMembersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list projects members params
func (o *ListProjectsMembersParams) WithContext(ctx context.Context) *ListProjectsMembersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list projects members params
func (o *ListProjectsMembersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list projects members params
func (o *ListProjectsMembersParams) WithHTTPClient(client *http.Client) *ListProjectsMembersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list projects members params
func (o *ListProjectsMembersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIncludeInvitations adds the includeInvitations to the list projects members params
func (o *ListProjectsMembersParams) WithIncludeInvitations(includeInvitations *bool) *ListProjectsMembersParams {
	o.SetIncludeInvitations(includeInvitations)
	return o
}

// SetIncludeInvitations adds the includeInvitations to the list projects members params
func (o *ListProjectsMembersParams) SetIncludeInvitations(includeInvitations *bool) {
	o.IncludeInvitations = includeInvitations
}

// WithProjectIdentifier adds the projectIdentifier to the list projects members params
func (o *ListProjectsMembersParams) WithProjectIdentifier(projectIdentifier []string) *ListProjectsMembersParams {
	o.SetProjectIdentifier(projectIdentifier)
	return o
}

// SetProjectIdentifier adds the projectIdentifier to the list projects members params
func (o *ListProjectsMembersParams) SetProjectIdentifier(projectIdentifier []string) {
	o.ProjectIdentifier = projectIdentifier
}

// WriteToRequest writes these params to a swagger request
func (o *ListProjectsMembersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IncludeInvitations != nil {

		// query param includeInvitations
		var qrIncludeInvitations bool

		if o.IncludeInvitations != nil {
			qrIncludeInvitations = *o.IncludeInvitations
		}
		qIncludeInvitations := swag.FormatBool(qrIncludeInvitations)
		if qIncludeInvitations != "" {

			if err := r.SetQueryParam("includeInvitations", qIncludeInvitations); err != nil {
				return err
			}
		}
	}

	if o.ProjectIdentifier != nil {

		// binding items for projectIdentifier
		joinedProjectIdentifier := o.bindParamProjectIdentifier(reg)

		// query array param projectIdentifier
		if err := r.SetQueryParam("projectIdentifier", joinedProjectIdentifier...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamListProjectsMembers binds the parameter projectIdentifier
func (o *ListProjectsMembersParams) bindParamProjectIdentifier(formats strfmt.Registry) []string {
	projectIdentifierIR := o.ProjectIdentifier

	var projectIdentifierIC []string
	for _, projectIdentifierIIR := range projectIdentifierIR { // explode []string

		projectIdentifierIIV := projectIdentifierIIR // string as string
		projectIdentifierIC = append(projectIdentifierIC, projectIdentifierIIV)
	}

	// items.CollectionFormat: "multi"
	projectIdentifierIS := swag.JoinByFormat(projectIdentifierIC, "multi")

	return projectIdentifierIS
}
