// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"terraform-provider-neptune/internal/neptune/models"
)

// RequestTeamTrialReader is a Reader for the RequestTeamTrial structure.
type RequestTeamTrialReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RequestTeamTrialReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRequestTeamTrialOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRequestTeamTrialBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRequestTeamTrialUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRequestTeamTrialForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRequestTeamTrialNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewRequestTeamTrialRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewRequestTeamTrialUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /api/backend/v1/payments/request/team-trial] requestTeamTrial", response, response.Code())
	}
}

// NewRequestTeamTrialOK creates a RequestTeamTrialOK with default headers values
func NewRequestTeamTrialOK() *RequestTeamTrialOK {
	return &RequestTeamTrialOK{}
}

/*
RequestTeamTrialOK describes a response with status code 200, with default header values.

No response
*/
type RequestTeamTrialOK struct {
}

// IsSuccess returns true when this request team trial o k response has a 2xx status code
func (o *RequestTeamTrialOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this request team trial o k response has a 3xx status code
func (o *RequestTeamTrialOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this request team trial o k response has a 4xx status code
func (o *RequestTeamTrialOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this request team trial o k response has a 5xx status code
func (o *RequestTeamTrialOK) IsServerError() bool {
	return false
}

// IsCode returns true when this request team trial o k response a status code equal to that given
func (o *RequestTeamTrialOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the request team trial o k response
func (o *RequestTeamTrialOK) Code() int {
	return 200
}

func (o *RequestTeamTrialOK) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/request/team-trial][%d] requestTeamTrialOK ", 200)
}

func (o *RequestTeamTrialOK) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/request/team-trial][%d] requestTeamTrialOK ", 200)
}

func (o *RequestTeamTrialOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRequestTeamTrialBadRequest creates a RequestTeamTrialBadRequest with default headers values
func NewRequestTeamTrialBadRequest() *RequestTeamTrialBadRequest {
	return &RequestTeamTrialBadRequest{}
}

/*
RequestTeamTrialBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RequestTeamTrialBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this request team trial bad request response has a 2xx status code
func (o *RequestTeamTrialBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this request team trial bad request response has a 3xx status code
func (o *RequestTeamTrialBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this request team trial bad request response has a 4xx status code
func (o *RequestTeamTrialBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this request team trial bad request response has a 5xx status code
func (o *RequestTeamTrialBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this request team trial bad request response a status code equal to that given
func (o *RequestTeamTrialBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the request team trial bad request response
func (o *RequestTeamTrialBadRequest) Code() int {
	return 400
}

func (o *RequestTeamTrialBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/request/team-trial][%d] requestTeamTrialBadRequest  %+v", 400, o.Payload)
}

func (o *RequestTeamTrialBadRequest) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/request/team-trial][%d] requestTeamTrialBadRequest  %+v", 400, o.Payload)
}

func (o *RequestTeamTrialBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *RequestTeamTrialBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestTeamTrialUnauthorized creates a RequestTeamTrialUnauthorized with default headers values
func NewRequestTeamTrialUnauthorized() *RequestTeamTrialUnauthorized {
	return &RequestTeamTrialUnauthorized{}
}

/*
RequestTeamTrialUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RequestTeamTrialUnauthorized struct {
}

// IsSuccess returns true when this request team trial unauthorized response has a 2xx status code
func (o *RequestTeamTrialUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this request team trial unauthorized response has a 3xx status code
func (o *RequestTeamTrialUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this request team trial unauthorized response has a 4xx status code
func (o *RequestTeamTrialUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this request team trial unauthorized response has a 5xx status code
func (o *RequestTeamTrialUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this request team trial unauthorized response a status code equal to that given
func (o *RequestTeamTrialUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the request team trial unauthorized response
func (o *RequestTeamTrialUnauthorized) Code() int {
	return 401
}

func (o *RequestTeamTrialUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/request/team-trial][%d] requestTeamTrialUnauthorized ", 401)
}

func (o *RequestTeamTrialUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/request/team-trial][%d] requestTeamTrialUnauthorized ", 401)
}

func (o *RequestTeamTrialUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRequestTeamTrialForbidden creates a RequestTeamTrialForbidden with default headers values
func NewRequestTeamTrialForbidden() *RequestTeamTrialForbidden {
	return &RequestTeamTrialForbidden{}
}

/*
RequestTeamTrialForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RequestTeamTrialForbidden struct {
}

// IsSuccess returns true when this request team trial forbidden response has a 2xx status code
func (o *RequestTeamTrialForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this request team trial forbidden response has a 3xx status code
func (o *RequestTeamTrialForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this request team trial forbidden response has a 4xx status code
func (o *RequestTeamTrialForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this request team trial forbidden response has a 5xx status code
func (o *RequestTeamTrialForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this request team trial forbidden response a status code equal to that given
func (o *RequestTeamTrialForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the request team trial forbidden response
func (o *RequestTeamTrialForbidden) Code() int {
	return 403
}

func (o *RequestTeamTrialForbidden) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/request/team-trial][%d] requestTeamTrialForbidden ", 403)
}

func (o *RequestTeamTrialForbidden) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/request/team-trial][%d] requestTeamTrialForbidden ", 403)
}

func (o *RequestTeamTrialForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRequestTeamTrialNotFound creates a RequestTeamTrialNotFound with default headers values
func NewRequestTeamTrialNotFound() *RequestTeamTrialNotFound {
	return &RequestTeamTrialNotFound{}
}

/*
RequestTeamTrialNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RequestTeamTrialNotFound struct {
}

// IsSuccess returns true when this request team trial not found response has a 2xx status code
func (o *RequestTeamTrialNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this request team trial not found response has a 3xx status code
func (o *RequestTeamTrialNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this request team trial not found response has a 4xx status code
func (o *RequestTeamTrialNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this request team trial not found response has a 5xx status code
func (o *RequestTeamTrialNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this request team trial not found response a status code equal to that given
func (o *RequestTeamTrialNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the request team trial not found response
func (o *RequestTeamTrialNotFound) Code() int {
	return 404
}

func (o *RequestTeamTrialNotFound) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/request/team-trial][%d] requestTeamTrialNotFound ", 404)
}

func (o *RequestTeamTrialNotFound) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/request/team-trial][%d] requestTeamTrialNotFound ", 404)
}

func (o *RequestTeamTrialNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRequestTeamTrialRequestTimeout creates a RequestTeamTrialRequestTimeout with default headers values
func NewRequestTeamTrialRequestTimeout() *RequestTeamTrialRequestTimeout {
	return &RequestTeamTrialRequestTimeout{}
}

/*
RequestTeamTrialRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type RequestTeamTrialRequestTimeout struct {
}

// IsSuccess returns true when this request team trial request timeout response has a 2xx status code
func (o *RequestTeamTrialRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this request team trial request timeout response has a 3xx status code
func (o *RequestTeamTrialRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this request team trial request timeout response has a 4xx status code
func (o *RequestTeamTrialRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this request team trial request timeout response has a 5xx status code
func (o *RequestTeamTrialRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this request team trial request timeout response a status code equal to that given
func (o *RequestTeamTrialRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the request team trial request timeout response
func (o *RequestTeamTrialRequestTimeout) Code() int {
	return 408
}

func (o *RequestTeamTrialRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/request/team-trial][%d] requestTeamTrialRequestTimeout ", 408)
}

func (o *RequestTeamTrialRequestTimeout) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/request/team-trial][%d] requestTeamTrialRequestTimeout ", 408)
}

func (o *RequestTeamTrialRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRequestTeamTrialUnprocessableEntity creates a RequestTeamTrialUnprocessableEntity with default headers values
func NewRequestTeamTrialUnprocessableEntity() *RequestTeamTrialUnprocessableEntity {
	return &RequestTeamTrialUnprocessableEntity{}
}

/*
RequestTeamTrialUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type RequestTeamTrialUnprocessableEntity struct {
}

// IsSuccess returns true when this request team trial unprocessable entity response has a 2xx status code
func (o *RequestTeamTrialUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this request team trial unprocessable entity response has a 3xx status code
func (o *RequestTeamTrialUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this request team trial unprocessable entity response has a 4xx status code
func (o *RequestTeamTrialUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this request team trial unprocessable entity response has a 5xx status code
func (o *RequestTeamTrialUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this request team trial unprocessable entity response a status code equal to that given
func (o *RequestTeamTrialUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the request team trial unprocessable entity response
func (o *RequestTeamTrialUnprocessableEntity) Code() int {
	return 422
}

func (o *RequestTeamTrialUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/request/team-trial][%d] requestTeamTrialUnprocessableEntity ", 422)
}

func (o *RequestTeamTrialUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/request/team-trial][%d] requestTeamTrialUnprocessableEntity ", 422)
}

func (o *RequestTeamTrialUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
