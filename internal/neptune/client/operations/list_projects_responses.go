// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// ListProjectsReader is a Reader for the ListProjects structure.
type ListProjectsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListProjectsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListProjectsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListProjectsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListProjectsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListProjectsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListProjectsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewListProjectsRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewListProjectsUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/backend/v1/projects] listProjects", response, response.Code())
	}
}

// NewListProjectsOK creates a ListProjectsOK with default headers values
func NewListProjectsOK() *ListProjectsOK {
	return &ListProjectsOK{}
}

/*
ListProjectsOK describes a response with status code 200, with default header values.

OK
*/
type ListProjectsOK struct {
	Payload *models.ProjectListDTO
}

// IsSuccess returns true when this list projects o k response has a 2xx status code
func (o *ListProjectsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list projects o k response has a 3xx status code
func (o *ListProjectsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list projects o k response has a 4xx status code
func (o *ListProjectsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list projects o k response has a 5xx status code
func (o *ListProjectsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list projects o k response a status code equal to that given
func (o *ListProjectsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list projects o k response
func (o *ListProjectsOK) Code() int {
	return 200
}

func (o *ListProjectsOK) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/projects][%d] listProjectsOK  %+v", 200, o.Payload)
}

func (o *ListProjectsOK) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/projects][%d] listProjectsOK  %+v", 200, o.Payload)
}

func (o *ListProjectsOK) GetPayload() *models.ProjectListDTO {
	return o.Payload
}

func (o *ListProjectsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProjectListDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListProjectsBadRequest creates a ListProjectsBadRequest with default headers values
func NewListProjectsBadRequest() *ListProjectsBadRequest {
	return &ListProjectsBadRequest{}
}

/*
ListProjectsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ListProjectsBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this list projects bad request response has a 2xx status code
func (o *ListProjectsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list projects bad request response has a 3xx status code
func (o *ListProjectsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list projects bad request response has a 4xx status code
func (o *ListProjectsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list projects bad request response has a 5xx status code
func (o *ListProjectsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list projects bad request response a status code equal to that given
func (o *ListProjectsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the list projects bad request response
func (o *ListProjectsBadRequest) Code() int {
	return 400
}

func (o *ListProjectsBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/projects][%d] listProjectsBadRequest  %+v", 400, o.Payload)
}

func (o *ListProjectsBadRequest) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/projects][%d] listProjectsBadRequest  %+v", 400, o.Payload)
}

func (o *ListProjectsBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListProjectsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListProjectsUnauthorized creates a ListProjectsUnauthorized with default headers values
func NewListProjectsUnauthorized() *ListProjectsUnauthorized {
	return &ListProjectsUnauthorized{}
}

/*
ListProjectsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ListProjectsUnauthorized struct {
}

// IsSuccess returns true when this list projects unauthorized response has a 2xx status code
func (o *ListProjectsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list projects unauthorized response has a 3xx status code
func (o *ListProjectsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list projects unauthorized response has a 4xx status code
func (o *ListProjectsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list projects unauthorized response has a 5xx status code
func (o *ListProjectsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list projects unauthorized response a status code equal to that given
func (o *ListProjectsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list projects unauthorized response
func (o *ListProjectsUnauthorized) Code() int {
	return 401
}

func (o *ListProjectsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/projects][%d] listProjectsUnauthorized ", 401)
}

func (o *ListProjectsUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/projects][%d] listProjectsUnauthorized ", 401)
}

func (o *ListProjectsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListProjectsForbidden creates a ListProjectsForbidden with default headers values
func NewListProjectsForbidden() *ListProjectsForbidden {
	return &ListProjectsForbidden{}
}

/*
ListProjectsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ListProjectsForbidden struct {
}

// IsSuccess returns true when this list projects forbidden response has a 2xx status code
func (o *ListProjectsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list projects forbidden response has a 3xx status code
func (o *ListProjectsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list projects forbidden response has a 4xx status code
func (o *ListProjectsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list projects forbidden response has a 5xx status code
func (o *ListProjectsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list projects forbidden response a status code equal to that given
func (o *ListProjectsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list projects forbidden response
func (o *ListProjectsForbidden) Code() int {
	return 403
}

func (o *ListProjectsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/projects][%d] listProjectsForbidden ", 403)
}

func (o *ListProjectsForbidden) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/projects][%d] listProjectsForbidden ", 403)
}

func (o *ListProjectsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListProjectsNotFound creates a ListProjectsNotFound with default headers values
func NewListProjectsNotFound() *ListProjectsNotFound {
	return &ListProjectsNotFound{}
}

/*
ListProjectsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ListProjectsNotFound struct {
}

// IsSuccess returns true when this list projects not found response has a 2xx status code
func (o *ListProjectsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list projects not found response has a 3xx status code
func (o *ListProjectsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list projects not found response has a 4xx status code
func (o *ListProjectsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list projects not found response has a 5xx status code
func (o *ListProjectsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list projects not found response a status code equal to that given
func (o *ListProjectsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list projects not found response
func (o *ListProjectsNotFound) Code() int {
	return 404
}

func (o *ListProjectsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/projects][%d] listProjectsNotFound ", 404)
}

func (o *ListProjectsNotFound) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/projects][%d] listProjectsNotFound ", 404)
}

func (o *ListProjectsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListProjectsRequestTimeout creates a ListProjectsRequestTimeout with default headers values
func NewListProjectsRequestTimeout() *ListProjectsRequestTimeout {
	return &ListProjectsRequestTimeout{}
}

/*
ListProjectsRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type ListProjectsRequestTimeout struct {
}

// IsSuccess returns true when this list projects request timeout response has a 2xx status code
func (o *ListProjectsRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list projects request timeout response has a 3xx status code
func (o *ListProjectsRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list projects request timeout response has a 4xx status code
func (o *ListProjectsRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this list projects request timeout response has a 5xx status code
func (o *ListProjectsRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this list projects request timeout response a status code equal to that given
func (o *ListProjectsRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the list projects request timeout response
func (o *ListProjectsRequestTimeout) Code() int {
	return 408
}

func (o *ListProjectsRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/projects][%d] listProjectsRequestTimeout ", 408)
}

func (o *ListProjectsRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/projects][%d] listProjectsRequestTimeout ", 408)
}

func (o *ListProjectsRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListProjectsUnprocessableEntity creates a ListProjectsUnprocessableEntity with default headers values
func NewListProjectsUnprocessableEntity() *ListProjectsUnprocessableEntity {
	return &ListProjectsUnprocessableEntity{}
}

/*
ListProjectsUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type ListProjectsUnprocessableEntity struct {
}

// IsSuccess returns true when this list projects unprocessable entity response has a 2xx status code
func (o *ListProjectsUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list projects unprocessable entity response has a 3xx status code
func (o *ListProjectsUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list projects unprocessable entity response has a 4xx status code
func (o *ListProjectsUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this list projects unprocessable entity response has a 5xx status code
func (o *ListProjectsUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this list projects unprocessable entity response a status code equal to that given
func (o *ListProjectsUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the list projects unprocessable entity response
func (o *ListProjectsUnprocessableEntity) Code() int {
	return 422
}

func (o *ListProjectsUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/projects][%d] listProjectsUnprocessableEntity ", 422)
}

func (o *ListProjectsUnprocessableEntity) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/projects][%d] listProjectsUnprocessableEntity ", 422)
}

func (o *ListProjectsUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
