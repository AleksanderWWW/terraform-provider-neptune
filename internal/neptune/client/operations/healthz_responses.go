// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"terraform-provider-neptune/internal/neptune/models"
)

// HealthzReader is a Reader for the Healthz structure.
type HealthzReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HealthzReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewHealthzOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewHealthzBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewHealthzUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewHealthzForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewHealthzNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewHealthzRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewHealthzUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/backend/healthz] healthz", response, response.Code())
	}
}

// NewHealthzOK creates a HealthzOK with default headers values
func NewHealthzOK() *HealthzOK {
	return &HealthzOK{}
}

/*
HealthzOK describes a response with status code 200, with default header values.

OK
*/
type HealthzOK struct {
	Payload []*models.ComponentStatus
}

// IsSuccess returns true when this healthz o k response has a 2xx status code
func (o *HealthzOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this healthz o k response has a 3xx status code
func (o *HealthzOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this healthz o k response has a 4xx status code
func (o *HealthzOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this healthz o k response has a 5xx status code
func (o *HealthzOK) IsServerError() bool {
	return false
}

// IsCode returns true when this healthz o k response a status code equal to that given
func (o *HealthzOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the healthz o k response
func (o *HealthzOK) Code() int {
	return 200
}

func (o *HealthzOK) Error() string {
	return fmt.Sprintf("[GET /api/backend/healthz][%d] healthzOK  %+v", 200, o.Payload)
}

func (o *HealthzOK) String() string {
	return fmt.Sprintf("[GET /api/backend/healthz][%d] healthzOK  %+v", 200, o.Payload)
}

func (o *HealthzOK) GetPayload() []*models.ComponentStatus {
	return o.Payload
}

func (o *HealthzOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHealthzBadRequest creates a HealthzBadRequest with default headers values
func NewHealthzBadRequest() *HealthzBadRequest {
	return &HealthzBadRequest{}
}

/*
HealthzBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type HealthzBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this healthz bad request response has a 2xx status code
func (o *HealthzBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this healthz bad request response has a 3xx status code
func (o *HealthzBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this healthz bad request response has a 4xx status code
func (o *HealthzBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this healthz bad request response has a 5xx status code
func (o *HealthzBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this healthz bad request response a status code equal to that given
func (o *HealthzBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the healthz bad request response
func (o *HealthzBadRequest) Code() int {
	return 400
}

func (o *HealthzBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/backend/healthz][%d] healthzBadRequest  %+v", 400, o.Payload)
}

func (o *HealthzBadRequest) String() string {
	return fmt.Sprintf("[GET /api/backend/healthz][%d] healthzBadRequest  %+v", 400, o.Payload)
}

func (o *HealthzBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *HealthzBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHealthzUnauthorized creates a HealthzUnauthorized with default headers values
func NewHealthzUnauthorized() *HealthzUnauthorized {
	return &HealthzUnauthorized{}
}

/*
HealthzUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type HealthzUnauthorized struct {
}

// IsSuccess returns true when this healthz unauthorized response has a 2xx status code
func (o *HealthzUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this healthz unauthorized response has a 3xx status code
func (o *HealthzUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this healthz unauthorized response has a 4xx status code
func (o *HealthzUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this healthz unauthorized response has a 5xx status code
func (o *HealthzUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this healthz unauthorized response a status code equal to that given
func (o *HealthzUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the healthz unauthorized response
func (o *HealthzUnauthorized) Code() int {
	return 401
}

func (o *HealthzUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/backend/healthz][%d] healthzUnauthorized ", 401)
}

func (o *HealthzUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/backend/healthz][%d] healthzUnauthorized ", 401)
}

func (o *HealthzUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHealthzForbidden creates a HealthzForbidden with default headers values
func NewHealthzForbidden() *HealthzForbidden {
	return &HealthzForbidden{}
}

/*
HealthzForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type HealthzForbidden struct {
}

// IsSuccess returns true when this healthz forbidden response has a 2xx status code
func (o *HealthzForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this healthz forbidden response has a 3xx status code
func (o *HealthzForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this healthz forbidden response has a 4xx status code
func (o *HealthzForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this healthz forbidden response has a 5xx status code
func (o *HealthzForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this healthz forbidden response a status code equal to that given
func (o *HealthzForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the healthz forbidden response
func (o *HealthzForbidden) Code() int {
	return 403
}

func (o *HealthzForbidden) Error() string {
	return fmt.Sprintf("[GET /api/backend/healthz][%d] healthzForbidden ", 403)
}

func (o *HealthzForbidden) String() string {
	return fmt.Sprintf("[GET /api/backend/healthz][%d] healthzForbidden ", 403)
}

func (o *HealthzForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHealthzNotFound creates a HealthzNotFound with default headers values
func NewHealthzNotFound() *HealthzNotFound {
	return &HealthzNotFound{}
}

/*
HealthzNotFound describes a response with status code 404, with default header values.

Not Found
*/
type HealthzNotFound struct {
}

// IsSuccess returns true when this healthz not found response has a 2xx status code
func (o *HealthzNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this healthz not found response has a 3xx status code
func (o *HealthzNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this healthz not found response has a 4xx status code
func (o *HealthzNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this healthz not found response has a 5xx status code
func (o *HealthzNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this healthz not found response a status code equal to that given
func (o *HealthzNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the healthz not found response
func (o *HealthzNotFound) Code() int {
	return 404
}

func (o *HealthzNotFound) Error() string {
	return fmt.Sprintf("[GET /api/backend/healthz][%d] healthzNotFound ", 404)
}

func (o *HealthzNotFound) String() string {
	return fmt.Sprintf("[GET /api/backend/healthz][%d] healthzNotFound ", 404)
}

func (o *HealthzNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHealthzRequestTimeout creates a HealthzRequestTimeout with default headers values
func NewHealthzRequestTimeout() *HealthzRequestTimeout {
	return &HealthzRequestTimeout{}
}

/*
HealthzRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type HealthzRequestTimeout struct {
}

// IsSuccess returns true when this healthz request timeout response has a 2xx status code
func (o *HealthzRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this healthz request timeout response has a 3xx status code
func (o *HealthzRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this healthz request timeout response has a 4xx status code
func (o *HealthzRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this healthz request timeout response has a 5xx status code
func (o *HealthzRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this healthz request timeout response a status code equal to that given
func (o *HealthzRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the healthz request timeout response
func (o *HealthzRequestTimeout) Code() int {
	return 408
}

func (o *HealthzRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/backend/healthz][%d] healthzRequestTimeout ", 408)
}

func (o *HealthzRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/backend/healthz][%d] healthzRequestTimeout ", 408)
}

func (o *HealthzRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHealthzUnprocessableEntity creates a HealthzUnprocessableEntity with default headers values
func NewHealthzUnprocessableEntity() *HealthzUnprocessableEntity {
	return &HealthzUnprocessableEntity{}
}

/*
HealthzUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type HealthzUnprocessableEntity struct {
}

// IsSuccess returns true when this healthz unprocessable entity response has a 2xx status code
func (o *HealthzUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this healthz unprocessable entity response has a 3xx status code
func (o *HealthzUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this healthz unprocessable entity response has a 4xx status code
func (o *HealthzUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this healthz unprocessable entity response has a 5xx status code
func (o *HealthzUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this healthz unprocessable entity response a status code equal to that given
func (o *HealthzUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the healthz unprocessable entity response
func (o *HealthzUnprocessableEntity) Code() int {
	return 422
}

func (o *HealthzUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /api/backend/healthz][%d] healthzUnprocessableEntity ", 422)
}

func (o *HealthzUnprocessableEntity) String() string {
	return fmt.Sprintf("[GET /api/backend/healthz][%d] healthzUnprocessableEntity ", 422)
}

func (o *HealthzUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
