// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"terraform-provider-neptune/internal/neptune/models"
)

// GetUserAvatarReader is a Reader for the GetUserAvatar structure.
type GetUserAvatarReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUserAvatarReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUserAvatarOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetUserAvatarBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetUserAvatarUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetUserAvatarForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetUserAvatarNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetUserAvatarRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewGetUserAvatarUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/backend/v1/users/{username}/avatar] getUserAvatar", response, response.Code())
	}
}

// NewGetUserAvatarOK creates a GetUserAvatarOK with default headers values
func NewGetUserAvatarOK() *GetUserAvatarOK {
	return &GetUserAvatarOK{}
}

/*
GetUserAvatarOK describes a response with status code 200, with default header values.

No response
*/
type GetUserAvatarOK struct {
}

// IsSuccess returns true when this get user avatar o k response has a 2xx status code
func (o *GetUserAvatarOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get user avatar o k response has a 3xx status code
func (o *GetUserAvatarOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user avatar o k response has a 4xx status code
func (o *GetUserAvatarOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get user avatar o k response has a 5xx status code
func (o *GetUserAvatarOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get user avatar o k response a status code equal to that given
func (o *GetUserAvatarOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get user avatar o k response
func (o *GetUserAvatarOK) Code() int {
	return 200
}

func (o *GetUserAvatarOK) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/users/{username}/avatar][%d] getUserAvatarOK ", 200)
}

func (o *GetUserAvatarOK) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/users/{username}/avatar][%d] getUserAvatarOK ", 200)
}

func (o *GetUserAvatarOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetUserAvatarBadRequest creates a GetUserAvatarBadRequest with default headers values
func NewGetUserAvatarBadRequest() *GetUserAvatarBadRequest {
	return &GetUserAvatarBadRequest{}
}

/*
GetUserAvatarBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetUserAvatarBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get user avatar bad request response has a 2xx status code
func (o *GetUserAvatarBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user avatar bad request response has a 3xx status code
func (o *GetUserAvatarBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user avatar bad request response has a 4xx status code
func (o *GetUserAvatarBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user avatar bad request response has a 5xx status code
func (o *GetUserAvatarBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get user avatar bad request response a status code equal to that given
func (o *GetUserAvatarBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get user avatar bad request response
func (o *GetUserAvatarBadRequest) Code() int {
	return 400
}

func (o *GetUserAvatarBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/users/{username}/avatar][%d] getUserAvatarBadRequest  %+v", 400, o.Payload)
}

func (o *GetUserAvatarBadRequest) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/users/{username}/avatar][%d] getUserAvatarBadRequest  %+v", 400, o.Payload)
}

func (o *GetUserAvatarBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetUserAvatarBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserAvatarUnauthorized creates a GetUserAvatarUnauthorized with default headers values
func NewGetUserAvatarUnauthorized() *GetUserAvatarUnauthorized {
	return &GetUserAvatarUnauthorized{}
}

/*
GetUserAvatarUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetUserAvatarUnauthorized struct {
}

// IsSuccess returns true when this get user avatar unauthorized response has a 2xx status code
func (o *GetUserAvatarUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user avatar unauthorized response has a 3xx status code
func (o *GetUserAvatarUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user avatar unauthorized response has a 4xx status code
func (o *GetUserAvatarUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user avatar unauthorized response has a 5xx status code
func (o *GetUserAvatarUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get user avatar unauthorized response a status code equal to that given
func (o *GetUserAvatarUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get user avatar unauthorized response
func (o *GetUserAvatarUnauthorized) Code() int {
	return 401
}

func (o *GetUserAvatarUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/users/{username}/avatar][%d] getUserAvatarUnauthorized ", 401)
}

func (o *GetUserAvatarUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/users/{username}/avatar][%d] getUserAvatarUnauthorized ", 401)
}

func (o *GetUserAvatarUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetUserAvatarForbidden creates a GetUserAvatarForbidden with default headers values
func NewGetUserAvatarForbidden() *GetUserAvatarForbidden {
	return &GetUserAvatarForbidden{}
}

/*
GetUserAvatarForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetUserAvatarForbidden struct {
}

// IsSuccess returns true when this get user avatar forbidden response has a 2xx status code
func (o *GetUserAvatarForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user avatar forbidden response has a 3xx status code
func (o *GetUserAvatarForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user avatar forbidden response has a 4xx status code
func (o *GetUserAvatarForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user avatar forbidden response has a 5xx status code
func (o *GetUserAvatarForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get user avatar forbidden response a status code equal to that given
func (o *GetUserAvatarForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get user avatar forbidden response
func (o *GetUserAvatarForbidden) Code() int {
	return 403
}

func (o *GetUserAvatarForbidden) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/users/{username}/avatar][%d] getUserAvatarForbidden ", 403)
}

func (o *GetUserAvatarForbidden) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/users/{username}/avatar][%d] getUserAvatarForbidden ", 403)
}

func (o *GetUserAvatarForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetUserAvatarNotFound creates a GetUserAvatarNotFound with default headers values
func NewGetUserAvatarNotFound() *GetUserAvatarNotFound {
	return &GetUserAvatarNotFound{}
}

/*
GetUserAvatarNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetUserAvatarNotFound struct {
}

// IsSuccess returns true when this get user avatar not found response has a 2xx status code
func (o *GetUserAvatarNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user avatar not found response has a 3xx status code
func (o *GetUserAvatarNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user avatar not found response has a 4xx status code
func (o *GetUserAvatarNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user avatar not found response has a 5xx status code
func (o *GetUserAvatarNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get user avatar not found response a status code equal to that given
func (o *GetUserAvatarNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get user avatar not found response
func (o *GetUserAvatarNotFound) Code() int {
	return 404
}

func (o *GetUserAvatarNotFound) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/users/{username}/avatar][%d] getUserAvatarNotFound ", 404)
}

func (o *GetUserAvatarNotFound) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/users/{username}/avatar][%d] getUserAvatarNotFound ", 404)
}

func (o *GetUserAvatarNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetUserAvatarRequestTimeout creates a GetUserAvatarRequestTimeout with default headers values
func NewGetUserAvatarRequestTimeout() *GetUserAvatarRequestTimeout {
	return &GetUserAvatarRequestTimeout{}
}

/*
GetUserAvatarRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type GetUserAvatarRequestTimeout struct {
}

// IsSuccess returns true when this get user avatar request timeout response has a 2xx status code
func (o *GetUserAvatarRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user avatar request timeout response has a 3xx status code
func (o *GetUserAvatarRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user avatar request timeout response has a 4xx status code
func (o *GetUserAvatarRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user avatar request timeout response has a 5xx status code
func (o *GetUserAvatarRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get user avatar request timeout response a status code equal to that given
func (o *GetUserAvatarRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the get user avatar request timeout response
func (o *GetUserAvatarRequestTimeout) Code() int {
	return 408
}

func (o *GetUserAvatarRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/users/{username}/avatar][%d] getUserAvatarRequestTimeout ", 408)
}

func (o *GetUserAvatarRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/users/{username}/avatar][%d] getUserAvatarRequestTimeout ", 408)
}

func (o *GetUserAvatarRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetUserAvatarUnprocessableEntity creates a GetUserAvatarUnprocessableEntity with default headers values
func NewGetUserAvatarUnprocessableEntity() *GetUserAvatarUnprocessableEntity {
	return &GetUserAvatarUnprocessableEntity{}
}

/*
GetUserAvatarUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type GetUserAvatarUnprocessableEntity struct {
}

// IsSuccess returns true when this get user avatar unprocessable entity response has a 2xx status code
func (o *GetUserAvatarUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user avatar unprocessable entity response has a 3xx status code
func (o *GetUserAvatarUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user avatar unprocessable entity response has a 4xx status code
func (o *GetUserAvatarUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user avatar unprocessable entity response has a 5xx status code
func (o *GetUserAvatarUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this get user avatar unprocessable entity response a status code equal to that given
func (o *GetUserAvatarUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the get user avatar unprocessable entity response
func (o *GetUserAvatarUnprocessableEntity) Code() int {
	return 422
}

func (o *GetUserAvatarUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/users/{username}/avatar][%d] getUserAvatarUnprocessableEntity ", 422)
}

func (o *GetUserAvatarUnprocessableEntity) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/users/{username}/avatar][%d] getUserAvatarUnprocessableEntity ", 422)
}

func (o *GetUserAvatarUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
