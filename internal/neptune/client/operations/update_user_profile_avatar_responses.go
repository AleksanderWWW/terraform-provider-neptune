// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"terraform-provider-neptune/internal/neptune/models"
)

// UpdateUserProfileAvatarReader is a Reader for the UpdateUserProfileAvatar structure.
type UpdateUserProfileAvatarReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateUserProfileAvatarReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateUserProfileAvatarOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateUserProfileAvatarBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateUserProfileAvatarUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateUserProfileAvatarForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateUserProfileAvatarNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewUpdateUserProfileAvatarRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateUserProfileAvatarUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /api/backend/v1/userProfile/avatar] updateUserProfileAvatar", response, response.Code())
	}
}

// NewUpdateUserProfileAvatarOK creates a UpdateUserProfileAvatarOK with default headers values
func NewUpdateUserProfileAvatarOK() *UpdateUserProfileAvatarOK {
	return &UpdateUserProfileAvatarOK{}
}

/*
UpdateUserProfileAvatarOK describes a response with status code 200, with default header values.

OK
*/
type UpdateUserProfileAvatarOK struct {
	Payload *models.LinkDTO
}

// IsSuccess returns true when this update user profile avatar o k response has a 2xx status code
func (o *UpdateUserProfileAvatarOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update user profile avatar o k response has a 3xx status code
func (o *UpdateUserProfileAvatarOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user profile avatar o k response has a 4xx status code
func (o *UpdateUserProfileAvatarOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update user profile avatar o k response has a 5xx status code
func (o *UpdateUserProfileAvatarOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update user profile avatar o k response a status code equal to that given
func (o *UpdateUserProfileAvatarOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update user profile avatar o k response
func (o *UpdateUserProfileAvatarOK) Code() int {
	return 200
}

func (o *UpdateUserProfileAvatarOK) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/userProfile/avatar][%d] updateUserProfileAvatarOK  %+v", 200, o.Payload)
}

func (o *UpdateUserProfileAvatarOK) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/userProfile/avatar][%d] updateUserProfileAvatarOK  %+v", 200, o.Payload)
}

func (o *UpdateUserProfileAvatarOK) GetPayload() *models.LinkDTO {
	return o.Payload
}

func (o *UpdateUserProfileAvatarOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LinkDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserProfileAvatarBadRequest creates a UpdateUserProfileAvatarBadRequest with default headers values
func NewUpdateUserProfileAvatarBadRequest() *UpdateUserProfileAvatarBadRequest {
	return &UpdateUserProfileAvatarBadRequest{}
}

/*
UpdateUserProfileAvatarBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateUserProfileAvatarBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update user profile avatar bad request response has a 2xx status code
func (o *UpdateUserProfileAvatarBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user profile avatar bad request response has a 3xx status code
func (o *UpdateUserProfileAvatarBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user profile avatar bad request response has a 4xx status code
func (o *UpdateUserProfileAvatarBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user profile avatar bad request response has a 5xx status code
func (o *UpdateUserProfileAvatarBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update user profile avatar bad request response a status code equal to that given
func (o *UpdateUserProfileAvatarBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update user profile avatar bad request response
func (o *UpdateUserProfileAvatarBadRequest) Code() int {
	return 400
}

func (o *UpdateUserProfileAvatarBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/userProfile/avatar][%d] updateUserProfileAvatarBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateUserProfileAvatarBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/userProfile/avatar][%d] updateUserProfileAvatarBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateUserProfileAvatarBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateUserProfileAvatarBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserProfileAvatarUnauthorized creates a UpdateUserProfileAvatarUnauthorized with default headers values
func NewUpdateUserProfileAvatarUnauthorized() *UpdateUserProfileAvatarUnauthorized {
	return &UpdateUserProfileAvatarUnauthorized{}
}

/*
UpdateUserProfileAvatarUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateUserProfileAvatarUnauthorized struct {
}

// IsSuccess returns true when this update user profile avatar unauthorized response has a 2xx status code
func (o *UpdateUserProfileAvatarUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user profile avatar unauthorized response has a 3xx status code
func (o *UpdateUserProfileAvatarUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user profile avatar unauthorized response has a 4xx status code
func (o *UpdateUserProfileAvatarUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user profile avatar unauthorized response has a 5xx status code
func (o *UpdateUserProfileAvatarUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update user profile avatar unauthorized response a status code equal to that given
func (o *UpdateUserProfileAvatarUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update user profile avatar unauthorized response
func (o *UpdateUserProfileAvatarUnauthorized) Code() int {
	return 401
}

func (o *UpdateUserProfileAvatarUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/userProfile/avatar][%d] updateUserProfileAvatarUnauthorized ", 401)
}

func (o *UpdateUserProfileAvatarUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/userProfile/avatar][%d] updateUserProfileAvatarUnauthorized ", 401)
}

func (o *UpdateUserProfileAvatarUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateUserProfileAvatarForbidden creates a UpdateUserProfileAvatarForbidden with default headers values
func NewUpdateUserProfileAvatarForbidden() *UpdateUserProfileAvatarForbidden {
	return &UpdateUserProfileAvatarForbidden{}
}

/*
UpdateUserProfileAvatarForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateUserProfileAvatarForbidden struct {
}

// IsSuccess returns true when this update user profile avatar forbidden response has a 2xx status code
func (o *UpdateUserProfileAvatarForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user profile avatar forbidden response has a 3xx status code
func (o *UpdateUserProfileAvatarForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user profile avatar forbidden response has a 4xx status code
func (o *UpdateUserProfileAvatarForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user profile avatar forbidden response has a 5xx status code
func (o *UpdateUserProfileAvatarForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update user profile avatar forbidden response a status code equal to that given
func (o *UpdateUserProfileAvatarForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update user profile avatar forbidden response
func (o *UpdateUserProfileAvatarForbidden) Code() int {
	return 403
}

func (o *UpdateUserProfileAvatarForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/userProfile/avatar][%d] updateUserProfileAvatarForbidden ", 403)
}

func (o *UpdateUserProfileAvatarForbidden) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/userProfile/avatar][%d] updateUserProfileAvatarForbidden ", 403)
}

func (o *UpdateUserProfileAvatarForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateUserProfileAvatarNotFound creates a UpdateUserProfileAvatarNotFound with default headers values
func NewUpdateUserProfileAvatarNotFound() *UpdateUserProfileAvatarNotFound {
	return &UpdateUserProfileAvatarNotFound{}
}

/*
UpdateUserProfileAvatarNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateUserProfileAvatarNotFound struct {
}

// IsSuccess returns true when this update user profile avatar not found response has a 2xx status code
func (o *UpdateUserProfileAvatarNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user profile avatar not found response has a 3xx status code
func (o *UpdateUserProfileAvatarNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user profile avatar not found response has a 4xx status code
func (o *UpdateUserProfileAvatarNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user profile avatar not found response has a 5xx status code
func (o *UpdateUserProfileAvatarNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update user profile avatar not found response a status code equal to that given
func (o *UpdateUserProfileAvatarNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update user profile avatar not found response
func (o *UpdateUserProfileAvatarNotFound) Code() int {
	return 404
}

func (o *UpdateUserProfileAvatarNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/userProfile/avatar][%d] updateUserProfileAvatarNotFound ", 404)
}

func (o *UpdateUserProfileAvatarNotFound) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/userProfile/avatar][%d] updateUserProfileAvatarNotFound ", 404)
}

func (o *UpdateUserProfileAvatarNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateUserProfileAvatarRequestTimeout creates a UpdateUserProfileAvatarRequestTimeout with default headers values
func NewUpdateUserProfileAvatarRequestTimeout() *UpdateUserProfileAvatarRequestTimeout {
	return &UpdateUserProfileAvatarRequestTimeout{}
}

/*
UpdateUserProfileAvatarRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type UpdateUserProfileAvatarRequestTimeout struct {
}

// IsSuccess returns true when this update user profile avatar request timeout response has a 2xx status code
func (o *UpdateUserProfileAvatarRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user profile avatar request timeout response has a 3xx status code
func (o *UpdateUserProfileAvatarRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user profile avatar request timeout response has a 4xx status code
func (o *UpdateUserProfileAvatarRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user profile avatar request timeout response has a 5xx status code
func (o *UpdateUserProfileAvatarRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this update user profile avatar request timeout response a status code equal to that given
func (o *UpdateUserProfileAvatarRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the update user profile avatar request timeout response
func (o *UpdateUserProfileAvatarRequestTimeout) Code() int {
	return 408
}

func (o *UpdateUserProfileAvatarRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/userProfile/avatar][%d] updateUserProfileAvatarRequestTimeout ", 408)
}

func (o *UpdateUserProfileAvatarRequestTimeout) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/userProfile/avatar][%d] updateUserProfileAvatarRequestTimeout ", 408)
}

func (o *UpdateUserProfileAvatarRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateUserProfileAvatarUnprocessableEntity creates a UpdateUserProfileAvatarUnprocessableEntity with default headers values
func NewUpdateUserProfileAvatarUnprocessableEntity() *UpdateUserProfileAvatarUnprocessableEntity {
	return &UpdateUserProfileAvatarUnprocessableEntity{}
}

/*
UpdateUserProfileAvatarUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type UpdateUserProfileAvatarUnprocessableEntity struct {
}

// IsSuccess returns true when this update user profile avatar unprocessable entity response has a 2xx status code
func (o *UpdateUserProfileAvatarUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user profile avatar unprocessable entity response has a 3xx status code
func (o *UpdateUserProfileAvatarUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user profile avatar unprocessable entity response has a 4xx status code
func (o *UpdateUserProfileAvatarUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user profile avatar unprocessable entity response has a 5xx status code
func (o *UpdateUserProfileAvatarUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update user profile avatar unprocessable entity response a status code equal to that given
func (o *UpdateUserProfileAvatarUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update user profile avatar unprocessable entity response
func (o *UpdateUserProfileAvatarUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateUserProfileAvatarUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/userProfile/avatar][%d] updateUserProfileAvatarUnprocessableEntity ", 422)
}

func (o *UpdateUserProfileAvatarUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/userProfile/avatar][%d] updateUserProfileAvatarUnprocessableEntity ", 422)
}

func (o *UpdateUserProfileAvatarUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
