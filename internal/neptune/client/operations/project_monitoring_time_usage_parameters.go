// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewProjectMonitoringTimeUsageParams creates a new ProjectMonitoringTimeUsageParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewProjectMonitoringTimeUsageParams() *ProjectMonitoringTimeUsageParams {
	return &ProjectMonitoringTimeUsageParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewProjectMonitoringTimeUsageParamsWithTimeout creates a new ProjectMonitoringTimeUsageParams object
// with the ability to set a timeout on a request.
func NewProjectMonitoringTimeUsageParamsWithTimeout(timeout time.Duration) *ProjectMonitoringTimeUsageParams {
	return &ProjectMonitoringTimeUsageParams{
		timeout: timeout,
	}
}

// NewProjectMonitoringTimeUsageParamsWithContext creates a new ProjectMonitoringTimeUsageParams object
// with the ability to set a context for a request.
func NewProjectMonitoringTimeUsageParamsWithContext(ctx context.Context) *ProjectMonitoringTimeUsageParams {
	return &ProjectMonitoringTimeUsageParams{
		Context: ctx,
	}
}

// NewProjectMonitoringTimeUsageParamsWithHTTPClient creates a new ProjectMonitoringTimeUsageParams object
// with the ability to set a custom HTTPClient for a request.
func NewProjectMonitoringTimeUsageParamsWithHTTPClient(client *http.Client) *ProjectMonitoringTimeUsageParams {
	return &ProjectMonitoringTimeUsageParams{
		HTTPClient: client,
	}
}

/*
ProjectMonitoringTimeUsageParams contains all the parameters to send to the API endpoint

	for the project monitoring time usage operation.

	Typically these are written to a http.Request.
*/
type ProjectMonitoringTimeUsageParams struct {

	// DateMax.
	//
	// Format: date-time
	DateMax *strfmt.DateTime

	// DateMin.
	//
	// Format: date-time
	DateMin *strfmt.DateTime

	// ProjectIdentifier.
	ProjectIdentifier string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the project monitoring time usage params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ProjectMonitoringTimeUsageParams) WithDefaults() *ProjectMonitoringTimeUsageParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the project monitoring time usage params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ProjectMonitoringTimeUsageParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the project monitoring time usage params
func (o *ProjectMonitoringTimeUsageParams) WithTimeout(timeout time.Duration) *ProjectMonitoringTimeUsageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the project monitoring time usage params
func (o *ProjectMonitoringTimeUsageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the project monitoring time usage params
func (o *ProjectMonitoringTimeUsageParams) WithContext(ctx context.Context) *ProjectMonitoringTimeUsageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the project monitoring time usage params
func (o *ProjectMonitoringTimeUsageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the project monitoring time usage params
func (o *ProjectMonitoringTimeUsageParams) WithHTTPClient(client *http.Client) *ProjectMonitoringTimeUsageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the project monitoring time usage params
func (o *ProjectMonitoringTimeUsageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDateMax adds the dateMax to the project monitoring time usage params
func (o *ProjectMonitoringTimeUsageParams) WithDateMax(dateMax *strfmt.DateTime) *ProjectMonitoringTimeUsageParams {
	o.SetDateMax(dateMax)
	return o
}

// SetDateMax adds the dateMax to the project monitoring time usage params
func (o *ProjectMonitoringTimeUsageParams) SetDateMax(dateMax *strfmt.DateTime) {
	o.DateMax = dateMax
}

// WithDateMin adds the dateMin to the project monitoring time usage params
func (o *ProjectMonitoringTimeUsageParams) WithDateMin(dateMin *strfmt.DateTime) *ProjectMonitoringTimeUsageParams {
	o.SetDateMin(dateMin)
	return o
}

// SetDateMin adds the dateMin to the project monitoring time usage params
func (o *ProjectMonitoringTimeUsageParams) SetDateMin(dateMin *strfmt.DateTime) {
	o.DateMin = dateMin
}

// WithProjectIdentifier adds the projectIdentifier to the project monitoring time usage params
func (o *ProjectMonitoringTimeUsageParams) WithProjectIdentifier(projectIdentifier string) *ProjectMonitoringTimeUsageParams {
	o.SetProjectIdentifier(projectIdentifier)
	return o
}

// SetProjectIdentifier adds the projectIdentifier to the project monitoring time usage params
func (o *ProjectMonitoringTimeUsageParams) SetProjectIdentifier(projectIdentifier string) {
	o.ProjectIdentifier = projectIdentifier
}

// WriteToRequest writes these params to a swagger request
func (o *ProjectMonitoringTimeUsageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DateMax != nil {

		// query param dateMax
		var qrDateMax strfmt.DateTime

		if o.DateMax != nil {
			qrDateMax = *o.DateMax
		}
		qDateMax := qrDateMax.String()
		if qDateMax != "" {

			if err := r.SetQueryParam("dateMax", qDateMax); err != nil {
				return err
			}
		}
	}

	if o.DateMin != nil {

		// query param dateMin
		var qrDateMin strfmt.DateTime

		if o.DateMin != nil {
			qrDateMin = *o.DateMin
		}
		qDateMin := qrDateMin.String()
		if qDateMin != "" {

			if err := r.SetQueryParam("dateMin", qDateMin); err != nil {
				return err
			}
		}
	}

	// query param projectIdentifier
	qrProjectIdentifier := o.ProjectIdentifier
	qProjectIdentifier := qrProjectIdentifier
	if qProjectIdentifier != "" {

		if err := r.SetQueryParam("projectIdentifier", qProjectIdentifier); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
