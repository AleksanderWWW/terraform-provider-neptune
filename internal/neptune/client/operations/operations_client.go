// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AcceptOrganizationInvitation(params *AcceptOrganizationInvitationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptOrganizationInvitationOK, error)

	AcceptProjectInvitation(params *AcceptProjectInvitationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptProjectInvitationOK, error)

	ActivateServiceAccount(params *ActivateServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActivateServiceAccountOK, error)

	AddMonitoringHours(params *AddMonitoringHoursParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddMonitoringHoursOK, error)

	AddOrganizationMember(params *AddOrganizationMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddOrganizationMemberOK, error)

	AddProjectMember(params *AddProjectMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddProjectMemberOK, error)

	AddProjectServiceAccount(params *AddProjectServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddProjectServiceAccountOK, error)

	AddUserProfileLink(params *AddUserProfileLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddUserProfileLinkOK, error)

	Authorize(params *AuthorizeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AuthorizeOK, error)

	CancelSubscription(params *CancelSubscriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelSubscriptionOK, error)

	CancellationSurvey(params *CancellationSurveyParams, opts ...ClientOption) (*CancellationSurveyOK, error)

	ChangePassword(params *ChangePasswordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ChangePasswordOK, error)

	ChangeStorage(params *ChangeStorageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ChangeStorageOK, error)

	ConfigInfoGet(params *ConfigInfoGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ConfigInfoGetOK, error)

	CreateCardUpdateSession(params *CreateCardUpdateSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCardUpdateSessionOK, error)

	CreateCheckoutSession(params *CreateCheckoutSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCheckoutSessionOK, error)

	CreateOrganization(params *CreateOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrganizationOK, error)

	CreateOrganizationInvitations(params *CreateOrganizationInvitationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrganizationInvitationsOK, error)

	CreateProject(params *CreateProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProjectOK, error)

	CreateProjectInvitation(params *CreateProjectInvitationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProjectInvitationOK, error)

	CreateReservation(params *CreateReservationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateReservationOK, error)

	CreateServiceAccount(params *CreateServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateServiceAccountOK, error)

	DeactivateServiceAccount(params *DeactivateServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeactivateServiceAccountOK, error)

	DeleteOrganization(params *DeleteOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationOK, error)

	DeleteOrganizationMember(params *DeleteOrganizationMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationMemberOK, error)

	DeleteProject(params *DeleteProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectOK, error)

	DeleteProjectMember(params *DeleteProjectMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectMemberOK, error)

	DeleteProjectServiceAccount(params *DeleteProjectServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectServiceAccountOK, error)

	DeleteScopedProperty(params *DeleteScopedPropertyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteScopedPropertyOK, error)

	DeleteStorageLimit(params *DeleteStorageLimitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteStorageLimitOK, error)

	DeleteUserProfileLink(params *DeleteUserProfileLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserProfileLinkOK, error)

	DetachCreditCard(params *DetachCreditCardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DetachCreditCardOK, error)

	ExchangeAPIToken(params *ExchangeAPITokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExchangeAPITokenOK, error)

	FeedIntercom(params *FeedIntercomParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FeedIntercomOK, error)

	FilterOrganizations(params *FilterOrganizationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FilterOrganizationsOK, error)

	GenerateProjectKey(params *GenerateProjectKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateProjectKeyOK, error)

	GetAPIToken(params *GetAPITokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPITokenOK, error)

	GetClientConfig(params *GetClientConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClientConfigOK, error)

	GetCreditCard(params *GetCreditCardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCreditCardOK, error)

	GetLoginActions(params *GetLoginActionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLoginActionsOK, error)

	GetOrganization(params *GetOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationOK, error)

	GetOrganizationAvatar(params *GetOrganizationAvatarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationAvatarOK, error)

	GetOrganizationInvitation(params *GetOrganizationInvitationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationInvitationOK, error)

	GetOrganizationLimits(params *GetOrganizationLimitsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationLimitsOK, error)

	GetOrganizationPricing(params *GetOrganizationPricingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationPricingOK, error)

	GetPastInvoices(params *GetPastInvoicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPastInvoicesOK, error)

	GetProject(params *GetProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectOK, error)

	GetProjectAvatar(params *GetProjectAvatarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectAvatarOK, error)

	GetProjectBackground(params *GetProjectBackgroundParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectBackgroundOK, error)

	GetProjectDetails(params *GetProjectDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectDetailsOK, error)

	GetProjectInvitation(params *GetProjectInvitationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectInvitationOK, error)

	GetProjectMetadata(params *GetProjectMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectMetadataOK, error)

	GetScopedProperty(params *GetScopedPropertyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScopedPropertyOK, error)

	GetServiceAccountAPIToken(params *GetServiceAccountAPITokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServiceAccountAPITokenOK, error)

	GetSsoConfig(params *GetSsoConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSsoConfigOK, error)

	GetUpcomingInvoice(params *GetUpcomingInvoiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUpcomingInvoiceOK, error)

	GetUserAvatar(params *GetUserAvatarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserAvatarOK, error)

	GetUserProfile(params *GetUserProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserProfileOK, error)

	GetUserProfileAvatar(params *GetUserProfileAvatarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserProfileAvatarOK, error)

	GlobalConfiguration(params *GlobalConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GlobalConfigurationOK, error)

	Healthz(params *HealthzParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HealthzOK, error)

	IsOrganizationNameAvailable(params *IsOrganizationNameAvailableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IsOrganizationNameAvailableOK, error)

	LeaveProject(params *LeaveProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LeaveProjectOK, error)

	ListInvitations(params *ListInvitationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListInvitationsOK, error)

	ListMembers(params *ListMembersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListMembersOK, error)

	ListOrganizationMembers(params *ListOrganizationMembersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListOrganizationMembersOK, error)

	ListOrganizationProjects(params *ListOrganizationProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListOrganizationProjectsOK, error)

	ListOrganizations(params *ListOrganizationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListOrganizationsOK, error)

	ListOwners(params *ListOwnersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListOwnersOK, error)

	ListProjectMembers(params *ListProjectMembersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProjectMembersOK, error)

	ListProjectServiceAccounts(params *ListProjectServiceAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProjectServiceAccountsOK, error)

	ListProjects(params *ListProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProjectsOK, error)

	ListProjectsMembers(params *ListProjectsMembersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProjectsMembersOK, error)

	ListProjectsMembersPost(params *ListProjectsMembersPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProjectsMembersPostOK, error)

	ListPublicProjects(params *ListPublicProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPublicProjectsOK, error)

	ListScopedProperties(params *ListScopedPropertiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListScopedPropertiesOK, error)

	ListServiceAccounts(params *ListServiceAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListServiceAccountsOK, error)

	ListUserProjects(params *ListUserProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListUserProjectsOK, error)

	ListUsers(params *ListUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListUsersOK, error)

	MonitoringTimePackages(params *MonitoringTimePackagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MonitoringTimePackagesOK, error)

	MonitoringTimeStats(params *MonitoringTimeStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MonitoringTimeStatsOK, error)

	MonitoringTimeStatus(params *MonitoringTimeStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MonitoringTimeStatusOK, error)

	MonitoringTimeTopProjects30Days(params *MonitoringTimeTopProjects30DaysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MonitoringTimeTopProjects30DaysOK, error)

	MonitoringTimeUsage(params *MonitoringTimeUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MonitoringTimeUsageOK, error)

	OrganizationMonitoringTimeUsage(params *OrganizationMonitoringTimeUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OrganizationMonitoringTimeUsageOK, error)

	ProjectMonitoringTimeUsage(params *ProjectMonitoringTimeUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectMonitoringTimeUsageOK, error)

	RequestOnprem(params *RequestOnpremParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RequestOnpremOK, error)

	RequestTeamTrial(params *RequestTeamTrialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RequestTeamTrialOK, error)

	ResendExistingOrganizationInvitation(params *ResendExistingOrganizationInvitationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResendExistingOrganizationInvitationOK, error)

	ResendOrganizationInvitation(params *ResendOrganizationInvitationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResendOrganizationInvitationOK, error)

	ResendProjectInvitation(params *ResendProjectInvitationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResendProjectInvitationOK, error)

	RevokeAPIToken(params *RevokeAPITokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeAPITokenOK, error)

	RevokeOrganizationInvitation(params *RevokeOrganizationInvitationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeOrganizationInvitationOK, error)

	RevokeProjectInvitation(params *RevokeProjectInvitationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeProjectInvitationOK, error)

	RevokeServiceAccountAPIToken(params *RevokeServiceAccountAPITokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeServiceAccountAPITokenOK, error)

	SendRegistrationSurvey(params *SendRegistrationSurveyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SendRegistrationSurveyOK, error)

	SetScopedProperty(params *SetScopedPropertyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetScopedPropertyOK, error)

	SetStorageLimit(params *SetStorageLimitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetStorageLimitOK, error)

	SetUserMetadata(params *SetUserMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetUserMetadataOK, error)

	SetUsername(params *SetUsernameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetUsernameNoContent, error)

	Startup(params *StartupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StartupOK, error)

	StatusGet(params *StatusGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StatusGetOK, error)

	StorageUsage(params *StorageUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StorageUsageOK, error)

	UpdateActiveProjectsQuota(params *UpdateActiveProjectsQuotaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateActiveProjectsQuotaOK, error)

	UpdateLastViewed(params *UpdateLastViewedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateLastViewedOK, error)

	UpdateOrganization(params *UpdateOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationOK, error)

	UpdateOrganizationAvatar(params *UpdateOrganizationAvatarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationAvatarOK, error)

	UpdateOrganizationInvitation(params *UpdateOrganizationInvitationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationInvitationOK, error)

	UpdateOrganizationMember(params *UpdateOrganizationMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationMemberOK, error)

	UpdateProject(params *UpdateProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProjectOK, error)

	UpdateProjectAvatar(params *UpdateProjectAvatarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProjectAvatarOK, error)

	UpdateProjectBackground(params *UpdateProjectBackgroundParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProjectBackgroundOK, error)

	UpdateProjectInvitation(params *UpdateProjectInvitationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProjectInvitationOK, error)

	UpdateProjectMember(params *UpdateProjectMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProjectMemberOK, error)

	UpdateProjectServiceAccount(params *UpdateProjectServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProjectServiceAccountOK, error)

	UpdateUserProfile(params *UpdateUserProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserProfileOK, error)

	UpdateUserProfileAvatar(params *UpdateUserProfileAvatarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserProfileAvatarOK, error)

	UpdateVisibilityRestrictions(params *UpdateVisibilityRestrictionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVisibilityRestrictionsOK, error)

	ValidateUsername(params *ValidateUsernameParams, opts ...ClientOption) (*ValidateUsernameOK, error)

	VerifyProjectKey(params *VerifyProjectKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VerifyProjectKeyOK, error)

	WorkspaceStatus(params *WorkspaceStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*WorkspaceStatusOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AcceptOrganizationInvitation accept organization invitation API
*/
func (a *Client) AcceptOrganizationInvitation(params *AcceptOrganizationInvitationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptOrganizationInvitationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAcceptOrganizationInvitationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "acceptOrganizationInvitation",
		Method:             "POST",
		PathPattern:        "/api/backend/v1/invitations/organization/{invitationId}/accept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AcceptOrganizationInvitationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AcceptOrganizationInvitationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for acceptOrganizationInvitation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AcceptProjectInvitation accept project invitation API
*/
func (a *Client) AcceptProjectInvitation(params *AcceptProjectInvitationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptProjectInvitationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAcceptProjectInvitationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "acceptProjectInvitation",
		Method:             "POST",
		PathPattern:        "/api/backend/v1/invitations/project/{invitationId}/accept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AcceptProjectInvitationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AcceptProjectInvitationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for acceptProjectInvitation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ActivateServiceAccount activate service account API
*/
func (a *Client) ActivateServiceAccount(params *ActivateServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActivateServiceAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActivateServiceAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "activateServiceAccount",
		Method:             "PATCH",
		PathPattern:        "/api/backend/v1/serviceAccounts/activate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ActivateServiceAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActivateServiceAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for activateServiceAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddMonitoringHours add monitoring hours API
*/
func (a *Client) AddMonitoringHours(params *AddMonitoringHoursParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddMonitoringHoursOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddMonitoringHoursParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addMonitoringHours",
		Method:             "POST",
		PathPattern:        "/api/backend/v1/payments/limits/addMonitoringHours",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddMonitoringHoursReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddMonitoringHoursOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addMonitoringHours: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddOrganizationMember add organization member API
*/
func (a *Client) AddOrganizationMember(params *AddOrganizationMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddOrganizationMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddOrganizationMemberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addOrganizationMember",
		Method:             "POST",
		PathPattern:        "/api/backend/v1/organizations2/{organizationIdentifier}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddOrganizationMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddOrganizationMemberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addOrganizationMember: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddProjectMember add project member API
*/
func (a *Client) AddProjectMember(params *AddProjectMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddProjectMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddProjectMemberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addProjectMember",
		Method:             "POST",
		PathPattern:        "/api/backend/v1/projects/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddProjectMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddProjectMemberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addProjectMember: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddProjectServiceAccount add project service account API
*/
func (a *Client) AddProjectServiceAccount(params *AddProjectServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddProjectServiceAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddProjectServiceAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addProjectServiceAccount",
		Method:             "POST",
		PathPattern:        "/api/backend/v1/projects/service_accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddProjectServiceAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddProjectServiceAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addProjectServiceAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddUserProfileLink add user profile link API
*/
func (a *Client) AddUserProfileLink(params *AddUserProfileLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddUserProfileLinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddUserProfileLinkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addUserProfileLink",
		Method:             "POST",
		PathPattern:        "/api/backend/v1/userProfile/links",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddUserProfileLinkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddUserProfileLinkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addUserProfileLink: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Authorize authorize API
*/
func (a *Client) Authorize(params *AuthorizeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AuthorizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthorizeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "authorize",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/authorization/authorize",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AuthorizeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthorizeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authorize: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CancelSubscription cancel subscription API
*/
func (a *Client) CancelSubscription(params *CancelSubscriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelSubscriptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cancelSubscription",
		Method:             "POST",
		PathPattern:        "/api/backend/v1/organizations2/cancelSubscription",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CancelSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelSubscriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cancelSubscription: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CancellationSurvey cancellation survey API
*/
func (a *Client) CancellationSurvey(params *CancellationSurveyParams, opts ...ClientOption) (*CancellationSurveyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancellationSurveyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cancellationSurvey",
		Method:             "POST",
		PathPattern:        "/api/backend/v1/organizations2/cancellationSurvey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CancellationSurveyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancellationSurveyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cancellationSurvey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ChangePassword change password API
*/
func (a *Client) ChangePassword(params *ChangePasswordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ChangePasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangePasswordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "changePassword",
		Method:             "PUT",
		PathPattern:        "/api/backend/v1/userProfile/password",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChangePasswordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangePasswordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for changePassword: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ChangeStorage change storage API
*/
func (a *Client) ChangeStorage(params *ChangeStorageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ChangeStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "changeStorage",
		Method:             "POST",
		PathPattern:        "/api/backend/v1/payments/limits/changeStorage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChangeStorageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for changeStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ConfigInfoGet config info get API
*/
func (a *Client) ConfigInfoGet(params *ConfigInfoGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ConfigInfoGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfigInfoGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "configInfoGet",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/configInfo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConfigInfoGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConfigInfoGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for configInfoGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateCardUpdateSession create card update session API
*/
func (a *Client) CreateCardUpdateSession(params *CreateCardUpdateSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCardUpdateSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCardUpdateSessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createCardUpdateSession",
		Method:             "POST",
		PathPattern:        "/api/backend/v1/payments/{organizationIdentifier}/creditCard",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCardUpdateSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCardUpdateSessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCardUpdateSession: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateCheckoutSession create checkout session API
*/
func (a *Client) CreateCheckoutSession(params *CreateCheckoutSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCheckoutSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCheckoutSessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createCheckoutSession",
		Method:             "POST",
		PathPattern:        "/api/backend/v1/payments/upgrade",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCheckoutSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCheckoutSessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCheckoutSession: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateOrganization create organization API
*/
func (a *Client) CreateOrganization(params *CreateOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrganizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createOrganization",
		Method:             "POST",
		PathPattern:        "/api/backend/v1/organizations2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrganizationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOrganization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateOrganizationInvitations create organization invitations API
*/
func (a *Client) CreateOrganizationInvitations(params *CreateOrganizationInvitationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrganizationInvitationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrganizationInvitationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createOrganizationInvitations",
		Method:             "POST",
		PathPattern:        "/api/backend/v1/invitations/organization",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateOrganizationInvitationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrganizationInvitationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOrganizationInvitations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateProject create project API
*/
func (a *Client) CreateProject(params *CreateProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createProject",
		Method:             "POST",
		PathPattern:        "/api/backend/v1/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateProjectInvitation create project invitation API
*/
func (a *Client) CreateProjectInvitation(params *CreateProjectInvitationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProjectInvitationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProjectInvitationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createProjectInvitation",
		Method:             "POST",
		PathPattern:        "/api/backend/v1/invitations/project",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateProjectInvitationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateProjectInvitationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createProjectInvitation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateReservation create reservation API
*/
func (a *Client) CreateReservation(params *CreateReservationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateReservationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateReservationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createReservation",
		Method:             "POST",
		PathPattern:        "/api/backend/v1/reservations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateReservationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateReservationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createReservation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateServiceAccount create service account API
*/
func (a *Client) CreateServiceAccount(params *CreateServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateServiceAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateServiceAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createServiceAccount",
		Method:             "POST",
		PathPattern:        "/api/backend/v1/serviceAccounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateServiceAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateServiceAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createServiceAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeactivateServiceAccount deactivate service account API
*/
func (a *Client) DeactivateServiceAccount(params *DeactivateServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeactivateServiceAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeactivateServiceAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deactivateServiceAccount",
		Method:             "PATCH",
		PathPattern:        "/api/backend/v1/serviceAccounts/deactivate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeactivateServiceAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeactivateServiceAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deactivateServiceAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteOrganization delete organization API
*/
func (a *Client) DeleteOrganization(params *DeleteOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteOrganization",
		Method:             "DELETE",
		PathPattern:        "/api/backend/v1/organizations2/{organizationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOrganizationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteOrganization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteOrganizationMember delete organization member API
*/
func (a *Client) DeleteOrganizationMember(params *DeleteOrganizationMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationMemberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteOrganizationMember",
		Method:             "DELETE",
		PathPattern:        "/api/backend/v1/organizations2/{organizationIdentifier}/members/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOrganizationMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOrganizationMemberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteOrganizationMember: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteProject delete project API
*/
func (a *Client) DeleteProject(params *DeleteProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteProject",
		Method:             "DELETE",
		PathPattern:        "/api/backend/v1/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteProjectMember delete project member API
*/
func (a *Client) DeleteProjectMember(params *DeleteProjectMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectMemberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteProjectMember",
		Method:             "DELETE",
		PathPattern:        "/api/backend/v1/projects/members/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProjectMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProjectMemberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteProjectMember: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteProjectServiceAccount delete project service account API
*/
func (a *Client) DeleteProjectServiceAccount(params *DeleteProjectServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectServiceAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectServiceAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteProjectServiceAccount",
		Method:             "DELETE",
		PathPattern:        "/api/backend/v1/projects/service_accounts/{serviceAccountId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProjectServiceAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProjectServiceAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteProjectServiceAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteScopedProperty delete scoped property API
*/
func (a *Client) DeleteScopedProperty(params *DeleteScopedPropertyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteScopedPropertyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteScopedPropertyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteScopedProperty",
		Method:             "DELETE",
		PathPattern:        "/api/backend/v1/clients/properties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteScopedPropertyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteScopedPropertyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteScopedProperty: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteStorageLimit delete storage limit API
*/
func (a *Client) DeleteStorageLimit(params *DeleteStorageLimitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteStorageLimitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStorageLimitParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteStorageLimit",
		Method:             "DELETE",
		PathPattern:        "/api/backend/v1/projects/storage-limit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteStorageLimitReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteStorageLimitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteStorageLimit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteUserProfileLink delete user profile link API
*/
func (a *Client) DeleteUserProfileLink(params *DeleteUserProfileLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserProfileLinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserProfileLinkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUserProfileLink",
		Method:             "DELETE",
		PathPattern:        "/api/backend/v1/userProfile/links",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUserProfileLinkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserProfileLinkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUserProfileLink: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DetachCreditCard Detaches credit card
*/
func (a *Client) DetachCreditCard(params *DetachCreditCardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DetachCreditCardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDetachCreditCardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "detachCreditCard",
		Method:             "DELETE",
		PathPattern:        "/api/backend/v1/payments/{organizationIdentifier}/creditCard",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DetachCreditCardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DetachCreditCardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for detachCreditCard: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExchangeAPIToken exchange Api token API
*/
func (a *Client) ExchangeAPIToken(params *ExchangeAPITokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExchangeAPITokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExchangeAPITokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "exchangeApiToken",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/authorization/oauth-token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExchangeAPITokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExchangeAPITokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for exchangeApiToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FeedIntercom feed intercom API
*/
func (a *Client) FeedIntercom(params *FeedIntercomParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FeedIntercomOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFeedIntercomParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "feedIntercom",
		Method:             "POST",
		PathPattern:        "/api/backend/v1/communicationData/submit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FeedIntercomReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FeedIntercomOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for feedIntercom: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FilterOrganizations filter organizations API
*/
func (a *Client) FilterOrganizations(params *FilterOrganizationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FilterOrganizationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFilterOrganizationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "filterOrganizations",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/organizations2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FilterOrganizationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FilterOrganizationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for filterOrganizations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GenerateProjectKey generate project key API
*/
func (a *Client) GenerateProjectKey(params *GenerateProjectKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateProjectKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateProjectKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "generateProjectKey",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/projects/key",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GenerateProjectKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenerateProjectKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for generateProjectKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIToken get Api token API
*/
func (a *Client) GetAPIToken(params *GetAPITokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPITokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPITokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getApiToken",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/authorization/api-token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPITokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPITokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApiToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClientConfig get client config API
*/
func (a *Client) GetClientConfig(params *GetClientConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClientConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClientConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClientConfig",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/clients/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClientConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClientConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClientConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCreditCard Returns a Stripe Source object
*/
func (a *Client) GetCreditCard(params *GetCreditCardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCreditCardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCreditCardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCreditCard",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/payments/{organizationIdentifier}/creditCard",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCreditCardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCreditCardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCreditCard: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLoginActions Returns a list of actions that backend requires the user to complete before he can start working with Neptune
*/
func (a *Client) GetLoginActions(params *GetLoginActionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLoginActionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLoginActionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLoginActions",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/login/actions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLoginActionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLoginActionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLoginActions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOrganization get organization API
*/
func (a *Client) GetOrganization(params *GetOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganization",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/organizations2/{organization}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOrganizationAvatar get organization avatar API
*/
func (a *Client) GetOrganizationAvatar(params *GetOrganizationAvatarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationAvatarOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationAvatarParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationAvatar",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/organizations2/{organizationName}/avatar",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOrganizationAvatarReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationAvatarOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationAvatar: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOrganizationInvitation get organization invitation API
*/
func (a *Client) GetOrganizationInvitation(params *GetOrganizationInvitationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationInvitationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationInvitationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationInvitation",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/invitations/organization/{invitationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOrganizationInvitationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationInvitationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationInvitation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOrganizationLimits get organization limits API
*/
func (a *Client) GetOrganizationLimits(params *GetOrganizationLimitsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationLimitsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationLimitsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationLimits",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/organizations2/{organizationIdentifier}/limits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOrganizationLimitsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationLimitsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationLimits: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOrganizationPricing get organization pricing API
*/
func (a *Client) GetOrganizationPricing(params *GetOrganizationPricingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationPricingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationPricingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationPricing",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/payments/{organizationIdentifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOrganizationPricingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationPricingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationPricing: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPastInvoices Pass-through to Stripe /v1/invoices
*/
func (a *Client) GetPastInvoices(params *GetPastInvoicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPastInvoicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPastInvoicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPastInvoices",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/payments/{organizationIdentifier}/invoices/past",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPastInvoicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPastInvoicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPastInvoices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProject get project API
*/
func (a *Client) GetProject(params *GetProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProject",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/projects/get",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectAvatar get project avatar API
*/
func (a *Client) GetProjectAvatar(params *GetProjectAvatarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectAvatarOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectAvatarParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProjectAvatar",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/organizations/{organizationName}/projects/{projectName}/avatar",
		ProducesMediaTypes: []string{"image/png"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProjectAvatarReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectAvatarOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProjectAvatar: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectBackground get project background API
*/
func (a *Client) GetProjectBackground(params *GetProjectBackgroundParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectBackgroundOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectBackgroundParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProjectBackground",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/organizations/{organizationName}/projects/{projectName}/background",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProjectBackgroundReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectBackgroundOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProjectBackground: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectDetails get project details API
*/
func (a *Client) GetProjectDetails(params *GetProjectDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProjectDetails",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/projects/details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProjectDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProjectDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectInvitation get project invitation API
*/
func (a *Client) GetProjectInvitation(params *GetProjectInvitationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectInvitationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectInvitationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProjectInvitation",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/invitations/project/{invitationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProjectInvitationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectInvitationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProjectInvitation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectMetadata get project metadata API
*/
func (a *Client) GetProjectMetadata(params *GetProjectMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProjectMetadata",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/projects/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProjectMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProjectMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetScopedProperty get scoped property API
*/
func (a *Client) GetScopedProperty(params *GetScopedPropertyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScopedPropertyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScopedPropertyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getScopedProperty",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/clients/properties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetScopedPropertyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScopedPropertyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getScopedProperty: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetServiceAccountAPIToken get service account Api token API
*/
func (a *Client) GetServiceAccountAPIToken(params *GetServiceAccountAPITokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServiceAccountAPITokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceAccountAPITokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getServiceAccountApiToken",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/authorization/serviceAccounts/api-token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServiceAccountAPITokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceAccountAPITokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServiceAccountApiToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSsoConfig get sso config API
*/
func (a *Client) GetSsoConfig(params *GetSsoConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSsoConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSsoConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSsoConfig",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/clients/sso",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSsoConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSsoConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSsoConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUpcomingInvoice Pass-through to Stripe /v1/invoices/upcoming
*/
func (a *Client) GetUpcomingInvoice(params *GetUpcomingInvoiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUpcomingInvoiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUpcomingInvoiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUpcomingInvoice",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/payments/{organizationIdentifier}/invoices/upcoming",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUpcomingInvoiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUpcomingInvoiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUpcomingInvoice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUserAvatar get user avatar API
*/
func (a *Client) GetUserAvatar(params *GetUserAvatarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserAvatarOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserAvatarParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUserAvatar",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/users/{username}/avatar",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserAvatarReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserAvatarOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserAvatar: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUserProfile get user profile API
*/
func (a *Client) GetUserProfile(params *GetUserProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUserProfile",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/userProfile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUserProfileAvatar get user profile avatar API
*/
func (a *Client) GetUserProfileAvatar(params *GetUserProfileAvatarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserProfileAvatarOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserProfileAvatarParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUserProfileAvatar",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/userProfile/avatar",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserProfileAvatarReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserProfileAvatarOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserProfileAvatar: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GlobalConfiguration global configuration API
*/
func (a *Client) GlobalConfiguration(params *GlobalConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GlobalConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGlobalConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "globalConfiguration",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GlobalConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GlobalConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for globalConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Healthz healthz API
*/
func (a *Client) Healthz(params *HealthzParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HealthzOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHealthzParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "healthz",
		Method:             "GET",
		PathPattern:        "/api/backend/healthz",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HealthzReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HealthzOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for healthz: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IsOrganizationNameAvailable is organization name available API
*/
func (a *Client) IsOrganizationNameAvailable(params *IsOrganizationNameAvailableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IsOrganizationNameAvailableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIsOrganizationNameAvailableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "isOrganizationNameAvailable",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/organizations2/{organizationName}/available",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IsOrganizationNameAvailableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IsOrganizationNameAvailableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for isOrganizationNameAvailable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LeaveProject leave project API
*/
func (a *Client) LeaveProject(params *LeaveProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LeaveProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLeaveProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "leaveProject",
		Method:             "POST",
		PathPattern:        "/api/backend/v1/projects/leave",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LeaveProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LeaveProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for leaveProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListInvitations Invitations are sorted from most to least recent.
*/
func (a *Client) ListInvitations(params *ListInvitationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListInvitationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListInvitationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listInvitations",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/invitations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListInvitationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListInvitationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listInvitations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListMembers list members API
*/
func (a *Client) ListMembers(params *ListMembersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListMembersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listMembers",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/projects/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listMembers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListOrganizationMembers list organization members API
*/
func (a *Client) ListOrganizationMembers(params *ListOrganizationMembersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListOrganizationMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListOrganizationMembersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listOrganizationMembers",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/organizations2/{organizationIdentifier}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListOrganizationMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListOrganizationMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listOrganizationMembers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListOrganizationProjects list organization projects API
*/
func (a *Client) ListOrganizationProjects(params *ListOrganizationProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListOrganizationProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListOrganizationProjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listOrganizationProjects",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/projects/listForOrganization",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListOrganizationProjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListOrganizationProjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listOrganizationProjects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListOrganizations list organizations API
*/
func (a *Client) ListOrganizations(params *ListOrganizationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListOrganizationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListOrganizationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listOrganizations",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/myOrganizations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListOrganizationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListOrganizationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listOrganizations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListOwners list owners API
*/
func (a *Client) ListOwners(params *ListOwnersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListOwnersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListOwnersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listOwners",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/organizations2/{organizationIdentifier}/owners",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListOwnersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListOwnersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listOwners: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListProjectMembers list project members API
*/
func (a *Client) ListProjectMembers(params *ListProjectMembersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProjectMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProjectMembersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listProjectMembers",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/projects/membersOf",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListProjectMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListProjectMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listProjectMembers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListProjectServiceAccounts list project service accounts API
*/
func (a *Client) ListProjectServiceAccounts(params *ListProjectServiceAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProjectServiceAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProjectServiceAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listProjectServiceAccounts",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/projects/service_accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListProjectServiceAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListProjectServiceAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listProjectServiceAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListProjects list projects API
*/
func (a *Client) ListProjects(params *ListProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listProjects",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListProjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListProjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listProjects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListProjectsMembers list projects members API
*/
func (a *Client) ListProjectsMembers(params *ListProjectsMembersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProjectsMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProjectsMembersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listProjectsMembers",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/projects/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListProjectsMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListProjectsMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listProjectsMembers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListProjectsMembersPost list projects members post API
*/
func (a *Client) ListProjectsMembersPost(params *ListProjectsMembersPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProjectsMembersPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProjectsMembersPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listProjectsMembersPost",
		Method:             "POST",
		PathPattern:        "/api/backend/v1/projects/membersList",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListProjectsMembersPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListProjectsMembersPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listProjectsMembersPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListPublicProjects list public projects API
*/
func (a *Client) ListPublicProjects(params *ListPublicProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPublicProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPublicProjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listPublicProjects",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/projects/listPublic",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListPublicProjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPublicProjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listPublicProjects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListScopedProperties list scoped properties API
*/
func (a *Client) ListScopedProperties(params *ListScopedPropertiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListScopedPropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListScopedPropertiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listScopedProperties",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/clients/properties/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListScopedPropertiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListScopedPropertiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listScopedProperties: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListServiceAccounts list service accounts API
*/
func (a *Client) ListServiceAccounts(params *ListServiceAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListServiceAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListServiceAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listServiceAccounts",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/serviceAccounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListServiceAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListServiceAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listServiceAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListUserProjects list user projects API
*/
func (a *Client) ListUserProjects(params *ListUserProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListUserProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListUserProjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listUserProjects",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/projects/listForUser",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListUserProjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListUserProjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listUserProjects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListUsers list users API
*/
func (a *Client) ListUsers(params *ListUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listUsers",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MonitoringTimePackages monitoring time packages API
*/
func (a *Client) MonitoringTimePackages(params *MonitoringTimePackagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MonitoringTimePackagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitoringTimePackagesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "monitoringTimePackages",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/resources/packages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MonitoringTimePackagesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitoringTimePackagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for monitoringTimePackages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MonitoringTimeStats monitoring time stats API
*/
func (a *Client) MonitoringTimeStats(params *MonitoringTimeStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MonitoringTimeStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitoringTimeStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "monitoringTimeStats",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/resources/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MonitoringTimeStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitoringTimeStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for monitoringTimeStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MonitoringTimeStatus monitoring time status API
*/
func (a *Client) MonitoringTimeStatus(params *MonitoringTimeStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MonitoringTimeStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitoringTimeStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "monitoringTimeStatus",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/resources/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MonitoringTimeStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitoringTimeStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for monitoringTimeStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MonitoringTimeTopProjects30Days monitoring time top projects30 days API
*/
func (a *Client) MonitoringTimeTopProjects30Days(params *MonitoringTimeTopProjects30DaysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MonitoringTimeTopProjects30DaysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitoringTimeTopProjects30DaysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "monitoringTimeTopProjects30Days",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/resources/topProjects30Days",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MonitoringTimeTopProjects30DaysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitoringTimeTopProjects30DaysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for monitoringTimeTopProjects30Days: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MonitoringTimeUsage monitoring time usage API
*/
func (a *Client) MonitoringTimeUsage(params *MonitoringTimeUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MonitoringTimeUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitoringTimeUsageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "monitoringTimeUsage",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/resources/usage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MonitoringTimeUsageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitoringTimeUsageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for monitoringTimeUsage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OrganizationMonitoringTimeUsage organization monitoring time usage API
*/
func (a *Client) OrganizationMonitoringTimeUsage(params *OrganizationMonitoringTimeUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OrganizationMonitoringTimeUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrganizationMonitoringTimeUsageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "organizationMonitoringTimeUsage",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/resources/organizationUsageHistory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OrganizationMonitoringTimeUsageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrganizationMonitoringTimeUsageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for organizationMonitoringTimeUsage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProjectMonitoringTimeUsage project monitoring time usage API
*/
func (a *Client) ProjectMonitoringTimeUsage(params *ProjectMonitoringTimeUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectMonitoringTimeUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectMonitoringTimeUsageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "projectMonitoringTimeUsage",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/resources/projectUsageHistory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectMonitoringTimeUsageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectMonitoringTimeUsageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for projectMonitoringTimeUsage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RequestOnprem request onprem API
*/
func (a *Client) RequestOnprem(params *RequestOnpremParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RequestOnpremOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRequestOnpremParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "requestOnprem",
		Method:             "POST",
		PathPattern:        "/api/backend/v1/payments/request/onprem",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RequestOnpremReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RequestOnpremOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for requestOnprem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RequestTeamTrial request team trial API
*/
func (a *Client) RequestTeamTrial(params *RequestTeamTrialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RequestTeamTrialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRequestTeamTrialParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "requestTeamTrial",
		Method:             "POST",
		PathPattern:        "/api/backend/v1/payments/request/team-trial",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RequestTeamTrialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RequestTeamTrialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for requestTeamTrial: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResendExistingOrganizationInvitation resend existing organization invitation API
*/
func (a *Client) ResendExistingOrganizationInvitation(params *ResendExistingOrganizationInvitationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResendExistingOrganizationInvitationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResendExistingOrganizationInvitationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resendExistingOrganizationInvitation",
		Method:             "POST",
		PathPattern:        "/api/backend/v1/invitations/organization/{invitationId}/resend",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ResendExistingOrganizationInvitationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResendExistingOrganizationInvitationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resendExistingOrganizationInvitation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResendOrganizationInvitation resend organization invitation API
*/
func (a *Client) ResendOrganizationInvitation(params *ResendOrganizationInvitationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResendOrganizationInvitationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResendOrganizationInvitationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resendOrganizationInvitation",
		Method:             "POST",
		PathPattern:        "/api/backend/v1/invitations/organization/resend",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ResendOrganizationInvitationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResendOrganizationInvitationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resendOrganizationInvitation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResendProjectInvitation resend project invitation API
*/
func (a *Client) ResendProjectInvitation(params *ResendProjectInvitationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResendProjectInvitationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResendProjectInvitationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resendProjectInvitation",
		Method:             "POST",
		PathPattern:        "/api/backend/v1/invitations/project/resend",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ResendProjectInvitationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResendProjectInvitationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resendProjectInvitation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RevokeAPIToken revoke Api token API
*/
func (a *Client) RevokeAPIToken(params *RevokeAPITokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeAPITokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeAPITokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeApiToken",
		Method:             "DELETE",
		PathPattern:        "/api/backend/v1/authorization/api-token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RevokeAPITokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeAPITokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeApiToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RevokeOrganizationInvitation revoke organization invitation API
*/
func (a *Client) RevokeOrganizationInvitation(params *RevokeOrganizationInvitationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeOrganizationInvitationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeOrganizationInvitationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeOrganizationInvitation",
		Method:             "DELETE",
		PathPattern:        "/api/backend/v1/invitations/organization/{invitationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RevokeOrganizationInvitationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeOrganizationInvitationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeOrganizationInvitation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RevokeProjectInvitation revoke project invitation API
*/
func (a *Client) RevokeProjectInvitation(params *RevokeProjectInvitationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeProjectInvitationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeProjectInvitationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeProjectInvitation",
		Method:             "DELETE",
		PathPattern:        "/api/backend/v1/invitations/project/{invitationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RevokeProjectInvitationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeProjectInvitationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeProjectInvitation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RevokeServiceAccountAPIToken revoke service account Api token API
*/
func (a *Client) RevokeServiceAccountAPIToken(params *RevokeServiceAccountAPITokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeServiceAccountAPITokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeServiceAccountAPITokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeServiceAccountApiToken",
		Method:             "DELETE",
		PathPattern:        "/api/backend/v1/authorization/serviceAccounts/api-token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RevokeServiceAccountAPITokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeServiceAccountAPITokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeServiceAccountApiToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SendRegistrationSurvey Processes the survey. Sending {} means that user declined survey and action is removed
*/
func (a *Client) SendRegistrationSurvey(params *SendRegistrationSurveyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SendRegistrationSurveyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSendRegistrationSurveyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "sendRegistrationSurvey",
		Method:             "POST",
		PathPattern:        "/api/backend/v1/login/survey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SendRegistrationSurveyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SendRegistrationSurveyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sendRegistrationSurvey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SetScopedProperty set scoped property API
*/
func (a *Client) SetScopedProperty(params *SetScopedPropertyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetScopedPropertyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetScopedPropertyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setScopedProperty",
		Method:             "POST",
		PathPattern:        "/api/backend/v1/clients/properties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetScopedPropertyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetScopedPropertyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setScopedProperty: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SetStorageLimit set storage limit API
*/
func (a *Client) SetStorageLimit(params *SetStorageLimitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetStorageLimitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetStorageLimitParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setStorageLimit",
		Method:             "PUT",
		PathPattern:        "/api/backend/v1/projects/storage-limit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetStorageLimitReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetStorageLimitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setStorageLimit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SetUserMetadata Sets the user matadata
*/
func (a *Client) SetUserMetadata(params *SetUserMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetUserMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetUserMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setUserMetadata",
		Method:             "POST",
		PathPattern:        "/api/backend/v1/login/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetUserMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetUserMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setUserMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	SetUsername

Sets the username as per param.
Can be called once, subsequent calls will result in 403 error.
Setting to an invalid username will result in 400 error.
Setting to an unavailable username will result in 409 error.
*/
func (a *Client) SetUsername(params *SetUsernameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetUsernameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetUsernameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setUsername",
		Method:             "POST",
		PathPattern:        "/api/backend/v1/login/username",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetUsernameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetUsernameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setUsername: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Startup startup API
*/
func (a *Client) Startup(params *StartupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StartupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "startup",
		Method:             "GET",
		PathPattern:        "/api/backend/startup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StartupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for startup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StatusGet status get API
*/
func (a *Client) StatusGet(params *StatusGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StatusGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStatusGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "statusGet",
		Method:             "GET",
		PathPattern:        "/api/backend/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StatusGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StatusGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for statusGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StorageUsage storage usage API
*/
func (a *Client) StorageUsage(params *StorageUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StorageUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageUsageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "storageUsage",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/storage/usage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StorageUsageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageUsageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for storageUsage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateActiveProjectsQuota update active projects quota API
*/
func (a *Client) UpdateActiveProjectsQuota(params *UpdateActiveProjectsQuotaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateActiveProjectsQuotaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateActiveProjectsQuotaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateActiveProjectsQuota",
		Method:             "POST",
		PathPattern:        "/api/backend/v1/organizations2/{organizationIdentifier}/activeProjectsQuota",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateActiveProjectsQuotaReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateActiveProjectsQuotaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateActiveProjectsQuota: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateLastViewed update last viewed API
*/
func (a *Client) UpdateLastViewed(params *UpdateLastViewedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateLastViewedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLastViewedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateLastViewed",
		Method:             "POST",
		PathPattern:        "/api/backend/v1/projects/updateLastViewed",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateLastViewedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateLastViewedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateLastViewed: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateOrganization update organization API
*/
func (a *Client) UpdateOrganization(params *UpdateOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOrganization",
		Method:             "PUT",
		PathPattern:        "/api/backend/v1/organizations2/{organizationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateOrganizationAvatar update organization avatar API
*/
func (a *Client) UpdateOrganizationAvatar(params *UpdateOrganizationAvatarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationAvatarOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationAvatarParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOrganizationAvatar",
		Method:             "PUT",
		PathPattern:        "/api/backend/v1/organizations2/{organizationId}/avatar",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateOrganizationAvatarReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationAvatarOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganizationAvatar: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateOrganizationInvitation update organization invitation API
*/
func (a *Client) UpdateOrganizationInvitation(params *UpdateOrganizationInvitationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationInvitationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationInvitationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOrganizationInvitation",
		Method:             "PUT",
		PathPattern:        "/api/backend/v1/invitations/organization/{invitationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateOrganizationInvitationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationInvitationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganizationInvitation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateOrganizationMember update organization member API
*/
func (a *Client) UpdateOrganizationMember(params *UpdateOrganizationMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationMemberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOrganizationMember",
		Method:             "PATCH",
		PathPattern:        "/api/backend/v1/organizations2/{organizationIdentifier}/members/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateOrganizationMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationMemberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganizationMember: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateProject update project API
*/
func (a *Client) UpdateProject(params *UpdateProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateProject",
		Method:             "PUT",
		PathPattern:        "/api/backend/v1/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateProjectAvatar update project avatar API
*/
func (a *Client) UpdateProjectAvatar(params *UpdateProjectAvatarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProjectAvatarOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProjectAvatarParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateProjectAvatar",
		Method:             "PUT",
		PathPattern:        "/api/backend/v1/projects1/{projectId}/avatar",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateProjectAvatarReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProjectAvatarOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateProjectAvatar: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateProjectBackground update project background API
*/
func (a *Client) UpdateProjectBackground(params *UpdateProjectBackgroundParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProjectBackgroundOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProjectBackgroundParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateProjectBackground",
		Method:             "PUT",
		PathPattern:        "/api/backend/v1/projects1/{projectId}/background",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateProjectBackgroundReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProjectBackgroundOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateProjectBackground: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateProjectInvitation update project invitation API
*/
func (a *Client) UpdateProjectInvitation(params *UpdateProjectInvitationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProjectInvitationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProjectInvitationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateProjectInvitation",
		Method:             "PUT",
		PathPattern:        "/api/backend/v1/invitations/project/{invitationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateProjectInvitationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProjectInvitationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateProjectInvitation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateProjectMember update project member API
*/
func (a *Client) UpdateProjectMember(params *UpdateProjectMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProjectMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProjectMemberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateProjectMember",
		Method:             "PATCH",
		PathPattern:        "/api/backend/v1/projects/members/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateProjectMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProjectMemberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateProjectMember: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateProjectServiceAccount update project service account API
*/
func (a *Client) UpdateProjectServiceAccount(params *UpdateProjectServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProjectServiceAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProjectServiceAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateProjectServiceAccount",
		Method:             "PATCH",
		PathPattern:        "/api/backend/v1/projects/service_accounts/{serviceAccountId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateProjectServiceAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProjectServiceAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateProjectServiceAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateUserProfile update user profile API
*/
func (a *Client) UpdateUserProfile(params *UpdateUserProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateUserProfile",
		Method:             "PATCH",
		PathPattern:        "/api/backend/v1/userProfile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateUserProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUserProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUserProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateUserProfileAvatar update user profile avatar API
*/
func (a *Client) UpdateUserProfileAvatar(params *UpdateUserProfileAvatarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserProfileAvatarOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserProfileAvatarParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateUserProfileAvatar",
		Method:             "PUT",
		PathPattern:        "/api/backend/v1/userProfile/avatar",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateUserProfileAvatarReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUserProfileAvatarOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUserProfileAvatar: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateVisibilityRestrictions update visibility restrictions API
*/
func (a *Client) UpdateVisibilityRestrictions(params *UpdateVisibilityRestrictionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVisibilityRestrictionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVisibilityRestrictionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateVisibilityRestrictions",
		Method:             "POST",
		PathPattern:        "/api/backend/v1/organizations2/{organizationIdentifier}/updateVisibilityRestrictions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateVisibilityRestrictionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVisibilityRestrictionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateVisibilityRestrictions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateUsername validate username API
*/
func (a *Client) ValidateUsername(params *ValidateUsernameParams, opts ...ClientOption) (*ValidateUsernameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateUsernameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateUsername",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/login/username/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidateUsernameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateUsernameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateUsername: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VerifyProjectKey verify project key API
*/
func (a *Client) VerifyProjectKey(params *VerifyProjectKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VerifyProjectKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVerifyProjectKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "verifyProjectKey",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/projects/verify-project-key",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VerifyProjectKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VerifyProjectKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for verifyProjectKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
WorkspaceStatus workspace status API
*/
func (a *Client) WorkspaceStatus(params *WorkspaceStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*WorkspaceStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkspaceStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "workspaceStatus",
		Method:             "GET",
		PathPattern:        "/api/backend/v1/payments/{organizationIdentifier}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WorkspaceStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkspaceStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for workspaceStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
