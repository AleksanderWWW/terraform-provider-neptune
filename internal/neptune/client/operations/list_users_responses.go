// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"terraform-provider-neptune/internal/neptune/models"
)

// ListUsersReader is a Reader for the ListUsers structure.
type ListUsersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListUsersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListUsersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListUsersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListUsersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListUsersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListUsersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewListUsersRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewListUsersUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/backend/v1/users] listUsers", response, response.Code())
	}
}

// NewListUsersOK creates a ListUsersOK with default headers values
func NewListUsersOK() *ListUsersOK {
	return &ListUsersOK{}
}

/*
ListUsersOK describes a response with status code 200, with default header values.

OK
*/
type ListUsersOK struct {
	Payload []*models.PublicUserProfileDTO
}

// IsSuccess returns true when this list users o k response has a 2xx status code
func (o *ListUsersOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list users o k response has a 3xx status code
func (o *ListUsersOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list users o k response has a 4xx status code
func (o *ListUsersOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list users o k response has a 5xx status code
func (o *ListUsersOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list users o k response a status code equal to that given
func (o *ListUsersOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list users o k response
func (o *ListUsersOK) Code() int {
	return 200
}

func (o *ListUsersOK) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/users][%d] listUsersOK  %+v", 200, o.Payload)
}

func (o *ListUsersOK) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/users][%d] listUsersOK  %+v", 200, o.Payload)
}

func (o *ListUsersOK) GetPayload() []*models.PublicUserProfileDTO {
	return o.Payload
}

func (o *ListUsersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUsersBadRequest creates a ListUsersBadRequest with default headers values
func NewListUsersBadRequest() *ListUsersBadRequest {
	return &ListUsersBadRequest{}
}

/*
ListUsersBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ListUsersBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this list users bad request response has a 2xx status code
func (o *ListUsersBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list users bad request response has a 3xx status code
func (o *ListUsersBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list users bad request response has a 4xx status code
func (o *ListUsersBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list users bad request response has a 5xx status code
func (o *ListUsersBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list users bad request response a status code equal to that given
func (o *ListUsersBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the list users bad request response
func (o *ListUsersBadRequest) Code() int {
	return 400
}

func (o *ListUsersBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/users][%d] listUsersBadRequest  %+v", 400, o.Payload)
}

func (o *ListUsersBadRequest) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/users][%d] listUsersBadRequest  %+v", 400, o.Payload)
}

func (o *ListUsersBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListUsersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUsersUnauthorized creates a ListUsersUnauthorized with default headers values
func NewListUsersUnauthorized() *ListUsersUnauthorized {
	return &ListUsersUnauthorized{}
}

/*
ListUsersUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ListUsersUnauthorized struct {
}

// IsSuccess returns true when this list users unauthorized response has a 2xx status code
func (o *ListUsersUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list users unauthorized response has a 3xx status code
func (o *ListUsersUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list users unauthorized response has a 4xx status code
func (o *ListUsersUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list users unauthorized response has a 5xx status code
func (o *ListUsersUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list users unauthorized response a status code equal to that given
func (o *ListUsersUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list users unauthorized response
func (o *ListUsersUnauthorized) Code() int {
	return 401
}

func (o *ListUsersUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/users][%d] listUsersUnauthorized ", 401)
}

func (o *ListUsersUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/users][%d] listUsersUnauthorized ", 401)
}

func (o *ListUsersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListUsersForbidden creates a ListUsersForbidden with default headers values
func NewListUsersForbidden() *ListUsersForbidden {
	return &ListUsersForbidden{}
}

/*
ListUsersForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ListUsersForbidden struct {
}

// IsSuccess returns true when this list users forbidden response has a 2xx status code
func (o *ListUsersForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list users forbidden response has a 3xx status code
func (o *ListUsersForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list users forbidden response has a 4xx status code
func (o *ListUsersForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list users forbidden response has a 5xx status code
func (o *ListUsersForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list users forbidden response a status code equal to that given
func (o *ListUsersForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list users forbidden response
func (o *ListUsersForbidden) Code() int {
	return 403
}

func (o *ListUsersForbidden) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/users][%d] listUsersForbidden ", 403)
}

func (o *ListUsersForbidden) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/users][%d] listUsersForbidden ", 403)
}

func (o *ListUsersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListUsersNotFound creates a ListUsersNotFound with default headers values
func NewListUsersNotFound() *ListUsersNotFound {
	return &ListUsersNotFound{}
}

/*
ListUsersNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ListUsersNotFound struct {
}

// IsSuccess returns true when this list users not found response has a 2xx status code
func (o *ListUsersNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list users not found response has a 3xx status code
func (o *ListUsersNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list users not found response has a 4xx status code
func (o *ListUsersNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list users not found response has a 5xx status code
func (o *ListUsersNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list users not found response a status code equal to that given
func (o *ListUsersNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list users not found response
func (o *ListUsersNotFound) Code() int {
	return 404
}

func (o *ListUsersNotFound) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/users][%d] listUsersNotFound ", 404)
}

func (o *ListUsersNotFound) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/users][%d] listUsersNotFound ", 404)
}

func (o *ListUsersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListUsersRequestTimeout creates a ListUsersRequestTimeout with default headers values
func NewListUsersRequestTimeout() *ListUsersRequestTimeout {
	return &ListUsersRequestTimeout{}
}

/*
ListUsersRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type ListUsersRequestTimeout struct {
}

// IsSuccess returns true when this list users request timeout response has a 2xx status code
func (o *ListUsersRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list users request timeout response has a 3xx status code
func (o *ListUsersRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list users request timeout response has a 4xx status code
func (o *ListUsersRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this list users request timeout response has a 5xx status code
func (o *ListUsersRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this list users request timeout response a status code equal to that given
func (o *ListUsersRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the list users request timeout response
func (o *ListUsersRequestTimeout) Code() int {
	return 408
}

func (o *ListUsersRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/users][%d] listUsersRequestTimeout ", 408)
}

func (o *ListUsersRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/users][%d] listUsersRequestTimeout ", 408)
}

func (o *ListUsersRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListUsersUnprocessableEntity creates a ListUsersUnprocessableEntity with default headers values
func NewListUsersUnprocessableEntity() *ListUsersUnprocessableEntity {
	return &ListUsersUnprocessableEntity{}
}

/*
ListUsersUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type ListUsersUnprocessableEntity struct {
}

// IsSuccess returns true when this list users unprocessable entity response has a 2xx status code
func (o *ListUsersUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list users unprocessable entity response has a 3xx status code
func (o *ListUsersUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list users unprocessable entity response has a 4xx status code
func (o *ListUsersUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this list users unprocessable entity response has a 5xx status code
func (o *ListUsersUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this list users unprocessable entity response a status code equal to that given
func (o *ListUsersUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the list users unprocessable entity response
func (o *ListUsersUnprocessableEntity) Code() int {
	return 422
}

func (o *ListUsersUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/users][%d] listUsersUnprocessableEntity ", 422)
}

func (o *ListUsersUnprocessableEntity) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/users][%d] listUsersUnprocessableEntity ", 422)
}

func (o *ListUsersUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
