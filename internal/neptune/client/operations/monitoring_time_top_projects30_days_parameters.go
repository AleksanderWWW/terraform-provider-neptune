// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewMonitoringTimeTopProjects30DaysParams creates a new MonitoringTimeTopProjects30DaysParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewMonitoringTimeTopProjects30DaysParams() *MonitoringTimeTopProjects30DaysParams {
	return &MonitoringTimeTopProjects30DaysParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewMonitoringTimeTopProjects30DaysParamsWithTimeout creates a new MonitoringTimeTopProjects30DaysParams object
// with the ability to set a timeout on a request.
func NewMonitoringTimeTopProjects30DaysParamsWithTimeout(timeout time.Duration) *MonitoringTimeTopProjects30DaysParams {
	return &MonitoringTimeTopProjects30DaysParams{
		timeout: timeout,
	}
}

// NewMonitoringTimeTopProjects30DaysParamsWithContext creates a new MonitoringTimeTopProjects30DaysParams object
// with the ability to set a context for a request.
func NewMonitoringTimeTopProjects30DaysParamsWithContext(ctx context.Context) *MonitoringTimeTopProjects30DaysParams {
	return &MonitoringTimeTopProjects30DaysParams{
		Context: ctx,
	}
}

// NewMonitoringTimeTopProjects30DaysParamsWithHTTPClient creates a new MonitoringTimeTopProjects30DaysParams object
// with the ability to set a custom HTTPClient for a request.
func NewMonitoringTimeTopProjects30DaysParamsWithHTTPClient(client *http.Client) *MonitoringTimeTopProjects30DaysParams {
	return &MonitoringTimeTopProjects30DaysParams{
		HTTPClient: client,
	}
}

/*
MonitoringTimeTopProjects30DaysParams contains all the parameters to send to the API endpoint

	for the monitoring time top projects30 days operation.

	Typically these are written to a http.Request.
*/
type MonitoringTimeTopProjects30DaysParams struct {

	// OrganizationIdentifier.
	OrganizationIdentifier string

	// SortBy.
	SortBy string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the monitoring time top projects30 days params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *MonitoringTimeTopProjects30DaysParams) WithDefaults() *MonitoringTimeTopProjects30DaysParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the monitoring time top projects30 days params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *MonitoringTimeTopProjects30DaysParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the monitoring time top projects30 days params
func (o *MonitoringTimeTopProjects30DaysParams) WithTimeout(timeout time.Duration) *MonitoringTimeTopProjects30DaysParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the monitoring time top projects30 days params
func (o *MonitoringTimeTopProjects30DaysParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the monitoring time top projects30 days params
func (o *MonitoringTimeTopProjects30DaysParams) WithContext(ctx context.Context) *MonitoringTimeTopProjects30DaysParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the monitoring time top projects30 days params
func (o *MonitoringTimeTopProjects30DaysParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the monitoring time top projects30 days params
func (o *MonitoringTimeTopProjects30DaysParams) WithHTTPClient(client *http.Client) *MonitoringTimeTopProjects30DaysParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the monitoring time top projects30 days params
func (o *MonitoringTimeTopProjects30DaysParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOrganizationIdentifier adds the organizationIdentifier to the monitoring time top projects30 days params
func (o *MonitoringTimeTopProjects30DaysParams) WithOrganizationIdentifier(organizationIdentifier string) *MonitoringTimeTopProjects30DaysParams {
	o.SetOrganizationIdentifier(organizationIdentifier)
	return o
}

// SetOrganizationIdentifier adds the organizationIdentifier to the monitoring time top projects30 days params
func (o *MonitoringTimeTopProjects30DaysParams) SetOrganizationIdentifier(organizationIdentifier string) {
	o.OrganizationIdentifier = organizationIdentifier
}

// WithSortBy adds the sortBy to the monitoring time top projects30 days params
func (o *MonitoringTimeTopProjects30DaysParams) WithSortBy(sortBy string) *MonitoringTimeTopProjects30DaysParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the monitoring time top projects30 days params
func (o *MonitoringTimeTopProjects30DaysParams) SetSortBy(sortBy string) {
	o.SortBy = sortBy
}

// WriteToRequest writes these params to a swagger request
func (o *MonitoringTimeTopProjects30DaysParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param organizationIdentifier
	qrOrganizationIdentifier := o.OrganizationIdentifier
	qOrganizationIdentifier := qrOrganizationIdentifier
	if qOrganizationIdentifier != "" {

		if err := r.SetQueryParam("organizationIdentifier", qOrganizationIdentifier); err != nil {
			return err
		}
	}

	// query param sortBy
	qrSortBy := o.SortBy
	qSortBy := qrSortBy
	if qSortBy != "" {

		if err := r.SetQueryParam("sortBy", qSortBy); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
