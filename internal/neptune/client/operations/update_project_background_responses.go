// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// UpdateProjectBackgroundReader is a Reader for the UpdateProjectBackground structure.
type UpdateProjectBackgroundReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateProjectBackgroundReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateProjectBackgroundOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateProjectBackgroundBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateProjectBackgroundUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateProjectBackgroundForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateProjectBackgroundNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewUpdateProjectBackgroundRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateProjectBackgroundUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /api/backend/v1/projects1/{projectId}/background] updateProjectBackground", response, response.Code())
	}
}

// NewUpdateProjectBackgroundOK creates a UpdateProjectBackgroundOK with default headers values
func NewUpdateProjectBackgroundOK() *UpdateProjectBackgroundOK {
	return &UpdateProjectBackgroundOK{}
}

/*
UpdateProjectBackgroundOK describes a response with status code 200, with default header values.

OK
*/
type UpdateProjectBackgroundOK struct {
	Payload *models.Link
}

// IsSuccess returns true when this update project background o k response has a 2xx status code
func (o *UpdateProjectBackgroundOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update project background o k response has a 3xx status code
func (o *UpdateProjectBackgroundOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project background o k response has a 4xx status code
func (o *UpdateProjectBackgroundOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update project background o k response has a 5xx status code
func (o *UpdateProjectBackgroundOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update project background o k response a status code equal to that given
func (o *UpdateProjectBackgroundOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update project background o k response
func (o *UpdateProjectBackgroundOK) Code() int {
	return 200
}

func (o *UpdateProjectBackgroundOK) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects1/{projectId}/background][%d] updateProjectBackgroundOK  %+v", 200, o.Payload)
}

func (o *UpdateProjectBackgroundOK) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects1/{projectId}/background][%d] updateProjectBackgroundOK  %+v", 200, o.Payload)
}

func (o *UpdateProjectBackgroundOK) GetPayload() *models.Link {
	return o.Payload
}

func (o *UpdateProjectBackgroundOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Link)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateProjectBackgroundBadRequest creates a UpdateProjectBackgroundBadRequest with default headers values
func NewUpdateProjectBackgroundBadRequest() *UpdateProjectBackgroundBadRequest {
	return &UpdateProjectBackgroundBadRequest{}
}

/*
UpdateProjectBackgroundBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateProjectBackgroundBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update project background bad request response has a 2xx status code
func (o *UpdateProjectBackgroundBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project background bad request response has a 3xx status code
func (o *UpdateProjectBackgroundBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project background bad request response has a 4xx status code
func (o *UpdateProjectBackgroundBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project background bad request response has a 5xx status code
func (o *UpdateProjectBackgroundBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update project background bad request response a status code equal to that given
func (o *UpdateProjectBackgroundBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update project background bad request response
func (o *UpdateProjectBackgroundBadRequest) Code() int {
	return 400
}

func (o *UpdateProjectBackgroundBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects1/{projectId}/background][%d] updateProjectBackgroundBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateProjectBackgroundBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects1/{projectId}/background][%d] updateProjectBackgroundBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateProjectBackgroundBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateProjectBackgroundBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateProjectBackgroundUnauthorized creates a UpdateProjectBackgroundUnauthorized with default headers values
func NewUpdateProjectBackgroundUnauthorized() *UpdateProjectBackgroundUnauthorized {
	return &UpdateProjectBackgroundUnauthorized{}
}

/*
UpdateProjectBackgroundUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateProjectBackgroundUnauthorized struct {
}

// IsSuccess returns true when this update project background unauthorized response has a 2xx status code
func (o *UpdateProjectBackgroundUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project background unauthorized response has a 3xx status code
func (o *UpdateProjectBackgroundUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project background unauthorized response has a 4xx status code
func (o *UpdateProjectBackgroundUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project background unauthorized response has a 5xx status code
func (o *UpdateProjectBackgroundUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update project background unauthorized response a status code equal to that given
func (o *UpdateProjectBackgroundUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update project background unauthorized response
func (o *UpdateProjectBackgroundUnauthorized) Code() int {
	return 401
}

func (o *UpdateProjectBackgroundUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects1/{projectId}/background][%d] updateProjectBackgroundUnauthorized ", 401)
}

func (o *UpdateProjectBackgroundUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects1/{projectId}/background][%d] updateProjectBackgroundUnauthorized ", 401)
}

func (o *UpdateProjectBackgroundUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectBackgroundForbidden creates a UpdateProjectBackgroundForbidden with default headers values
func NewUpdateProjectBackgroundForbidden() *UpdateProjectBackgroundForbidden {
	return &UpdateProjectBackgroundForbidden{}
}

/*
UpdateProjectBackgroundForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateProjectBackgroundForbidden struct {
}

// IsSuccess returns true when this update project background forbidden response has a 2xx status code
func (o *UpdateProjectBackgroundForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project background forbidden response has a 3xx status code
func (o *UpdateProjectBackgroundForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project background forbidden response has a 4xx status code
func (o *UpdateProjectBackgroundForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project background forbidden response has a 5xx status code
func (o *UpdateProjectBackgroundForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update project background forbidden response a status code equal to that given
func (o *UpdateProjectBackgroundForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update project background forbidden response
func (o *UpdateProjectBackgroundForbidden) Code() int {
	return 403
}

func (o *UpdateProjectBackgroundForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects1/{projectId}/background][%d] updateProjectBackgroundForbidden ", 403)
}

func (o *UpdateProjectBackgroundForbidden) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects1/{projectId}/background][%d] updateProjectBackgroundForbidden ", 403)
}

func (o *UpdateProjectBackgroundForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectBackgroundNotFound creates a UpdateProjectBackgroundNotFound with default headers values
func NewUpdateProjectBackgroundNotFound() *UpdateProjectBackgroundNotFound {
	return &UpdateProjectBackgroundNotFound{}
}

/*
UpdateProjectBackgroundNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateProjectBackgroundNotFound struct {
}

// IsSuccess returns true when this update project background not found response has a 2xx status code
func (o *UpdateProjectBackgroundNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project background not found response has a 3xx status code
func (o *UpdateProjectBackgroundNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project background not found response has a 4xx status code
func (o *UpdateProjectBackgroundNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project background not found response has a 5xx status code
func (o *UpdateProjectBackgroundNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update project background not found response a status code equal to that given
func (o *UpdateProjectBackgroundNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update project background not found response
func (o *UpdateProjectBackgroundNotFound) Code() int {
	return 404
}

func (o *UpdateProjectBackgroundNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects1/{projectId}/background][%d] updateProjectBackgroundNotFound ", 404)
}

func (o *UpdateProjectBackgroundNotFound) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects1/{projectId}/background][%d] updateProjectBackgroundNotFound ", 404)
}

func (o *UpdateProjectBackgroundNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectBackgroundRequestTimeout creates a UpdateProjectBackgroundRequestTimeout with default headers values
func NewUpdateProjectBackgroundRequestTimeout() *UpdateProjectBackgroundRequestTimeout {
	return &UpdateProjectBackgroundRequestTimeout{}
}

/*
UpdateProjectBackgroundRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type UpdateProjectBackgroundRequestTimeout struct {
}

// IsSuccess returns true when this update project background request timeout response has a 2xx status code
func (o *UpdateProjectBackgroundRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project background request timeout response has a 3xx status code
func (o *UpdateProjectBackgroundRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project background request timeout response has a 4xx status code
func (o *UpdateProjectBackgroundRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project background request timeout response has a 5xx status code
func (o *UpdateProjectBackgroundRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this update project background request timeout response a status code equal to that given
func (o *UpdateProjectBackgroundRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the update project background request timeout response
func (o *UpdateProjectBackgroundRequestTimeout) Code() int {
	return 408
}

func (o *UpdateProjectBackgroundRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects1/{projectId}/background][%d] updateProjectBackgroundRequestTimeout ", 408)
}

func (o *UpdateProjectBackgroundRequestTimeout) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects1/{projectId}/background][%d] updateProjectBackgroundRequestTimeout ", 408)
}

func (o *UpdateProjectBackgroundRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectBackgroundUnprocessableEntity creates a UpdateProjectBackgroundUnprocessableEntity with default headers values
func NewUpdateProjectBackgroundUnprocessableEntity() *UpdateProjectBackgroundUnprocessableEntity {
	return &UpdateProjectBackgroundUnprocessableEntity{}
}

/*
UpdateProjectBackgroundUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type UpdateProjectBackgroundUnprocessableEntity struct {
}

// IsSuccess returns true when this update project background unprocessable entity response has a 2xx status code
func (o *UpdateProjectBackgroundUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project background unprocessable entity response has a 3xx status code
func (o *UpdateProjectBackgroundUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project background unprocessable entity response has a 4xx status code
func (o *UpdateProjectBackgroundUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project background unprocessable entity response has a 5xx status code
func (o *UpdateProjectBackgroundUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update project background unprocessable entity response a status code equal to that given
func (o *UpdateProjectBackgroundUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update project background unprocessable entity response
func (o *UpdateProjectBackgroundUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateProjectBackgroundUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects1/{projectId}/background][%d] updateProjectBackgroundUnprocessableEntity ", 422)
}

func (o *UpdateProjectBackgroundUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects1/{projectId}/background][%d] updateProjectBackgroundUnprocessableEntity ", 422)
}

func (o *UpdateProjectBackgroundUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
