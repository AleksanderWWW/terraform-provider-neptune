// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"terraform-provider-neptune/internal/neptune/models"
)

// UpdateProjectMemberReader is a Reader for the UpdateProjectMember structure.
type UpdateProjectMemberReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateProjectMemberReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateProjectMemberOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateProjectMemberBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateProjectMemberUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateProjectMemberForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateProjectMemberNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewUpdateProjectMemberRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateProjectMemberUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /api/backend/v1/projects/members/{userId}] updateProjectMember", response, response.Code())
	}
}

// NewUpdateProjectMemberOK creates a UpdateProjectMemberOK with default headers values
func NewUpdateProjectMemberOK() *UpdateProjectMemberOK {
	return &UpdateProjectMemberOK{}
}

/*
UpdateProjectMemberOK describes a response with status code 200, with default header values.

OK
*/
type UpdateProjectMemberOK struct {
	Payload *models.ProjectMemberDTO
}

// IsSuccess returns true when this update project member o k response has a 2xx status code
func (o *UpdateProjectMemberOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update project member o k response has a 3xx status code
func (o *UpdateProjectMemberOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project member o k response has a 4xx status code
func (o *UpdateProjectMemberOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update project member o k response has a 5xx status code
func (o *UpdateProjectMemberOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update project member o k response a status code equal to that given
func (o *UpdateProjectMemberOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update project member o k response
func (o *UpdateProjectMemberOK) Code() int {
	return 200
}

func (o *UpdateProjectMemberOK) Error() string {
	return fmt.Sprintf("[PATCH /api/backend/v1/projects/members/{userId}][%d] updateProjectMemberOK  %+v", 200, o.Payload)
}

func (o *UpdateProjectMemberOK) String() string {
	return fmt.Sprintf("[PATCH /api/backend/v1/projects/members/{userId}][%d] updateProjectMemberOK  %+v", 200, o.Payload)
}

func (o *UpdateProjectMemberOK) GetPayload() *models.ProjectMemberDTO {
	return o.Payload
}

func (o *UpdateProjectMemberOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProjectMemberDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateProjectMemberBadRequest creates a UpdateProjectMemberBadRequest with default headers values
func NewUpdateProjectMemberBadRequest() *UpdateProjectMemberBadRequest {
	return &UpdateProjectMemberBadRequest{}
}

/*
UpdateProjectMemberBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateProjectMemberBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update project member bad request response has a 2xx status code
func (o *UpdateProjectMemberBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project member bad request response has a 3xx status code
func (o *UpdateProjectMemberBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project member bad request response has a 4xx status code
func (o *UpdateProjectMemberBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project member bad request response has a 5xx status code
func (o *UpdateProjectMemberBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update project member bad request response a status code equal to that given
func (o *UpdateProjectMemberBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update project member bad request response
func (o *UpdateProjectMemberBadRequest) Code() int {
	return 400
}

func (o *UpdateProjectMemberBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/backend/v1/projects/members/{userId}][%d] updateProjectMemberBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateProjectMemberBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/backend/v1/projects/members/{userId}][%d] updateProjectMemberBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateProjectMemberBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateProjectMemberBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateProjectMemberUnauthorized creates a UpdateProjectMemberUnauthorized with default headers values
func NewUpdateProjectMemberUnauthorized() *UpdateProjectMemberUnauthorized {
	return &UpdateProjectMemberUnauthorized{}
}

/*
UpdateProjectMemberUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateProjectMemberUnauthorized struct {
}

// IsSuccess returns true when this update project member unauthorized response has a 2xx status code
func (o *UpdateProjectMemberUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project member unauthorized response has a 3xx status code
func (o *UpdateProjectMemberUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project member unauthorized response has a 4xx status code
func (o *UpdateProjectMemberUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project member unauthorized response has a 5xx status code
func (o *UpdateProjectMemberUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update project member unauthorized response a status code equal to that given
func (o *UpdateProjectMemberUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update project member unauthorized response
func (o *UpdateProjectMemberUnauthorized) Code() int {
	return 401
}

func (o *UpdateProjectMemberUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/backend/v1/projects/members/{userId}][%d] updateProjectMemberUnauthorized ", 401)
}

func (o *UpdateProjectMemberUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/backend/v1/projects/members/{userId}][%d] updateProjectMemberUnauthorized ", 401)
}

func (o *UpdateProjectMemberUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectMemberForbidden creates a UpdateProjectMemberForbidden with default headers values
func NewUpdateProjectMemberForbidden() *UpdateProjectMemberForbidden {
	return &UpdateProjectMemberForbidden{}
}

/*
UpdateProjectMemberForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateProjectMemberForbidden struct {
}

// IsSuccess returns true when this update project member forbidden response has a 2xx status code
func (o *UpdateProjectMemberForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project member forbidden response has a 3xx status code
func (o *UpdateProjectMemberForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project member forbidden response has a 4xx status code
func (o *UpdateProjectMemberForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project member forbidden response has a 5xx status code
func (o *UpdateProjectMemberForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update project member forbidden response a status code equal to that given
func (o *UpdateProjectMemberForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update project member forbidden response
func (o *UpdateProjectMemberForbidden) Code() int {
	return 403
}

func (o *UpdateProjectMemberForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/backend/v1/projects/members/{userId}][%d] updateProjectMemberForbidden ", 403)
}

func (o *UpdateProjectMemberForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/backend/v1/projects/members/{userId}][%d] updateProjectMemberForbidden ", 403)
}

func (o *UpdateProjectMemberForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectMemberNotFound creates a UpdateProjectMemberNotFound with default headers values
func NewUpdateProjectMemberNotFound() *UpdateProjectMemberNotFound {
	return &UpdateProjectMemberNotFound{}
}

/*
UpdateProjectMemberNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateProjectMemberNotFound struct {
}

// IsSuccess returns true when this update project member not found response has a 2xx status code
func (o *UpdateProjectMemberNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project member not found response has a 3xx status code
func (o *UpdateProjectMemberNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project member not found response has a 4xx status code
func (o *UpdateProjectMemberNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project member not found response has a 5xx status code
func (o *UpdateProjectMemberNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update project member not found response a status code equal to that given
func (o *UpdateProjectMemberNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update project member not found response
func (o *UpdateProjectMemberNotFound) Code() int {
	return 404
}

func (o *UpdateProjectMemberNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/backend/v1/projects/members/{userId}][%d] updateProjectMemberNotFound ", 404)
}

func (o *UpdateProjectMemberNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/backend/v1/projects/members/{userId}][%d] updateProjectMemberNotFound ", 404)
}

func (o *UpdateProjectMemberNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectMemberRequestTimeout creates a UpdateProjectMemberRequestTimeout with default headers values
func NewUpdateProjectMemberRequestTimeout() *UpdateProjectMemberRequestTimeout {
	return &UpdateProjectMemberRequestTimeout{}
}

/*
UpdateProjectMemberRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type UpdateProjectMemberRequestTimeout struct {
}

// IsSuccess returns true when this update project member request timeout response has a 2xx status code
func (o *UpdateProjectMemberRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project member request timeout response has a 3xx status code
func (o *UpdateProjectMemberRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project member request timeout response has a 4xx status code
func (o *UpdateProjectMemberRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project member request timeout response has a 5xx status code
func (o *UpdateProjectMemberRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this update project member request timeout response a status code equal to that given
func (o *UpdateProjectMemberRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the update project member request timeout response
func (o *UpdateProjectMemberRequestTimeout) Code() int {
	return 408
}

func (o *UpdateProjectMemberRequestTimeout) Error() string {
	return fmt.Sprintf("[PATCH /api/backend/v1/projects/members/{userId}][%d] updateProjectMemberRequestTimeout ", 408)
}

func (o *UpdateProjectMemberRequestTimeout) String() string {
	return fmt.Sprintf("[PATCH /api/backend/v1/projects/members/{userId}][%d] updateProjectMemberRequestTimeout ", 408)
}

func (o *UpdateProjectMemberRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectMemberUnprocessableEntity creates a UpdateProjectMemberUnprocessableEntity with default headers values
func NewUpdateProjectMemberUnprocessableEntity() *UpdateProjectMemberUnprocessableEntity {
	return &UpdateProjectMemberUnprocessableEntity{}
}

/*
UpdateProjectMemberUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type UpdateProjectMemberUnprocessableEntity struct {
}

// IsSuccess returns true when this update project member unprocessable entity response has a 2xx status code
func (o *UpdateProjectMemberUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project member unprocessable entity response has a 3xx status code
func (o *UpdateProjectMemberUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project member unprocessable entity response has a 4xx status code
func (o *UpdateProjectMemberUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project member unprocessable entity response has a 5xx status code
func (o *UpdateProjectMemberUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update project member unprocessable entity response a status code equal to that given
func (o *UpdateProjectMemberUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update project member unprocessable entity response
func (o *UpdateProjectMemberUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateProjectMemberUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /api/backend/v1/projects/members/{userId}][%d] updateProjectMemberUnprocessableEntity ", 422)
}

func (o *UpdateProjectMemberUnprocessableEntity) String() string {
	return fmt.Sprintf("[PATCH /api/backend/v1/projects/members/{userId}][%d] updateProjectMemberUnprocessableEntity ", 422)
}

func (o *UpdateProjectMemberUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
