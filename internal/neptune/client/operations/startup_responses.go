// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"terraform-provider-neptune/internal/neptune/models"
)

// StartupReader is a Reader for the Startup structure.
type StartupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StartupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStartupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStartupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewStartupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStartupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStartupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewStartupRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewStartupUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/backend/startup] startup", response, response.Code())
	}
}

// NewStartupOK creates a StartupOK with default headers values
func NewStartupOK() *StartupOK {
	return &StartupOK{}
}

/*
StartupOK describes a response with status code 200, with default header values.

OK
*/
type StartupOK struct {
	Payload []*models.ComponentStatus
}

// IsSuccess returns true when this startup o k response has a 2xx status code
func (o *StartupOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this startup o k response has a 3xx status code
func (o *StartupOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this startup o k response has a 4xx status code
func (o *StartupOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this startup o k response has a 5xx status code
func (o *StartupOK) IsServerError() bool {
	return false
}

// IsCode returns true when this startup o k response a status code equal to that given
func (o *StartupOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the startup o k response
func (o *StartupOK) Code() int {
	return 200
}

func (o *StartupOK) Error() string {
	return fmt.Sprintf("[GET /api/backend/startup][%d] startupOK  %+v", 200, o.Payload)
}

func (o *StartupOK) String() string {
	return fmt.Sprintf("[GET /api/backend/startup][%d] startupOK  %+v", 200, o.Payload)
}

func (o *StartupOK) GetPayload() []*models.ComponentStatus {
	return o.Payload
}

func (o *StartupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartupBadRequest creates a StartupBadRequest with default headers values
func NewStartupBadRequest() *StartupBadRequest {
	return &StartupBadRequest{}
}

/*
StartupBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type StartupBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this startup bad request response has a 2xx status code
func (o *StartupBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this startup bad request response has a 3xx status code
func (o *StartupBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this startup bad request response has a 4xx status code
func (o *StartupBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this startup bad request response has a 5xx status code
func (o *StartupBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this startup bad request response a status code equal to that given
func (o *StartupBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the startup bad request response
func (o *StartupBadRequest) Code() int {
	return 400
}

func (o *StartupBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/backend/startup][%d] startupBadRequest  %+v", 400, o.Payload)
}

func (o *StartupBadRequest) String() string {
	return fmt.Sprintf("[GET /api/backend/startup][%d] startupBadRequest  %+v", 400, o.Payload)
}

func (o *StartupBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *StartupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartupUnauthorized creates a StartupUnauthorized with default headers values
func NewStartupUnauthorized() *StartupUnauthorized {
	return &StartupUnauthorized{}
}

/*
StartupUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type StartupUnauthorized struct {
}

// IsSuccess returns true when this startup unauthorized response has a 2xx status code
func (o *StartupUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this startup unauthorized response has a 3xx status code
func (o *StartupUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this startup unauthorized response has a 4xx status code
func (o *StartupUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this startup unauthorized response has a 5xx status code
func (o *StartupUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this startup unauthorized response a status code equal to that given
func (o *StartupUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the startup unauthorized response
func (o *StartupUnauthorized) Code() int {
	return 401
}

func (o *StartupUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/backend/startup][%d] startupUnauthorized ", 401)
}

func (o *StartupUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/backend/startup][%d] startupUnauthorized ", 401)
}

func (o *StartupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStartupForbidden creates a StartupForbidden with default headers values
func NewStartupForbidden() *StartupForbidden {
	return &StartupForbidden{}
}

/*
StartupForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type StartupForbidden struct {
}

// IsSuccess returns true when this startup forbidden response has a 2xx status code
func (o *StartupForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this startup forbidden response has a 3xx status code
func (o *StartupForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this startup forbidden response has a 4xx status code
func (o *StartupForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this startup forbidden response has a 5xx status code
func (o *StartupForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this startup forbidden response a status code equal to that given
func (o *StartupForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the startup forbidden response
func (o *StartupForbidden) Code() int {
	return 403
}

func (o *StartupForbidden) Error() string {
	return fmt.Sprintf("[GET /api/backend/startup][%d] startupForbidden ", 403)
}

func (o *StartupForbidden) String() string {
	return fmt.Sprintf("[GET /api/backend/startup][%d] startupForbidden ", 403)
}

func (o *StartupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStartupNotFound creates a StartupNotFound with default headers values
func NewStartupNotFound() *StartupNotFound {
	return &StartupNotFound{}
}

/*
StartupNotFound describes a response with status code 404, with default header values.

Not Found
*/
type StartupNotFound struct {
}

// IsSuccess returns true when this startup not found response has a 2xx status code
func (o *StartupNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this startup not found response has a 3xx status code
func (o *StartupNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this startup not found response has a 4xx status code
func (o *StartupNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this startup not found response has a 5xx status code
func (o *StartupNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this startup not found response a status code equal to that given
func (o *StartupNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the startup not found response
func (o *StartupNotFound) Code() int {
	return 404
}

func (o *StartupNotFound) Error() string {
	return fmt.Sprintf("[GET /api/backend/startup][%d] startupNotFound ", 404)
}

func (o *StartupNotFound) String() string {
	return fmt.Sprintf("[GET /api/backend/startup][%d] startupNotFound ", 404)
}

func (o *StartupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStartupRequestTimeout creates a StartupRequestTimeout with default headers values
func NewStartupRequestTimeout() *StartupRequestTimeout {
	return &StartupRequestTimeout{}
}

/*
StartupRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type StartupRequestTimeout struct {
}

// IsSuccess returns true when this startup request timeout response has a 2xx status code
func (o *StartupRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this startup request timeout response has a 3xx status code
func (o *StartupRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this startup request timeout response has a 4xx status code
func (o *StartupRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this startup request timeout response has a 5xx status code
func (o *StartupRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this startup request timeout response a status code equal to that given
func (o *StartupRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the startup request timeout response
func (o *StartupRequestTimeout) Code() int {
	return 408
}

func (o *StartupRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/backend/startup][%d] startupRequestTimeout ", 408)
}

func (o *StartupRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/backend/startup][%d] startupRequestTimeout ", 408)
}

func (o *StartupRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStartupUnprocessableEntity creates a StartupUnprocessableEntity with default headers values
func NewStartupUnprocessableEntity() *StartupUnprocessableEntity {
	return &StartupUnprocessableEntity{}
}

/*
StartupUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type StartupUnprocessableEntity struct {
}

// IsSuccess returns true when this startup unprocessable entity response has a 2xx status code
func (o *StartupUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this startup unprocessable entity response has a 3xx status code
func (o *StartupUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this startup unprocessable entity response has a 4xx status code
func (o *StartupUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this startup unprocessable entity response has a 5xx status code
func (o *StartupUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this startup unprocessable entity response a status code equal to that given
func (o *StartupUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the startup unprocessable entity response
func (o *StartupUnprocessableEntity) Code() int {
	return 422
}

func (o *StartupUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /api/backend/startup][%d] startupUnprocessableEntity ", 422)
}

func (o *StartupUnprocessableEntity) String() string {
	return fmt.Sprintf("[GET /api/backend/startup][%d] startupUnprocessableEntity ", 422)
}

func (o *StartupUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
