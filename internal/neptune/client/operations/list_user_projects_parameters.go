// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListUserProjectsParams creates a new ListUserProjectsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListUserProjectsParams() *ListUserProjectsParams {
	return &ListUserProjectsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListUserProjectsParamsWithTimeout creates a new ListUserProjectsParams object
// with the ability to set a timeout on a request.
func NewListUserProjectsParamsWithTimeout(timeout time.Duration) *ListUserProjectsParams {
	return &ListUserProjectsParams{
		timeout: timeout,
	}
}

// NewListUserProjectsParamsWithContext creates a new ListUserProjectsParams object
// with the ability to set a context for a request.
func NewListUserProjectsParamsWithContext(ctx context.Context) *ListUserProjectsParams {
	return &ListUserProjectsParams{
		Context: ctx,
	}
}

// NewListUserProjectsParamsWithHTTPClient creates a new ListUserProjectsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListUserProjectsParamsWithHTTPClient(client *http.Client) *ListUserProjectsParams {
	return &ListUserProjectsParams{
		HTTPClient: client,
	}
}

/*
ListUserProjectsParams contains all the parameters to send to the API endpoint

	for the list user projects operation.

	Typically these are written to a http.Request.
*/
type ListUserProjectsParams struct {

	// Archived.
	Archived *bool

	// Limit.
	//
	// Format: int32
	Limit *int32

	// Offset.
	//
	// Format: int32
	Offset *int32

	// OrganizationIdentifier.
	OrganizationIdentifier *string

	// ProjectsForUserMode.
	ProjectsForUserMode string

	// SearchTerm.
	SearchTerm *string

	// SortBy.
	SortBy []string

	// SortDirection.
	SortDirection []string

	// UserRelation.
	UserRelation *string

	// ViewedUsername.
	ViewedUsername string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list user projects params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListUserProjectsParams) WithDefaults() *ListUserProjectsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list user projects params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListUserProjectsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list user projects params
func (o *ListUserProjectsParams) WithTimeout(timeout time.Duration) *ListUserProjectsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list user projects params
func (o *ListUserProjectsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list user projects params
func (o *ListUserProjectsParams) WithContext(ctx context.Context) *ListUserProjectsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list user projects params
func (o *ListUserProjectsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list user projects params
func (o *ListUserProjectsParams) WithHTTPClient(client *http.Client) *ListUserProjectsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list user projects params
func (o *ListUserProjectsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithArchived adds the archived to the list user projects params
func (o *ListUserProjectsParams) WithArchived(archived *bool) *ListUserProjectsParams {
	o.SetArchived(archived)
	return o
}

// SetArchived adds the archived to the list user projects params
func (o *ListUserProjectsParams) SetArchived(archived *bool) {
	o.Archived = archived
}

// WithLimit adds the limit to the list user projects params
func (o *ListUserProjectsParams) WithLimit(limit *int32) *ListUserProjectsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list user projects params
func (o *ListUserProjectsParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithOffset adds the offset to the list user projects params
func (o *ListUserProjectsParams) WithOffset(offset *int32) *ListUserProjectsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the list user projects params
func (o *ListUserProjectsParams) SetOffset(offset *int32) {
	o.Offset = offset
}

// WithOrganizationIdentifier adds the organizationIdentifier to the list user projects params
func (o *ListUserProjectsParams) WithOrganizationIdentifier(organizationIdentifier *string) *ListUserProjectsParams {
	o.SetOrganizationIdentifier(organizationIdentifier)
	return o
}

// SetOrganizationIdentifier adds the organizationIdentifier to the list user projects params
func (o *ListUserProjectsParams) SetOrganizationIdentifier(organizationIdentifier *string) {
	o.OrganizationIdentifier = organizationIdentifier
}

// WithProjectsForUserMode adds the projectsForUserMode to the list user projects params
func (o *ListUserProjectsParams) WithProjectsForUserMode(projectsForUserMode string) *ListUserProjectsParams {
	o.SetProjectsForUserMode(projectsForUserMode)
	return o
}

// SetProjectsForUserMode adds the projectsForUserMode to the list user projects params
func (o *ListUserProjectsParams) SetProjectsForUserMode(projectsForUserMode string) {
	o.ProjectsForUserMode = projectsForUserMode
}

// WithSearchTerm adds the searchTerm to the list user projects params
func (o *ListUserProjectsParams) WithSearchTerm(searchTerm *string) *ListUserProjectsParams {
	o.SetSearchTerm(searchTerm)
	return o
}

// SetSearchTerm adds the searchTerm to the list user projects params
func (o *ListUserProjectsParams) SetSearchTerm(searchTerm *string) {
	o.SearchTerm = searchTerm
}

// WithSortBy adds the sortBy to the list user projects params
func (o *ListUserProjectsParams) WithSortBy(sortBy []string) *ListUserProjectsParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the list user projects params
func (o *ListUserProjectsParams) SetSortBy(sortBy []string) {
	o.SortBy = sortBy
}

// WithSortDirection adds the sortDirection to the list user projects params
func (o *ListUserProjectsParams) WithSortDirection(sortDirection []string) *ListUserProjectsParams {
	o.SetSortDirection(sortDirection)
	return o
}

// SetSortDirection adds the sortDirection to the list user projects params
func (o *ListUserProjectsParams) SetSortDirection(sortDirection []string) {
	o.SortDirection = sortDirection
}

// WithUserRelation adds the userRelation to the list user projects params
func (o *ListUserProjectsParams) WithUserRelation(userRelation *string) *ListUserProjectsParams {
	o.SetUserRelation(userRelation)
	return o
}

// SetUserRelation adds the userRelation to the list user projects params
func (o *ListUserProjectsParams) SetUserRelation(userRelation *string) {
	o.UserRelation = userRelation
}

// WithViewedUsername adds the viewedUsername to the list user projects params
func (o *ListUserProjectsParams) WithViewedUsername(viewedUsername string) *ListUserProjectsParams {
	o.SetViewedUsername(viewedUsername)
	return o
}

// SetViewedUsername adds the viewedUsername to the list user projects params
func (o *ListUserProjectsParams) SetViewedUsername(viewedUsername string) {
	o.ViewedUsername = viewedUsername
}

// WriteToRequest writes these params to a swagger request
func (o *ListUserProjectsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Archived != nil {

		// query param archived
		var qrArchived bool

		if o.Archived != nil {
			qrArchived = *o.Archived
		}
		qArchived := swag.FormatBool(qrArchived)
		if qArchived != "" {

			if err := r.SetQueryParam("archived", qArchived); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int32

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt32(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.OrganizationIdentifier != nil {

		// query param organizationIdentifier
		var qrOrganizationIdentifier string

		if o.OrganizationIdentifier != nil {
			qrOrganizationIdentifier = *o.OrganizationIdentifier
		}
		qOrganizationIdentifier := qrOrganizationIdentifier
		if qOrganizationIdentifier != "" {

			if err := r.SetQueryParam("organizationIdentifier", qOrganizationIdentifier); err != nil {
				return err
			}
		}
	}

	// query param projectsForUserMode
	qrProjectsForUserMode := o.ProjectsForUserMode
	qProjectsForUserMode := qrProjectsForUserMode
	if qProjectsForUserMode != "" {

		if err := r.SetQueryParam("projectsForUserMode", qProjectsForUserMode); err != nil {
			return err
		}
	}

	if o.SearchTerm != nil {

		// query param searchTerm
		var qrSearchTerm string

		if o.SearchTerm != nil {
			qrSearchTerm = *o.SearchTerm
		}
		qSearchTerm := qrSearchTerm
		if qSearchTerm != "" {

			if err := r.SetQueryParam("searchTerm", qSearchTerm); err != nil {
				return err
			}
		}
	}

	if o.SortBy != nil {

		// binding items for sortBy
		joinedSortBy := o.bindParamSortBy(reg)

		// query array param sortBy
		if err := r.SetQueryParam("sortBy", joinedSortBy...); err != nil {
			return err
		}
	}

	if o.SortDirection != nil {

		// binding items for sortDirection
		joinedSortDirection := o.bindParamSortDirection(reg)

		// query array param sortDirection
		if err := r.SetQueryParam("sortDirection", joinedSortDirection...); err != nil {
			return err
		}
	}

	if o.UserRelation != nil {

		// query param userRelation
		var qrUserRelation string

		if o.UserRelation != nil {
			qrUserRelation = *o.UserRelation
		}
		qUserRelation := qrUserRelation
		if qUserRelation != "" {

			if err := r.SetQueryParam("userRelation", qUserRelation); err != nil {
				return err
			}
		}
	}

	// query param viewedUsername
	qrViewedUsername := o.ViewedUsername
	qViewedUsername := qrViewedUsername
	if qViewedUsername != "" {

		if err := r.SetQueryParam("viewedUsername", qViewedUsername); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamListUserProjects binds the parameter sortBy
func (o *ListUserProjectsParams) bindParamSortBy(formats strfmt.Registry) []string {
	sortByIR := o.SortBy

	var sortByIC []string
	for _, sortByIIR := range sortByIR { // explode []string

		sortByIIV := sortByIIR // string as string
		sortByIC = append(sortByIC, sortByIIV)
	}

	// items.CollectionFormat: "multi"
	sortByIS := swag.JoinByFormat(sortByIC, "multi")

	return sortByIS
}

// bindParamListUserProjects binds the parameter sortDirection
func (o *ListUserProjectsParams) bindParamSortDirection(formats strfmt.Registry) []string {
	sortDirectionIR := o.SortDirection

	var sortDirectionIC []string
	for _, sortDirectionIIR := range sortDirectionIR { // explode []string

		sortDirectionIIV := sortDirectionIIR // string as string
		sortDirectionIC = append(sortDirectionIC, sortDirectionIIV)
	}

	// items.CollectionFormat: "multi"
	sortDirectionIS := swag.JoinByFormat(sortDirectionIC, "multi")

	return sortDirectionIS
}
