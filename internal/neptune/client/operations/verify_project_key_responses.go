// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// VerifyProjectKeyReader is a Reader for the VerifyProjectKey structure.
type VerifyProjectKeyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VerifyProjectKeyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewVerifyProjectKeyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewVerifyProjectKeyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewVerifyProjectKeyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewVerifyProjectKeyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewVerifyProjectKeyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewVerifyProjectKeyRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewVerifyProjectKeyUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/backend/v1/projects/verify-project-key] verifyProjectKey", response, response.Code())
	}
}

// NewVerifyProjectKeyOK creates a VerifyProjectKeyOK with default headers values
func NewVerifyProjectKeyOK() *VerifyProjectKeyOK {
	return &VerifyProjectKeyOK{}
}

/*
VerifyProjectKeyOK describes a response with status code 200, with default header values.

OK
*/
type VerifyProjectKeyOK struct {
	Payload *models.ProjectKeyAvailabilityDTO
}

// IsSuccess returns true when this verify project key o k response has a 2xx status code
func (o *VerifyProjectKeyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this verify project key o k response has a 3xx status code
func (o *VerifyProjectKeyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this verify project key o k response has a 4xx status code
func (o *VerifyProjectKeyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this verify project key o k response has a 5xx status code
func (o *VerifyProjectKeyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this verify project key o k response a status code equal to that given
func (o *VerifyProjectKeyOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the verify project key o k response
func (o *VerifyProjectKeyOK) Code() int {
	return 200
}

func (o *VerifyProjectKeyOK) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/projects/verify-project-key][%d] verifyProjectKeyOK  %+v", 200, o.Payload)
}

func (o *VerifyProjectKeyOK) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/projects/verify-project-key][%d] verifyProjectKeyOK  %+v", 200, o.Payload)
}

func (o *VerifyProjectKeyOK) GetPayload() *models.ProjectKeyAvailabilityDTO {
	return o.Payload
}

func (o *VerifyProjectKeyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProjectKeyAvailabilityDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVerifyProjectKeyBadRequest creates a VerifyProjectKeyBadRequest with default headers values
func NewVerifyProjectKeyBadRequest() *VerifyProjectKeyBadRequest {
	return &VerifyProjectKeyBadRequest{}
}

/*
VerifyProjectKeyBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type VerifyProjectKeyBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this verify project key bad request response has a 2xx status code
func (o *VerifyProjectKeyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this verify project key bad request response has a 3xx status code
func (o *VerifyProjectKeyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this verify project key bad request response has a 4xx status code
func (o *VerifyProjectKeyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this verify project key bad request response has a 5xx status code
func (o *VerifyProjectKeyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this verify project key bad request response a status code equal to that given
func (o *VerifyProjectKeyBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the verify project key bad request response
func (o *VerifyProjectKeyBadRequest) Code() int {
	return 400
}

func (o *VerifyProjectKeyBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/projects/verify-project-key][%d] verifyProjectKeyBadRequest  %+v", 400, o.Payload)
}

func (o *VerifyProjectKeyBadRequest) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/projects/verify-project-key][%d] verifyProjectKeyBadRequest  %+v", 400, o.Payload)
}

func (o *VerifyProjectKeyBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *VerifyProjectKeyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVerifyProjectKeyUnauthorized creates a VerifyProjectKeyUnauthorized with default headers values
func NewVerifyProjectKeyUnauthorized() *VerifyProjectKeyUnauthorized {
	return &VerifyProjectKeyUnauthorized{}
}

/*
VerifyProjectKeyUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type VerifyProjectKeyUnauthorized struct {
}

// IsSuccess returns true when this verify project key unauthorized response has a 2xx status code
func (o *VerifyProjectKeyUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this verify project key unauthorized response has a 3xx status code
func (o *VerifyProjectKeyUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this verify project key unauthorized response has a 4xx status code
func (o *VerifyProjectKeyUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this verify project key unauthorized response has a 5xx status code
func (o *VerifyProjectKeyUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this verify project key unauthorized response a status code equal to that given
func (o *VerifyProjectKeyUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the verify project key unauthorized response
func (o *VerifyProjectKeyUnauthorized) Code() int {
	return 401
}

func (o *VerifyProjectKeyUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/projects/verify-project-key][%d] verifyProjectKeyUnauthorized ", 401)
}

func (o *VerifyProjectKeyUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/projects/verify-project-key][%d] verifyProjectKeyUnauthorized ", 401)
}

func (o *VerifyProjectKeyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewVerifyProjectKeyForbidden creates a VerifyProjectKeyForbidden with default headers values
func NewVerifyProjectKeyForbidden() *VerifyProjectKeyForbidden {
	return &VerifyProjectKeyForbidden{}
}

/*
VerifyProjectKeyForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type VerifyProjectKeyForbidden struct {
}

// IsSuccess returns true when this verify project key forbidden response has a 2xx status code
func (o *VerifyProjectKeyForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this verify project key forbidden response has a 3xx status code
func (o *VerifyProjectKeyForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this verify project key forbidden response has a 4xx status code
func (o *VerifyProjectKeyForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this verify project key forbidden response has a 5xx status code
func (o *VerifyProjectKeyForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this verify project key forbidden response a status code equal to that given
func (o *VerifyProjectKeyForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the verify project key forbidden response
func (o *VerifyProjectKeyForbidden) Code() int {
	return 403
}

func (o *VerifyProjectKeyForbidden) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/projects/verify-project-key][%d] verifyProjectKeyForbidden ", 403)
}

func (o *VerifyProjectKeyForbidden) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/projects/verify-project-key][%d] verifyProjectKeyForbidden ", 403)
}

func (o *VerifyProjectKeyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewVerifyProjectKeyNotFound creates a VerifyProjectKeyNotFound with default headers values
func NewVerifyProjectKeyNotFound() *VerifyProjectKeyNotFound {
	return &VerifyProjectKeyNotFound{}
}

/*
VerifyProjectKeyNotFound describes a response with status code 404, with default header values.

Not Found
*/
type VerifyProjectKeyNotFound struct {
}

// IsSuccess returns true when this verify project key not found response has a 2xx status code
func (o *VerifyProjectKeyNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this verify project key not found response has a 3xx status code
func (o *VerifyProjectKeyNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this verify project key not found response has a 4xx status code
func (o *VerifyProjectKeyNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this verify project key not found response has a 5xx status code
func (o *VerifyProjectKeyNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this verify project key not found response a status code equal to that given
func (o *VerifyProjectKeyNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the verify project key not found response
func (o *VerifyProjectKeyNotFound) Code() int {
	return 404
}

func (o *VerifyProjectKeyNotFound) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/projects/verify-project-key][%d] verifyProjectKeyNotFound ", 404)
}

func (o *VerifyProjectKeyNotFound) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/projects/verify-project-key][%d] verifyProjectKeyNotFound ", 404)
}

func (o *VerifyProjectKeyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewVerifyProjectKeyRequestTimeout creates a VerifyProjectKeyRequestTimeout with default headers values
func NewVerifyProjectKeyRequestTimeout() *VerifyProjectKeyRequestTimeout {
	return &VerifyProjectKeyRequestTimeout{}
}

/*
VerifyProjectKeyRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type VerifyProjectKeyRequestTimeout struct {
}

// IsSuccess returns true when this verify project key request timeout response has a 2xx status code
func (o *VerifyProjectKeyRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this verify project key request timeout response has a 3xx status code
func (o *VerifyProjectKeyRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this verify project key request timeout response has a 4xx status code
func (o *VerifyProjectKeyRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this verify project key request timeout response has a 5xx status code
func (o *VerifyProjectKeyRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this verify project key request timeout response a status code equal to that given
func (o *VerifyProjectKeyRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the verify project key request timeout response
func (o *VerifyProjectKeyRequestTimeout) Code() int {
	return 408
}

func (o *VerifyProjectKeyRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/projects/verify-project-key][%d] verifyProjectKeyRequestTimeout ", 408)
}

func (o *VerifyProjectKeyRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/projects/verify-project-key][%d] verifyProjectKeyRequestTimeout ", 408)
}

func (o *VerifyProjectKeyRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewVerifyProjectKeyUnprocessableEntity creates a VerifyProjectKeyUnprocessableEntity with default headers values
func NewVerifyProjectKeyUnprocessableEntity() *VerifyProjectKeyUnprocessableEntity {
	return &VerifyProjectKeyUnprocessableEntity{}
}

/*
VerifyProjectKeyUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type VerifyProjectKeyUnprocessableEntity struct {
}

// IsSuccess returns true when this verify project key unprocessable entity response has a 2xx status code
func (o *VerifyProjectKeyUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this verify project key unprocessable entity response has a 3xx status code
func (o *VerifyProjectKeyUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this verify project key unprocessable entity response has a 4xx status code
func (o *VerifyProjectKeyUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this verify project key unprocessable entity response has a 5xx status code
func (o *VerifyProjectKeyUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this verify project key unprocessable entity response a status code equal to that given
func (o *VerifyProjectKeyUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the verify project key unprocessable entity response
func (o *VerifyProjectKeyUnprocessableEntity) Code() int {
	return 422
}

func (o *VerifyProjectKeyUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/projects/verify-project-key][%d] verifyProjectKeyUnprocessableEntity ", 422)
}

func (o *VerifyProjectKeyUnprocessableEntity) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/projects/verify-project-key][%d] verifyProjectKeyUnprocessableEntity ", 422)
}

func (o *VerifyProjectKeyUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
