// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// CreateCheckoutSessionReader is a Reader for the CreateCheckoutSession structure.
type CreateCheckoutSessionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateCheckoutSessionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateCheckoutSessionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateCheckoutSessionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateCheckoutSessionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateCheckoutSessionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateCheckoutSessionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewCreateCheckoutSessionRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewCreateCheckoutSessionUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /api/backend/v1/payments/upgrade] createCheckoutSession", response, response.Code())
	}
}

// NewCreateCheckoutSessionOK creates a CreateCheckoutSessionOK with default headers values
func NewCreateCheckoutSessionOK() *CreateCheckoutSessionOK {
	return &CreateCheckoutSessionOK{}
}

/*
CreateCheckoutSessionOK describes a response with status code 200, with default header values.

OK
*/
type CreateCheckoutSessionOK struct {
	Payload *models.PurchaseResultDTO
}

// IsSuccess returns true when this create checkout session o k response has a 2xx status code
func (o *CreateCheckoutSessionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create checkout session o k response has a 3xx status code
func (o *CreateCheckoutSessionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create checkout session o k response has a 4xx status code
func (o *CreateCheckoutSessionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create checkout session o k response has a 5xx status code
func (o *CreateCheckoutSessionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create checkout session o k response a status code equal to that given
func (o *CreateCheckoutSessionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create checkout session o k response
func (o *CreateCheckoutSessionOK) Code() int {
	return 200
}

func (o *CreateCheckoutSessionOK) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/upgrade][%d] createCheckoutSessionOK  %+v", 200, o.Payload)
}

func (o *CreateCheckoutSessionOK) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/upgrade][%d] createCheckoutSessionOK  %+v", 200, o.Payload)
}

func (o *CreateCheckoutSessionOK) GetPayload() *models.PurchaseResultDTO {
	return o.Payload
}

func (o *CreateCheckoutSessionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PurchaseResultDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateCheckoutSessionBadRequest creates a CreateCheckoutSessionBadRequest with default headers values
func NewCreateCheckoutSessionBadRequest() *CreateCheckoutSessionBadRequest {
	return &CreateCheckoutSessionBadRequest{}
}

/*
CreateCheckoutSessionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CreateCheckoutSessionBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this create checkout session bad request response has a 2xx status code
func (o *CreateCheckoutSessionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create checkout session bad request response has a 3xx status code
func (o *CreateCheckoutSessionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create checkout session bad request response has a 4xx status code
func (o *CreateCheckoutSessionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create checkout session bad request response has a 5xx status code
func (o *CreateCheckoutSessionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create checkout session bad request response a status code equal to that given
func (o *CreateCheckoutSessionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create checkout session bad request response
func (o *CreateCheckoutSessionBadRequest) Code() int {
	return 400
}

func (o *CreateCheckoutSessionBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/upgrade][%d] createCheckoutSessionBadRequest  %+v", 400, o.Payload)
}

func (o *CreateCheckoutSessionBadRequest) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/upgrade][%d] createCheckoutSessionBadRequest  %+v", 400, o.Payload)
}

func (o *CreateCheckoutSessionBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateCheckoutSessionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateCheckoutSessionUnauthorized creates a CreateCheckoutSessionUnauthorized with default headers values
func NewCreateCheckoutSessionUnauthorized() *CreateCheckoutSessionUnauthorized {
	return &CreateCheckoutSessionUnauthorized{}
}

/*
CreateCheckoutSessionUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CreateCheckoutSessionUnauthorized struct {
}

// IsSuccess returns true when this create checkout session unauthorized response has a 2xx status code
func (o *CreateCheckoutSessionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create checkout session unauthorized response has a 3xx status code
func (o *CreateCheckoutSessionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create checkout session unauthorized response has a 4xx status code
func (o *CreateCheckoutSessionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create checkout session unauthorized response has a 5xx status code
func (o *CreateCheckoutSessionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create checkout session unauthorized response a status code equal to that given
func (o *CreateCheckoutSessionUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the create checkout session unauthorized response
func (o *CreateCheckoutSessionUnauthorized) Code() int {
	return 401
}

func (o *CreateCheckoutSessionUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/upgrade][%d] createCheckoutSessionUnauthorized ", 401)
}

func (o *CreateCheckoutSessionUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/upgrade][%d] createCheckoutSessionUnauthorized ", 401)
}

func (o *CreateCheckoutSessionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateCheckoutSessionForbidden creates a CreateCheckoutSessionForbidden with default headers values
func NewCreateCheckoutSessionForbidden() *CreateCheckoutSessionForbidden {
	return &CreateCheckoutSessionForbidden{}
}

/*
CreateCheckoutSessionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CreateCheckoutSessionForbidden struct {
}

// IsSuccess returns true when this create checkout session forbidden response has a 2xx status code
func (o *CreateCheckoutSessionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create checkout session forbidden response has a 3xx status code
func (o *CreateCheckoutSessionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create checkout session forbidden response has a 4xx status code
func (o *CreateCheckoutSessionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create checkout session forbidden response has a 5xx status code
func (o *CreateCheckoutSessionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create checkout session forbidden response a status code equal to that given
func (o *CreateCheckoutSessionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create checkout session forbidden response
func (o *CreateCheckoutSessionForbidden) Code() int {
	return 403
}

func (o *CreateCheckoutSessionForbidden) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/upgrade][%d] createCheckoutSessionForbidden ", 403)
}

func (o *CreateCheckoutSessionForbidden) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/upgrade][%d] createCheckoutSessionForbidden ", 403)
}

func (o *CreateCheckoutSessionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateCheckoutSessionNotFound creates a CreateCheckoutSessionNotFound with default headers values
func NewCreateCheckoutSessionNotFound() *CreateCheckoutSessionNotFound {
	return &CreateCheckoutSessionNotFound{}
}

/*
CreateCheckoutSessionNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CreateCheckoutSessionNotFound struct {
}

// IsSuccess returns true when this create checkout session not found response has a 2xx status code
func (o *CreateCheckoutSessionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create checkout session not found response has a 3xx status code
func (o *CreateCheckoutSessionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create checkout session not found response has a 4xx status code
func (o *CreateCheckoutSessionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create checkout session not found response has a 5xx status code
func (o *CreateCheckoutSessionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create checkout session not found response a status code equal to that given
func (o *CreateCheckoutSessionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create checkout session not found response
func (o *CreateCheckoutSessionNotFound) Code() int {
	return 404
}

func (o *CreateCheckoutSessionNotFound) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/upgrade][%d] createCheckoutSessionNotFound ", 404)
}

func (o *CreateCheckoutSessionNotFound) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/upgrade][%d] createCheckoutSessionNotFound ", 404)
}

func (o *CreateCheckoutSessionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateCheckoutSessionRequestTimeout creates a CreateCheckoutSessionRequestTimeout with default headers values
func NewCreateCheckoutSessionRequestTimeout() *CreateCheckoutSessionRequestTimeout {
	return &CreateCheckoutSessionRequestTimeout{}
}

/*
CreateCheckoutSessionRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type CreateCheckoutSessionRequestTimeout struct {
}

// IsSuccess returns true when this create checkout session request timeout response has a 2xx status code
func (o *CreateCheckoutSessionRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create checkout session request timeout response has a 3xx status code
func (o *CreateCheckoutSessionRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create checkout session request timeout response has a 4xx status code
func (o *CreateCheckoutSessionRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this create checkout session request timeout response has a 5xx status code
func (o *CreateCheckoutSessionRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this create checkout session request timeout response a status code equal to that given
func (o *CreateCheckoutSessionRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the create checkout session request timeout response
func (o *CreateCheckoutSessionRequestTimeout) Code() int {
	return 408
}

func (o *CreateCheckoutSessionRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/upgrade][%d] createCheckoutSessionRequestTimeout ", 408)
}

func (o *CreateCheckoutSessionRequestTimeout) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/upgrade][%d] createCheckoutSessionRequestTimeout ", 408)
}

func (o *CreateCheckoutSessionRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateCheckoutSessionUnprocessableEntity creates a CreateCheckoutSessionUnprocessableEntity with default headers values
func NewCreateCheckoutSessionUnprocessableEntity() *CreateCheckoutSessionUnprocessableEntity {
	return &CreateCheckoutSessionUnprocessableEntity{}
}

/*
CreateCheckoutSessionUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type CreateCheckoutSessionUnprocessableEntity struct {
}

// IsSuccess returns true when this create checkout session unprocessable entity response has a 2xx status code
func (o *CreateCheckoutSessionUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create checkout session unprocessable entity response has a 3xx status code
func (o *CreateCheckoutSessionUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create checkout session unprocessable entity response has a 4xx status code
func (o *CreateCheckoutSessionUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this create checkout session unprocessable entity response has a 5xx status code
func (o *CreateCheckoutSessionUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this create checkout session unprocessable entity response a status code equal to that given
func (o *CreateCheckoutSessionUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the create checkout session unprocessable entity response
func (o *CreateCheckoutSessionUnprocessableEntity) Code() int {
	return 422
}

func (o *CreateCheckoutSessionUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/upgrade][%d] createCheckoutSessionUnprocessableEntity ", 422)
}

func (o *CreateCheckoutSessionUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/payments/upgrade][%d] createCheckoutSessionUnprocessableEntity ", 422)
}

func (o *CreateCheckoutSessionUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
