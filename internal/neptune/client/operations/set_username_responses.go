// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// SetUsernameReader is a Reader for the SetUsername structure.
type SetUsernameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetUsernameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewSetUsernameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSetUsernameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSetUsernameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSetUsernameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSetUsernameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewSetUsernameRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewSetUsernameUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /api/backend/v1/login/username] setUsername", response, response.Code())
	}
}

// NewSetUsernameNoContent creates a SetUsernameNoContent with default headers values
func NewSetUsernameNoContent() *SetUsernameNoContent {
	return &SetUsernameNoContent{}
}

/*
SetUsernameNoContent describes a response with status code 204, with default header values.

No Content
*/
type SetUsernameNoContent struct {
}

// IsSuccess returns true when this set username no content response has a 2xx status code
func (o *SetUsernameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this set username no content response has a 3xx status code
func (o *SetUsernameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set username no content response has a 4xx status code
func (o *SetUsernameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this set username no content response has a 5xx status code
func (o *SetUsernameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this set username no content response a status code equal to that given
func (o *SetUsernameNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the set username no content response
func (o *SetUsernameNoContent) Code() int {
	return 204
}

func (o *SetUsernameNoContent) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/login/username][%d] setUsernameNoContent ", 204)
}

func (o *SetUsernameNoContent) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/login/username][%d] setUsernameNoContent ", 204)
}

func (o *SetUsernameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSetUsernameBadRequest creates a SetUsernameBadRequest with default headers values
func NewSetUsernameBadRequest() *SetUsernameBadRequest {
	return &SetUsernameBadRequest{}
}

/*
SetUsernameBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SetUsernameBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this set username bad request response has a 2xx status code
func (o *SetUsernameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set username bad request response has a 3xx status code
func (o *SetUsernameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set username bad request response has a 4xx status code
func (o *SetUsernameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this set username bad request response has a 5xx status code
func (o *SetUsernameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this set username bad request response a status code equal to that given
func (o *SetUsernameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the set username bad request response
func (o *SetUsernameBadRequest) Code() int {
	return 400
}

func (o *SetUsernameBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/login/username][%d] setUsernameBadRequest  %+v", 400, o.Payload)
}

func (o *SetUsernameBadRequest) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/login/username][%d] setUsernameBadRequest  %+v", 400, o.Payload)
}

func (o *SetUsernameBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetUsernameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetUsernameUnauthorized creates a SetUsernameUnauthorized with default headers values
func NewSetUsernameUnauthorized() *SetUsernameUnauthorized {
	return &SetUsernameUnauthorized{}
}

/*
SetUsernameUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SetUsernameUnauthorized struct {
}

// IsSuccess returns true when this set username unauthorized response has a 2xx status code
func (o *SetUsernameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set username unauthorized response has a 3xx status code
func (o *SetUsernameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set username unauthorized response has a 4xx status code
func (o *SetUsernameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this set username unauthorized response has a 5xx status code
func (o *SetUsernameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this set username unauthorized response a status code equal to that given
func (o *SetUsernameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the set username unauthorized response
func (o *SetUsernameUnauthorized) Code() int {
	return 401
}

func (o *SetUsernameUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/login/username][%d] setUsernameUnauthorized ", 401)
}

func (o *SetUsernameUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/login/username][%d] setUsernameUnauthorized ", 401)
}

func (o *SetUsernameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSetUsernameForbidden creates a SetUsernameForbidden with default headers values
func NewSetUsernameForbidden() *SetUsernameForbidden {
	return &SetUsernameForbidden{}
}

/*
SetUsernameForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SetUsernameForbidden struct {
}

// IsSuccess returns true when this set username forbidden response has a 2xx status code
func (o *SetUsernameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set username forbidden response has a 3xx status code
func (o *SetUsernameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set username forbidden response has a 4xx status code
func (o *SetUsernameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this set username forbidden response has a 5xx status code
func (o *SetUsernameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this set username forbidden response a status code equal to that given
func (o *SetUsernameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the set username forbidden response
func (o *SetUsernameForbidden) Code() int {
	return 403
}

func (o *SetUsernameForbidden) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/login/username][%d] setUsernameForbidden ", 403)
}

func (o *SetUsernameForbidden) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/login/username][%d] setUsernameForbidden ", 403)
}

func (o *SetUsernameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSetUsernameNotFound creates a SetUsernameNotFound with default headers values
func NewSetUsernameNotFound() *SetUsernameNotFound {
	return &SetUsernameNotFound{}
}

/*
SetUsernameNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SetUsernameNotFound struct {
}

// IsSuccess returns true when this set username not found response has a 2xx status code
func (o *SetUsernameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set username not found response has a 3xx status code
func (o *SetUsernameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set username not found response has a 4xx status code
func (o *SetUsernameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this set username not found response has a 5xx status code
func (o *SetUsernameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this set username not found response a status code equal to that given
func (o *SetUsernameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the set username not found response
func (o *SetUsernameNotFound) Code() int {
	return 404
}

func (o *SetUsernameNotFound) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/login/username][%d] setUsernameNotFound ", 404)
}

func (o *SetUsernameNotFound) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/login/username][%d] setUsernameNotFound ", 404)
}

func (o *SetUsernameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSetUsernameRequestTimeout creates a SetUsernameRequestTimeout with default headers values
func NewSetUsernameRequestTimeout() *SetUsernameRequestTimeout {
	return &SetUsernameRequestTimeout{}
}

/*
SetUsernameRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type SetUsernameRequestTimeout struct {
}

// IsSuccess returns true when this set username request timeout response has a 2xx status code
func (o *SetUsernameRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set username request timeout response has a 3xx status code
func (o *SetUsernameRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set username request timeout response has a 4xx status code
func (o *SetUsernameRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this set username request timeout response has a 5xx status code
func (o *SetUsernameRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this set username request timeout response a status code equal to that given
func (o *SetUsernameRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the set username request timeout response
func (o *SetUsernameRequestTimeout) Code() int {
	return 408
}

func (o *SetUsernameRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/login/username][%d] setUsernameRequestTimeout ", 408)
}

func (o *SetUsernameRequestTimeout) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/login/username][%d] setUsernameRequestTimeout ", 408)
}

func (o *SetUsernameRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSetUsernameUnprocessableEntity creates a SetUsernameUnprocessableEntity with default headers values
func NewSetUsernameUnprocessableEntity() *SetUsernameUnprocessableEntity {
	return &SetUsernameUnprocessableEntity{}
}

/*
SetUsernameUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type SetUsernameUnprocessableEntity struct {
}

// IsSuccess returns true when this set username unprocessable entity response has a 2xx status code
func (o *SetUsernameUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set username unprocessable entity response has a 3xx status code
func (o *SetUsernameUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set username unprocessable entity response has a 4xx status code
func (o *SetUsernameUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this set username unprocessable entity response has a 5xx status code
func (o *SetUsernameUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this set username unprocessable entity response a status code equal to that given
func (o *SetUsernameUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the set username unprocessable entity response
func (o *SetUsernameUnprocessableEntity) Code() int {
	return 422
}

func (o *SetUsernameUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/login/username][%d] setUsernameUnprocessableEntity ", 422)
}

func (o *SetUsernameUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/login/username][%d] setUsernameUnprocessableEntity ", 422)
}

func (o *SetUsernameUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
