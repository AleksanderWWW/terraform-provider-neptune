// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"terraform-provider-neptune/internal/neptune/models"
)

// UpdateProjectReader is a Reader for the UpdateProject structure.
type UpdateProjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateProjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateProjectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateProjectBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateProjectUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateProjectForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateProjectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewUpdateProjectRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateProjectUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /api/backend/v1/projects] updateProject", response, response.Code())
	}
}

// NewUpdateProjectOK creates a UpdateProjectOK with default headers values
func NewUpdateProjectOK() *UpdateProjectOK {
	return &UpdateProjectOK{}
}

/*
UpdateProjectOK describes a response with status code 200, with default header values.

OK
*/
type UpdateProjectOK struct {
	Payload *models.ProjectWithRoleDTO
}

// IsSuccess returns true when this update project o k response has a 2xx status code
func (o *UpdateProjectOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update project o k response has a 3xx status code
func (o *UpdateProjectOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project o k response has a 4xx status code
func (o *UpdateProjectOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update project o k response has a 5xx status code
func (o *UpdateProjectOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update project o k response a status code equal to that given
func (o *UpdateProjectOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update project o k response
func (o *UpdateProjectOK) Code() int {
	return 200
}

func (o *UpdateProjectOK) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects][%d] updateProjectOK  %+v", 200, o.Payload)
}

func (o *UpdateProjectOK) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects][%d] updateProjectOK  %+v", 200, o.Payload)
}

func (o *UpdateProjectOK) GetPayload() *models.ProjectWithRoleDTO {
	return o.Payload
}

func (o *UpdateProjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProjectWithRoleDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateProjectBadRequest creates a UpdateProjectBadRequest with default headers values
func NewUpdateProjectBadRequest() *UpdateProjectBadRequest {
	return &UpdateProjectBadRequest{}
}

/*
UpdateProjectBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateProjectBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update project bad request response has a 2xx status code
func (o *UpdateProjectBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project bad request response has a 3xx status code
func (o *UpdateProjectBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project bad request response has a 4xx status code
func (o *UpdateProjectBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project bad request response has a 5xx status code
func (o *UpdateProjectBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update project bad request response a status code equal to that given
func (o *UpdateProjectBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update project bad request response
func (o *UpdateProjectBadRequest) Code() int {
	return 400
}

func (o *UpdateProjectBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects][%d] updateProjectBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateProjectBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects][%d] updateProjectBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateProjectBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateProjectBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateProjectUnauthorized creates a UpdateProjectUnauthorized with default headers values
func NewUpdateProjectUnauthorized() *UpdateProjectUnauthorized {
	return &UpdateProjectUnauthorized{}
}

/*
UpdateProjectUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateProjectUnauthorized struct {
}

// IsSuccess returns true when this update project unauthorized response has a 2xx status code
func (o *UpdateProjectUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project unauthorized response has a 3xx status code
func (o *UpdateProjectUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project unauthorized response has a 4xx status code
func (o *UpdateProjectUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project unauthorized response has a 5xx status code
func (o *UpdateProjectUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update project unauthorized response a status code equal to that given
func (o *UpdateProjectUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update project unauthorized response
func (o *UpdateProjectUnauthorized) Code() int {
	return 401
}

func (o *UpdateProjectUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects][%d] updateProjectUnauthorized ", 401)
}

func (o *UpdateProjectUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects][%d] updateProjectUnauthorized ", 401)
}

func (o *UpdateProjectUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectForbidden creates a UpdateProjectForbidden with default headers values
func NewUpdateProjectForbidden() *UpdateProjectForbidden {
	return &UpdateProjectForbidden{}
}

/*
UpdateProjectForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateProjectForbidden struct {
}

// IsSuccess returns true when this update project forbidden response has a 2xx status code
func (o *UpdateProjectForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project forbidden response has a 3xx status code
func (o *UpdateProjectForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project forbidden response has a 4xx status code
func (o *UpdateProjectForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project forbidden response has a 5xx status code
func (o *UpdateProjectForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update project forbidden response a status code equal to that given
func (o *UpdateProjectForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update project forbidden response
func (o *UpdateProjectForbidden) Code() int {
	return 403
}

func (o *UpdateProjectForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects][%d] updateProjectForbidden ", 403)
}

func (o *UpdateProjectForbidden) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects][%d] updateProjectForbidden ", 403)
}

func (o *UpdateProjectForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectNotFound creates a UpdateProjectNotFound with default headers values
func NewUpdateProjectNotFound() *UpdateProjectNotFound {
	return &UpdateProjectNotFound{}
}

/*
UpdateProjectNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateProjectNotFound struct {
}

// IsSuccess returns true when this update project not found response has a 2xx status code
func (o *UpdateProjectNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project not found response has a 3xx status code
func (o *UpdateProjectNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project not found response has a 4xx status code
func (o *UpdateProjectNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project not found response has a 5xx status code
func (o *UpdateProjectNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update project not found response a status code equal to that given
func (o *UpdateProjectNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update project not found response
func (o *UpdateProjectNotFound) Code() int {
	return 404
}

func (o *UpdateProjectNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects][%d] updateProjectNotFound ", 404)
}

func (o *UpdateProjectNotFound) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects][%d] updateProjectNotFound ", 404)
}

func (o *UpdateProjectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectRequestTimeout creates a UpdateProjectRequestTimeout with default headers values
func NewUpdateProjectRequestTimeout() *UpdateProjectRequestTimeout {
	return &UpdateProjectRequestTimeout{}
}

/*
UpdateProjectRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type UpdateProjectRequestTimeout struct {
}

// IsSuccess returns true when this update project request timeout response has a 2xx status code
func (o *UpdateProjectRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project request timeout response has a 3xx status code
func (o *UpdateProjectRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project request timeout response has a 4xx status code
func (o *UpdateProjectRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project request timeout response has a 5xx status code
func (o *UpdateProjectRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this update project request timeout response a status code equal to that given
func (o *UpdateProjectRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the update project request timeout response
func (o *UpdateProjectRequestTimeout) Code() int {
	return 408
}

func (o *UpdateProjectRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects][%d] updateProjectRequestTimeout ", 408)
}

func (o *UpdateProjectRequestTimeout) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects][%d] updateProjectRequestTimeout ", 408)
}

func (o *UpdateProjectRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectUnprocessableEntity creates a UpdateProjectUnprocessableEntity with default headers values
func NewUpdateProjectUnprocessableEntity() *UpdateProjectUnprocessableEntity {
	return &UpdateProjectUnprocessableEntity{}
}

/*
UpdateProjectUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type UpdateProjectUnprocessableEntity struct {
}

// IsSuccess returns true when this update project unprocessable entity response has a 2xx status code
func (o *UpdateProjectUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project unprocessable entity response has a 3xx status code
func (o *UpdateProjectUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project unprocessable entity response has a 4xx status code
func (o *UpdateProjectUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project unprocessable entity response has a 5xx status code
func (o *UpdateProjectUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update project unprocessable entity response a status code equal to that given
func (o *UpdateProjectUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update project unprocessable entity response
func (o *UpdateProjectUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateProjectUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects][%d] updateProjectUnprocessableEntity ", 422)
}

func (o *UpdateProjectUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects][%d] updateProjectUnprocessableEntity ", 422)
}

func (o *UpdateProjectUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
