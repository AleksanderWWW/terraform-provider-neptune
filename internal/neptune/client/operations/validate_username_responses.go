// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// ValidateUsernameReader is a Reader for the ValidateUsername structure.
type ValidateUsernameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ValidateUsernameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewValidateUsernameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewValidateUsernameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewValidateUsernameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewValidateUsernameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewValidateUsernameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewValidateUsernameRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewValidateUsernameUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/backend/v1/login/username/validate] validateUsername", response, response.Code())
	}
}

// NewValidateUsernameOK creates a ValidateUsernameOK with default headers values
func NewValidateUsernameOK() *ValidateUsernameOK {
	return &ValidateUsernameOK{}
}

/*
ValidateUsernameOK describes a response with status code 200, with default header values.

OK
*/
type ValidateUsernameOK struct {
	Payload *models.UsernameValidationStatusDTO
}

// IsSuccess returns true when this validate username o k response has a 2xx status code
func (o *ValidateUsernameOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this validate username o k response has a 3xx status code
func (o *ValidateUsernameOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate username o k response has a 4xx status code
func (o *ValidateUsernameOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate username o k response has a 5xx status code
func (o *ValidateUsernameOK) IsServerError() bool {
	return false
}

// IsCode returns true when this validate username o k response a status code equal to that given
func (o *ValidateUsernameOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the validate username o k response
func (o *ValidateUsernameOK) Code() int {
	return 200
}

func (o *ValidateUsernameOK) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/login/username/validate][%d] validateUsernameOK  %+v", 200, o.Payload)
}

func (o *ValidateUsernameOK) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/login/username/validate][%d] validateUsernameOK  %+v", 200, o.Payload)
}

func (o *ValidateUsernameOK) GetPayload() *models.UsernameValidationStatusDTO {
	return o.Payload
}

func (o *ValidateUsernameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UsernameValidationStatusDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateUsernameBadRequest creates a ValidateUsernameBadRequest with default headers values
func NewValidateUsernameBadRequest() *ValidateUsernameBadRequest {
	return &ValidateUsernameBadRequest{}
}

/*
ValidateUsernameBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ValidateUsernameBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this validate username bad request response has a 2xx status code
func (o *ValidateUsernameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate username bad request response has a 3xx status code
func (o *ValidateUsernameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate username bad request response has a 4xx status code
func (o *ValidateUsernameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate username bad request response has a 5xx status code
func (o *ValidateUsernameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this validate username bad request response a status code equal to that given
func (o *ValidateUsernameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the validate username bad request response
func (o *ValidateUsernameBadRequest) Code() int {
	return 400
}

func (o *ValidateUsernameBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/login/username/validate][%d] validateUsernameBadRequest  %+v", 400, o.Payload)
}

func (o *ValidateUsernameBadRequest) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/login/username/validate][%d] validateUsernameBadRequest  %+v", 400, o.Payload)
}

func (o *ValidateUsernameBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ValidateUsernameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateUsernameUnauthorized creates a ValidateUsernameUnauthorized with default headers values
func NewValidateUsernameUnauthorized() *ValidateUsernameUnauthorized {
	return &ValidateUsernameUnauthorized{}
}

/*
ValidateUsernameUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ValidateUsernameUnauthorized struct {
}

// IsSuccess returns true when this validate username unauthorized response has a 2xx status code
func (o *ValidateUsernameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate username unauthorized response has a 3xx status code
func (o *ValidateUsernameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate username unauthorized response has a 4xx status code
func (o *ValidateUsernameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate username unauthorized response has a 5xx status code
func (o *ValidateUsernameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this validate username unauthorized response a status code equal to that given
func (o *ValidateUsernameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the validate username unauthorized response
func (o *ValidateUsernameUnauthorized) Code() int {
	return 401
}

func (o *ValidateUsernameUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/login/username/validate][%d] validateUsernameUnauthorized ", 401)
}

func (o *ValidateUsernameUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/login/username/validate][%d] validateUsernameUnauthorized ", 401)
}

func (o *ValidateUsernameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewValidateUsernameForbidden creates a ValidateUsernameForbidden with default headers values
func NewValidateUsernameForbidden() *ValidateUsernameForbidden {
	return &ValidateUsernameForbidden{}
}

/*
ValidateUsernameForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ValidateUsernameForbidden struct {
}

// IsSuccess returns true when this validate username forbidden response has a 2xx status code
func (o *ValidateUsernameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate username forbidden response has a 3xx status code
func (o *ValidateUsernameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate username forbidden response has a 4xx status code
func (o *ValidateUsernameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate username forbidden response has a 5xx status code
func (o *ValidateUsernameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this validate username forbidden response a status code equal to that given
func (o *ValidateUsernameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the validate username forbidden response
func (o *ValidateUsernameForbidden) Code() int {
	return 403
}

func (o *ValidateUsernameForbidden) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/login/username/validate][%d] validateUsernameForbidden ", 403)
}

func (o *ValidateUsernameForbidden) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/login/username/validate][%d] validateUsernameForbidden ", 403)
}

func (o *ValidateUsernameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewValidateUsernameNotFound creates a ValidateUsernameNotFound with default headers values
func NewValidateUsernameNotFound() *ValidateUsernameNotFound {
	return &ValidateUsernameNotFound{}
}

/*
ValidateUsernameNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ValidateUsernameNotFound struct {
}

// IsSuccess returns true when this validate username not found response has a 2xx status code
func (o *ValidateUsernameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate username not found response has a 3xx status code
func (o *ValidateUsernameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate username not found response has a 4xx status code
func (o *ValidateUsernameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate username not found response has a 5xx status code
func (o *ValidateUsernameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this validate username not found response a status code equal to that given
func (o *ValidateUsernameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the validate username not found response
func (o *ValidateUsernameNotFound) Code() int {
	return 404
}

func (o *ValidateUsernameNotFound) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/login/username/validate][%d] validateUsernameNotFound ", 404)
}

func (o *ValidateUsernameNotFound) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/login/username/validate][%d] validateUsernameNotFound ", 404)
}

func (o *ValidateUsernameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewValidateUsernameRequestTimeout creates a ValidateUsernameRequestTimeout with default headers values
func NewValidateUsernameRequestTimeout() *ValidateUsernameRequestTimeout {
	return &ValidateUsernameRequestTimeout{}
}

/*
ValidateUsernameRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type ValidateUsernameRequestTimeout struct {
}

// IsSuccess returns true when this validate username request timeout response has a 2xx status code
func (o *ValidateUsernameRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate username request timeout response has a 3xx status code
func (o *ValidateUsernameRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate username request timeout response has a 4xx status code
func (o *ValidateUsernameRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate username request timeout response has a 5xx status code
func (o *ValidateUsernameRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this validate username request timeout response a status code equal to that given
func (o *ValidateUsernameRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the validate username request timeout response
func (o *ValidateUsernameRequestTimeout) Code() int {
	return 408
}

func (o *ValidateUsernameRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/login/username/validate][%d] validateUsernameRequestTimeout ", 408)
}

func (o *ValidateUsernameRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/login/username/validate][%d] validateUsernameRequestTimeout ", 408)
}

func (o *ValidateUsernameRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewValidateUsernameUnprocessableEntity creates a ValidateUsernameUnprocessableEntity with default headers values
func NewValidateUsernameUnprocessableEntity() *ValidateUsernameUnprocessableEntity {
	return &ValidateUsernameUnprocessableEntity{}
}

/*
ValidateUsernameUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type ValidateUsernameUnprocessableEntity struct {
}

// IsSuccess returns true when this validate username unprocessable entity response has a 2xx status code
func (o *ValidateUsernameUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate username unprocessable entity response has a 3xx status code
func (o *ValidateUsernameUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate username unprocessable entity response has a 4xx status code
func (o *ValidateUsernameUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate username unprocessable entity response has a 5xx status code
func (o *ValidateUsernameUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this validate username unprocessable entity response a status code equal to that given
func (o *ValidateUsernameUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the validate username unprocessable entity response
func (o *ValidateUsernameUnprocessableEntity) Code() int {
	return 422
}

func (o *ValidateUsernameUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/login/username/validate][%d] validateUsernameUnprocessableEntity ", 422)
}

func (o *ValidateUsernameUnprocessableEntity) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/login/username/validate][%d] validateUsernameUnprocessableEntity ", 422)
}

func (o *ValidateUsernameUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
