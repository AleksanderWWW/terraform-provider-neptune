// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"terraform-provider-neptune/internal/neptune/models"
)

// ConfigInfoGetReader is a Reader for the ConfigInfoGet structure.
type ConfigInfoGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ConfigInfoGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewConfigInfoGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewConfigInfoGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewConfigInfoGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewConfigInfoGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewConfigInfoGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewConfigInfoGetRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewConfigInfoGetUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/backend/v1/configInfo] configInfoGet", response, response.Code())
	}
}

// NewConfigInfoGetOK creates a ConfigInfoGetOK with default headers values
func NewConfigInfoGetOK() *ConfigInfoGetOK {
	return &ConfigInfoGetOK{}
}

/*
ConfigInfoGetOK describes a response with status code 200, with default header values.

OK
*/
type ConfigInfoGetOK struct {
	Payload *models.ConfigInfo
}

// IsSuccess returns true when this config info get o k response has a 2xx status code
func (o *ConfigInfoGetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this config info get o k response has a 3xx status code
func (o *ConfigInfoGetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this config info get o k response has a 4xx status code
func (o *ConfigInfoGetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this config info get o k response has a 5xx status code
func (o *ConfigInfoGetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this config info get o k response a status code equal to that given
func (o *ConfigInfoGetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the config info get o k response
func (o *ConfigInfoGetOK) Code() int {
	return 200
}

func (o *ConfigInfoGetOK) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/configInfo][%d] configInfoGetOK  %+v", 200, o.Payload)
}

func (o *ConfigInfoGetOK) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/configInfo][%d] configInfoGetOK  %+v", 200, o.Payload)
}

func (o *ConfigInfoGetOK) GetPayload() *models.ConfigInfo {
	return o.Payload
}

func (o *ConfigInfoGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConfigInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfigInfoGetBadRequest creates a ConfigInfoGetBadRequest with default headers values
func NewConfigInfoGetBadRequest() *ConfigInfoGetBadRequest {
	return &ConfigInfoGetBadRequest{}
}

/*
ConfigInfoGetBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ConfigInfoGetBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this config info get bad request response has a 2xx status code
func (o *ConfigInfoGetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this config info get bad request response has a 3xx status code
func (o *ConfigInfoGetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this config info get bad request response has a 4xx status code
func (o *ConfigInfoGetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this config info get bad request response has a 5xx status code
func (o *ConfigInfoGetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this config info get bad request response a status code equal to that given
func (o *ConfigInfoGetBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the config info get bad request response
func (o *ConfigInfoGetBadRequest) Code() int {
	return 400
}

func (o *ConfigInfoGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/configInfo][%d] configInfoGetBadRequest  %+v", 400, o.Payload)
}

func (o *ConfigInfoGetBadRequest) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/configInfo][%d] configInfoGetBadRequest  %+v", 400, o.Payload)
}

func (o *ConfigInfoGetBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ConfigInfoGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfigInfoGetUnauthorized creates a ConfigInfoGetUnauthorized with default headers values
func NewConfigInfoGetUnauthorized() *ConfigInfoGetUnauthorized {
	return &ConfigInfoGetUnauthorized{}
}

/*
ConfigInfoGetUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ConfigInfoGetUnauthorized struct {
}

// IsSuccess returns true when this config info get unauthorized response has a 2xx status code
func (o *ConfigInfoGetUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this config info get unauthorized response has a 3xx status code
func (o *ConfigInfoGetUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this config info get unauthorized response has a 4xx status code
func (o *ConfigInfoGetUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this config info get unauthorized response has a 5xx status code
func (o *ConfigInfoGetUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this config info get unauthorized response a status code equal to that given
func (o *ConfigInfoGetUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the config info get unauthorized response
func (o *ConfigInfoGetUnauthorized) Code() int {
	return 401
}

func (o *ConfigInfoGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/configInfo][%d] configInfoGetUnauthorized ", 401)
}

func (o *ConfigInfoGetUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/configInfo][%d] configInfoGetUnauthorized ", 401)
}

func (o *ConfigInfoGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewConfigInfoGetForbidden creates a ConfigInfoGetForbidden with default headers values
func NewConfigInfoGetForbidden() *ConfigInfoGetForbidden {
	return &ConfigInfoGetForbidden{}
}

/*
ConfigInfoGetForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ConfigInfoGetForbidden struct {
}

// IsSuccess returns true when this config info get forbidden response has a 2xx status code
func (o *ConfigInfoGetForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this config info get forbidden response has a 3xx status code
func (o *ConfigInfoGetForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this config info get forbidden response has a 4xx status code
func (o *ConfigInfoGetForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this config info get forbidden response has a 5xx status code
func (o *ConfigInfoGetForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this config info get forbidden response a status code equal to that given
func (o *ConfigInfoGetForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the config info get forbidden response
func (o *ConfigInfoGetForbidden) Code() int {
	return 403
}

func (o *ConfigInfoGetForbidden) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/configInfo][%d] configInfoGetForbidden ", 403)
}

func (o *ConfigInfoGetForbidden) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/configInfo][%d] configInfoGetForbidden ", 403)
}

func (o *ConfigInfoGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewConfigInfoGetNotFound creates a ConfigInfoGetNotFound with default headers values
func NewConfigInfoGetNotFound() *ConfigInfoGetNotFound {
	return &ConfigInfoGetNotFound{}
}

/*
ConfigInfoGetNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ConfigInfoGetNotFound struct {
}

// IsSuccess returns true when this config info get not found response has a 2xx status code
func (o *ConfigInfoGetNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this config info get not found response has a 3xx status code
func (o *ConfigInfoGetNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this config info get not found response has a 4xx status code
func (o *ConfigInfoGetNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this config info get not found response has a 5xx status code
func (o *ConfigInfoGetNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this config info get not found response a status code equal to that given
func (o *ConfigInfoGetNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the config info get not found response
func (o *ConfigInfoGetNotFound) Code() int {
	return 404
}

func (o *ConfigInfoGetNotFound) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/configInfo][%d] configInfoGetNotFound ", 404)
}

func (o *ConfigInfoGetNotFound) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/configInfo][%d] configInfoGetNotFound ", 404)
}

func (o *ConfigInfoGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewConfigInfoGetRequestTimeout creates a ConfigInfoGetRequestTimeout with default headers values
func NewConfigInfoGetRequestTimeout() *ConfigInfoGetRequestTimeout {
	return &ConfigInfoGetRequestTimeout{}
}

/*
ConfigInfoGetRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type ConfigInfoGetRequestTimeout struct {
}

// IsSuccess returns true when this config info get request timeout response has a 2xx status code
func (o *ConfigInfoGetRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this config info get request timeout response has a 3xx status code
func (o *ConfigInfoGetRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this config info get request timeout response has a 4xx status code
func (o *ConfigInfoGetRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this config info get request timeout response has a 5xx status code
func (o *ConfigInfoGetRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this config info get request timeout response a status code equal to that given
func (o *ConfigInfoGetRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the config info get request timeout response
func (o *ConfigInfoGetRequestTimeout) Code() int {
	return 408
}

func (o *ConfigInfoGetRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/configInfo][%d] configInfoGetRequestTimeout ", 408)
}

func (o *ConfigInfoGetRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/configInfo][%d] configInfoGetRequestTimeout ", 408)
}

func (o *ConfigInfoGetRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewConfigInfoGetUnprocessableEntity creates a ConfigInfoGetUnprocessableEntity with default headers values
func NewConfigInfoGetUnprocessableEntity() *ConfigInfoGetUnprocessableEntity {
	return &ConfigInfoGetUnprocessableEntity{}
}

/*
ConfigInfoGetUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type ConfigInfoGetUnprocessableEntity struct {
}

// IsSuccess returns true when this config info get unprocessable entity response has a 2xx status code
func (o *ConfigInfoGetUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this config info get unprocessable entity response has a 3xx status code
func (o *ConfigInfoGetUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this config info get unprocessable entity response has a 4xx status code
func (o *ConfigInfoGetUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this config info get unprocessable entity response has a 5xx status code
func (o *ConfigInfoGetUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this config info get unprocessable entity response a status code equal to that given
func (o *ConfigInfoGetUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the config info get unprocessable entity response
func (o *ConfigInfoGetUnprocessableEntity) Code() int {
	return 422
}

func (o *ConfigInfoGetUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/configInfo][%d] configInfoGetUnprocessableEntity ", 422)
}

func (o *ConfigInfoGetUnprocessableEntity) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/configInfo][%d] configInfoGetUnprocessableEntity ", 422)
}

func (o *ConfigInfoGetUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
