// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// StatusGetReader is a Reader for the StatusGet structure.
type StatusGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StatusGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStatusGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStatusGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewStatusGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStatusGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStatusGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewStatusGetRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewStatusGetUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/backend/status] statusGet", response, response.Code())
	}
}

// NewStatusGetOK creates a StatusGetOK with default headers values
func NewStatusGetOK() *StatusGetOK {
	return &StatusGetOK{}
}

/*
StatusGetOK describes a response with status code 200, with default header values.

OK
*/
type StatusGetOK struct {
	Payload models.Status
}

// IsSuccess returns true when this status get o k response has a 2xx status code
func (o *StatusGetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this status get o k response has a 3xx status code
func (o *StatusGetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this status get o k response has a 4xx status code
func (o *StatusGetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this status get o k response has a 5xx status code
func (o *StatusGetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this status get o k response a status code equal to that given
func (o *StatusGetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the status get o k response
func (o *StatusGetOK) Code() int {
	return 200
}

func (o *StatusGetOK) Error() string {
	return fmt.Sprintf("[GET /api/backend/status][%d] statusGetOK  %+v", 200, o.Payload)
}

func (o *StatusGetOK) String() string {
	return fmt.Sprintf("[GET /api/backend/status][%d] statusGetOK  %+v", 200, o.Payload)
}

func (o *StatusGetOK) GetPayload() models.Status {
	return o.Payload
}

func (o *StatusGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStatusGetBadRequest creates a StatusGetBadRequest with default headers values
func NewStatusGetBadRequest() *StatusGetBadRequest {
	return &StatusGetBadRequest{}
}

/*
StatusGetBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type StatusGetBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this status get bad request response has a 2xx status code
func (o *StatusGetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this status get bad request response has a 3xx status code
func (o *StatusGetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this status get bad request response has a 4xx status code
func (o *StatusGetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this status get bad request response has a 5xx status code
func (o *StatusGetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this status get bad request response a status code equal to that given
func (o *StatusGetBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the status get bad request response
func (o *StatusGetBadRequest) Code() int {
	return 400
}

func (o *StatusGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/backend/status][%d] statusGetBadRequest  %+v", 400, o.Payload)
}

func (o *StatusGetBadRequest) String() string {
	return fmt.Sprintf("[GET /api/backend/status][%d] statusGetBadRequest  %+v", 400, o.Payload)
}

func (o *StatusGetBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *StatusGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStatusGetUnauthorized creates a StatusGetUnauthorized with default headers values
func NewStatusGetUnauthorized() *StatusGetUnauthorized {
	return &StatusGetUnauthorized{}
}

/*
StatusGetUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type StatusGetUnauthorized struct {
}

// IsSuccess returns true when this status get unauthorized response has a 2xx status code
func (o *StatusGetUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this status get unauthorized response has a 3xx status code
func (o *StatusGetUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this status get unauthorized response has a 4xx status code
func (o *StatusGetUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this status get unauthorized response has a 5xx status code
func (o *StatusGetUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this status get unauthorized response a status code equal to that given
func (o *StatusGetUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the status get unauthorized response
func (o *StatusGetUnauthorized) Code() int {
	return 401
}

func (o *StatusGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/backend/status][%d] statusGetUnauthorized ", 401)
}

func (o *StatusGetUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/backend/status][%d] statusGetUnauthorized ", 401)
}

func (o *StatusGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStatusGetForbidden creates a StatusGetForbidden with default headers values
func NewStatusGetForbidden() *StatusGetForbidden {
	return &StatusGetForbidden{}
}

/*
StatusGetForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type StatusGetForbidden struct {
}

// IsSuccess returns true when this status get forbidden response has a 2xx status code
func (o *StatusGetForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this status get forbidden response has a 3xx status code
func (o *StatusGetForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this status get forbidden response has a 4xx status code
func (o *StatusGetForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this status get forbidden response has a 5xx status code
func (o *StatusGetForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this status get forbidden response a status code equal to that given
func (o *StatusGetForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the status get forbidden response
func (o *StatusGetForbidden) Code() int {
	return 403
}

func (o *StatusGetForbidden) Error() string {
	return fmt.Sprintf("[GET /api/backend/status][%d] statusGetForbidden ", 403)
}

func (o *StatusGetForbidden) String() string {
	return fmt.Sprintf("[GET /api/backend/status][%d] statusGetForbidden ", 403)
}

func (o *StatusGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStatusGetNotFound creates a StatusGetNotFound with default headers values
func NewStatusGetNotFound() *StatusGetNotFound {
	return &StatusGetNotFound{}
}

/*
StatusGetNotFound describes a response with status code 404, with default header values.

Not Found
*/
type StatusGetNotFound struct {
}

// IsSuccess returns true when this status get not found response has a 2xx status code
func (o *StatusGetNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this status get not found response has a 3xx status code
func (o *StatusGetNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this status get not found response has a 4xx status code
func (o *StatusGetNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this status get not found response has a 5xx status code
func (o *StatusGetNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this status get not found response a status code equal to that given
func (o *StatusGetNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the status get not found response
func (o *StatusGetNotFound) Code() int {
	return 404
}

func (o *StatusGetNotFound) Error() string {
	return fmt.Sprintf("[GET /api/backend/status][%d] statusGetNotFound ", 404)
}

func (o *StatusGetNotFound) String() string {
	return fmt.Sprintf("[GET /api/backend/status][%d] statusGetNotFound ", 404)
}

func (o *StatusGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStatusGetRequestTimeout creates a StatusGetRequestTimeout with default headers values
func NewStatusGetRequestTimeout() *StatusGetRequestTimeout {
	return &StatusGetRequestTimeout{}
}

/*
StatusGetRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type StatusGetRequestTimeout struct {
}

// IsSuccess returns true when this status get request timeout response has a 2xx status code
func (o *StatusGetRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this status get request timeout response has a 3xx status code
func (o *StatusGetRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this status get request timeout response has a 4xx status code
func (o *StatusGetRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this status get request timeout response has a 5xx status code
func (o *StatusGetRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this status get request timeout response a status code equal to that given
func (o *StatusGetRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the status get request timeout response
func (o *StatusGetRequestTimeout) Code() int {
	return 408
}

func (o *StatusGetRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/backend/status][%d] statusGetRequestTimeout ", 408)
}

func (o *StatusGetRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/backend/status][%d] statusGetRequestTimeout ", 408)
}

func (o *StatusGetRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStatusGetUnprocessableEntity creates a StatusGetUnprocessableEntity with default headers values
func NewStatusGetUnprocessableEntity() *StatusGetUnprocessableEntity {
	return &StatusGetUnprocessableEntity{}
}

/*
StatusGetUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type StatusGetUnprocessableEntity struct {
}

// IsSuccess returns true when this status get unprocessable entity response has a 2xx status code
func (o *StatusGetUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this status get unprocessable entity response has a 3xx status code
func (o *StatusGetUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this status get unprocessable entity response has a 4xx status code
func (o *StatusGetUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this status get unprocessable entity response has a 5xx status code
func (o *StatusGetUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this status get unprocessable entity response a status code equal to that given
func (o *StatusGetUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the status get unprocessable entity response
func (o *StatusGetUnprocessableEntity) Code() int {
	return 422
}

func (o *StatusGetUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /api/backend/status][%d] statusGetUnprocessableEntity ", 422)
}

func (o *StatusGetUnprocessableEntity) String() string {
	return fmt.Sprintf("[GET /api/backend/status][%d] statusGetUnprocessableEntity ", 422)
}

func (o *StatusGetUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
