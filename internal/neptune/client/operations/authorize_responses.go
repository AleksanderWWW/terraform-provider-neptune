// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// AuthorizeReader is a Reader for the Authorize structure.
type AuthorizeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AuthorizeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAuthorizeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAuthorizeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAuthorizeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAuthorizeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAuthorizeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewAuthorizeRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewAuthorizeUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/backend/v1/authorization/authorize] authorize", response, response.Code())
	}
}

// NewAuthorizeOK creates a AuthorizeOK with default headers values
func NewAuthorizeOK() *AuthorizeOK {
	return &AuthorizeOK{}
}

/*
AuthorizeOK describes a response with status code 200, with default header values.

OK
*/
type AuthorizeOK struct {
	Payload *models.AuthorizedUserDTO
}

// IsSuccess returns true when this authorize o k response has a 2xx status code
func (o *AuthorizeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this authorize o k response has a 3xx status code
func (o *AuthorizeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this authorize o k response has a 4xx status code
func (o *AuthorizeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this authorize o k response has a 5xx status code
func (o *AuthorizeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this authorize o k response a status code equal to that given
func (o *AuthorizeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the authorize o k response
func (o *AuthorizeOK) Code() int {
	return 200
}

func (o *AuthorizeOK) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/authorization/authorize][%d] authorizeOK  %+v", 200, o.Payload)
}

func (o *AuthorizeOK) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/authorization/authorize][%d] authorizeOK  %+v", 200, o.Payload)
}

func (o *AuthorizeOK) GetPayload() *models.AuthorizedUserDTO {
	return o.Payload
}

func (o *AuthorizeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthorizedUserDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthorizeBadRequest creates a AuthorizeBadRequest with default headers values
func NewAuthorizeBadRequest() *AuthorizeBadRequest {
	return &AuthorizeBadRequest{}
}

/*
AuthorizeBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AuthorizeBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this authorize bad request response has a 2xx status code
func (o *AuthorizeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this authorize bad request response has a 3xx status code
func (o *AuthorizeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this authorize bad request response has a 4xx status code
func (o *AuthorizeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this authorize bad request response has a 5xx status code
func (o *AuthorizeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this authorize bad request response a status code equal to that given
func (o *AuthorizeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the authorize bad request response
func (o *AuthorizeBadRequest) Code() int {
	return 400
}

func (o *AuthorizeBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/authorization/authorize][%d] authorizeBadRequest  %+v", 400, o.Payload)
}

func (o *AuthorizeBadRequest) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/authorization/authorize][%d] authorizeBadRequest  %+v", 400, o.Payload)
}

func (o *AuthorizeBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *AuthorizeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthorizeUnauthorized creates a AuthorizeUnauthorized with default headers values
func NewAuthorizeUnauthorized() *AuthorizeUnauthorized {
	return &AuthorizeUnauthorized{}
}

/*
AuthorizeUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AuthorizeUnauthorized struct {
}

// IsSuccess returns true when this authorize unauthorized response has a 2xx status code
func (o *AuthorizeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this authorize unauthorized response has a 3xx status code
func (o *AuthorizeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this authorize unauthorized response has a 4xx status code
func (o *AuthorizeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this authorize unauthorized response has a 5xx status code
func (o *AuthorizeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this authorize unauthorized response a status code equal to that given
func (o *AuthorizeUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the authorize unauthorized response
func (o *AuthorizeUnauthorized) Code() int {
	return 401
}

func (o *AuthorizeUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/authorization/authorize][%d] authorizeUnauthorized ", 401)
}

func (o *AuthorizeUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/authorization/authorize][%d] authorizeUnauthorized ", 401)
}

func (o *AuthorizeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAuthorizeForbidden creates a AuthorizeForbidden with default headers values
func NewAuthorizeForbidden() *AuthorizeForbidden {
	return &AuthorizeForbidden{}
}

/*
AuthorizeForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AuthorizeForbidden struct {
}

// IsSuccess returns true when this authorize forbidden response has a 2xx status code
func (o *AuthorizeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this authorize forbidden response has a 3xx status code
func (o *AuthorizeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this authorize forbidden response has a 4xx status code
func (o *AuthorizeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this authorize forbidden response has a 5xx status code
func (o *AuthorizeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this authorize forbidden response a status code equal to that given
func (o *AuthorizeForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the authorize forbidden response
func (o *AuthorizeForbidden) Code() int {
	return 403
}

func (o *AuthorizeForbidden) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/authorization/authorize][%d] authorizeForbidden ", 403)
}

func (o *AuthorizeForbidden) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/authorization/authorize][%d] authorizeForbidden ", 403)
}

func (o *AuthorizeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAuthorizeNotFound creates a AuthorizeNotFound with default headers values
func NewAuthorizeNotFound() *AuthorizeNotFound {
	return &AuthorizeNotFound{}
}

/*
AuthorizeNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AuthorizeNotFound struct {
}

// IsSuccess returns true when this authorize not found response has a 2xx status code
func (o *AuthorizeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this authorize not found response has a 3xx status code
func (o *AuthorizeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this authorize not found response has a 4xx status code
func (o *AuthorizeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this authorize not found response has a 5xx status code
func (o *AuthorizeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this authorize not found response a status code equal to that given
func (o *AuthorizeNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the authorize not found response
func (o *AuthorizeNotFound) Code() int {
	return 404
}

func (o *AuthorizeNotFound) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/authorization/authorize][%d] authorizeNotFound ", 404)
}

func (o *AuthorizeNotFound) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/authorization/authorize][%d] authorizeNotFound ", 404)
}

func (o *AuthorizeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAuthorizeRequestTimeout creates a AuthorizeRequestTimeout with default headers values
func NewAuthorizeRequestTimeout() *AuthorizeRequestTimeout {
	return &AuthorizeRequestTimeout{}
}

/*
AuthorizeRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type AuthorizeRequestTimeout struct {
}

// IsSuccess returns true when this authorize request timeout response has a 2xx status code
func (o *AuthorizeRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this authorize request timeout response has a 3xx status code
func (o *AuthorizeRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this authorize request timeout response has a 4xx status code
func (o *AuthorizeRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this authorize request timeout response has a 5xx status code
func (o *AuthorizeRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this authorize request timeout response a status code equal to that given
func (o *AuthorizeRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the authorize request timeout response
func (o *AuthorizeRequestTimeout) Code() int {
	return 408
}

func (o *AuthorizeRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/authorization/authorize][%d] authorizeRequestTimeout ", 408)
}

func (o *AuthorizeRequestTimeout) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/authorization/authorize][%d] authorizeRequestTimeout ", 408)
}

func (o *AuthorizeRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAuthorizeUnprocessableEntity creates a AuthorizeUnprocessableEntity with default headers values
func NewAuthorizeUnprocessableEntity() *AuthorizeUnprocessableEntity {
	return &AuthorizeUnprocessableEntity{}
}

/*
AuthorizeUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type AuthorizeUnprocessableEntity struct {
}

// IsSuccess returns true when this authorize unprocessable entity response has a 2xx status code
func (o *AuthorizeUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this authorize unprocessable entity response has a 3xx status code
func (o *AuthorizeUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this authorize unprocessable entity response has a 4xx status code
func (o *AuthorizeUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this authorize unprocessable entity response has a 5xx status code
func (o *AuthorizeUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this authorize unprocessable entity response a status code equal to that given
func (o *AuthorizeUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the authorize unprocessable entity response
func (o *AuthorizeUnprocessableEntity) Code() int {
	return 422
}

func (o *AuthorizeUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /api/backend/v1/authorization/authorize][%d] authorizeUnprocessableEntity ", 422)
}

func (o *AuthorizeUnprocessableEntity) String() string {
	return fmt.Sprintf("[GET /api/backend/v1/authorization/authorize][%d] authorizeUnprocessableEntity ", 422)
}

func (o *AuthorizeUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
