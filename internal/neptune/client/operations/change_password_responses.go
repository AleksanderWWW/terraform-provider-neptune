// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// ChangePasswordReader is a Reader for the ChangePassword structure.
type ChangePasswordReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ChangePasswordReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewChangePasswordOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewChangePasswordBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewChangePasswordUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewChangePasswordForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewChangePasswordNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewChangePasswordRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewChangePasswordUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /api/backend/v1/userProfile/password] changePassword", response, response.Code())
	}
}

// NewChangePasswordOK creates a ChangePasswordOK with default headers values
func NewChangePasswordOK() *ChangePasswordOK {
	return &ChangePasswordOK{}
}

/*
ChangePasswordOK describes a response with status code 200, with default header values.

OK
*/
type ChangePasswordOK struct {
	Payload *models.PasswordChangeDTO
}

// IsSuccess returns true when this change password o k response has a 2xx status code
func (o *ChangePasswordOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this change password o k response has a 3xx status code
func (o *ChangePasswordOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this change password o k response has a 4xx status code
func (o *ChangePasswordOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this change password o k response has a 5xx status code
func (o *ChangePasswordOK) IsServerError() bool {
	return false
}

// IsCode returns true when this change password o k response a status code equal to that given
func (o *ChangePasswordOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the change password o k response
func (o *ChangePasswordOK) Code() int {
	return 200
}

func (o *ChangePasswordOK) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/userProfile/password][%d] changePasswordOK  %+v", 200, o.Payload)
}

func (o *ChangePasswordOK) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/userProfile/password][%d] changePasswordOK  %+v", 200, o.Payload)
}

func (o *ChangePasswordOK) GetPayload() *models.PasswordChangeDTO {
	return o.Payload
}

func (o *ChangePasswordOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PasswordChangeDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangePasswordBadRequest creates a ChangePasswordBadRequest with default headers values
func NewChangePasswordBadRequest() *ChangePasswordBadRequest {
	return &ChangePasswordBadRequest{}
}

/*
ChangePasswordBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ChangePasswordBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this change password bad request response has a 2xx status code
func (o *ChangePasswordBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this change password bad request response has a 3xx status code
func (o *ChangePasswordBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this change password bad request response has a 4xx status code
func (o *ChangePasswordBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this change password bad request response has a 5xx status code
func (o *ChangePasswordBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this change password bad request response a status code equal to that given
func (o *ChangePasswordBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the change password bad request response
func (o *ChangePasswordBadRequest) Code() int {
	return 400
}

func (o *ChangePasswordBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/userProfile/password][%d] changePasswordBadRequest  %+v", 400, o.Payload)
}

func (o *ChangePasswordBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/userProfile/password][%d] changePasswordBadRequest  %+v", 400, o.Payload)
}

func (o *ChangePasswordBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ChangePasswordBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangePasswordUnauthorized creates a ChangePasswordUnauthorized with default headers values
func NewChangePasswordUnauthorized() *ChangePasswordUnauthorized {
	return &ChangePasswordUnauthorized{}
}

/*
ChangePasswordUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ChangePasswordUnauthorized struct {
}

// IsSuccess returns true when this change password unauthorized response has a 2xx status code
func (o *ChangePasswordUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this change password unauthorized response has a 3xx status code
func (o *ChangePasswordUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this change password unauthorized response has a 4xx status code
func (o *ChangePasswordUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this change password unauthorized response has a 5xx status code
func (o *ChangePasswordUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this change password unauthorized response a status code equal to that given
func (o *ChangePasswordUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the change password unauthorized response
func (o *ChangePasswordUnauthorized) Code() int {
	return 401
}

func (o *ChangePasswordUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/userProfile/password][%d] changePasswordUnauthorized ", 401)
}

func (o *ChangePasswordUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/userProfile/password][%d] changePasswordUnauthorized ", 401)
}

func (o *ChangePasswordUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewChangePasswordForbidden creates a ChangePasswordForbidden with default headers values
func NewChangePasswordForbidden() *ChangePasswordForbidden {
	return &ChangePasswordForbidden{}
}

/*
ChangePasswordForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ChangePasswordForbidden struct {
}

// IsSuccess returns true when this change password forbidden response has a 2xx status code
func (o *ChangePasswordForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this change password forbidden response has a 3xx status code
func (o *ChangePasswordForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this change password forbidden response has a 4xx status code
func (o *ChangePasswordForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this change password forbidden response has a 5xx status code
func (o *ChangePasswordForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this change password forbidden response a status code equal to that given
func (o *ChangePasswordForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the change password forbidden response
func (o *ChangePasswordForbidden) Code() int {
	return 403
}

func (o *ChangePasswordForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/userProfile/password][%d] changePasswordForbidden ", 403)
}

func (o *ChangePasswordForbidden) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/userProfile/password][%d] changePasswordForbidden ", 403)
}

func (o *ChangePasswordForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewChangePasswordNotFound creates a ChangePasswordNotFound with default headers values
func NewChangePasswordNotFound() *ChangePasswordNotFound {
	return &ChangePasswordNotFound{}
}

/*
ChangePasswordNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ChangePasswordNotFound struct {
}

// IsSuccess returns true when this change password not found response has a 2xx status code
func (o *ChangePasswordNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this change password not found response has a 3xx status code
func (o *ChangePasswordNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this change password not found response has a 4xx status code
func (o *ChangePasswordNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this change password not found response has a 5xx status code
func (o *ChangePasswordNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this change password not found response a status code equal to that given
func (o *ChangePasswordNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the change password not found response
func (o *ChangePasswordNotFound) Code() int {
	return 404
}

func (o *ChangePasswordNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/userProfile/password][%d] changePasswordNotFound ", 404)
}

func (o *ChangePasswordNotFound) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/userProfile/password][%d] changePasswordNotFound ", 404)
}

func (o *ChangePasswordNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewChangePasswordRequestTimeout creates a ChangePasswordRequestTimeout with default headers values
func NewChangePasswordRequestTimeout() *ChangePasswordRequestTimeout {
	return &ChangePasswordRequestTimeout{}
}

/*
ChangePasswordRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type ChangePasswordRequestTimeout struct {
}

// IsSuccess returns true when this change password request timeout response has a 2xx status code
func (o *ChangePasswordRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this change password request timeout response has a 3xx status code
func (o *ChangePasswordRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this change password request timeout response has a 4xx status code
func (o *ChangePasswordRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this change password request timeout response has a 5xx status code
func (o *ChangePasswordRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this change password request timeout response a status code equal to that given
func (o *ChangePasswordRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the change password request timeout response
func (o *ChangePasswordRequestTimeout) Code() int {
	return 408
}

func (o *ChangePasswordRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/userProfile/password][%d] changePasswordRequestTimeout ", 408)
}

func (o *ChangePasswordRequestTimeout) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/userProfile/password][%d] changePasswordRequestTimeout ", 408)
}

func (o *ChangePasswordRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewChangePasswordUnprocessableEntity creates a ChangePasswordUnprocessableEntity with default headers values
func NewChangePasswordUnprocessableEntity() *ChangePasswordUnprocessableEntity {
	return &ChangePasswordUnprocessableEntity{}
}

/*
ChangePasswordUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type ChangePasswordUnprocessableEntity struct {
}

// IsSuccess returns true when this change password unprocessable entity response has a 2xx status code
func (o *ChangePasswordUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this change password unprocessable entity response has a 3xx status code
func (o *ChangePasswordUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this change password unprocessable entity response has a 4xx status code
func (o *ChangePasswordUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this change password unprocessable entity response has a 5xx status code
func (o *ChangePasswordUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this change password unprocessable entity response a status code equal to that given
func (o *ChangePasswordUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the change password unprocessable entity response
func (o *ChangePasswordUnprocessableEntity) Code() int {
	return 422
}

func (o *ChangePasswordUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/userProfile/password][%d] changePasswordUnprocessableEntity ", 422)
}

func (o *ChangePasswordUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/userProfile/password][%d] changePasswordUnprocessableEntity ", 422)
}

func (o *ChangePasswordUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
