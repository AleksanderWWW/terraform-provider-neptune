// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// LeaveProjectReader is a Reader for the LeaveProject structure.
type LeaveProjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LeaveProjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLeaveProjectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewLeaveProjectBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewLeaveProjectUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewLeaveProjectForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewLeaveProjectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewLeaveProjectRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewLeaveProjectUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /api/backend/v1/projects/leave] leaveProject", response, response.Code())
	}
}

// NewLeaveProjectOK creates a LeaveProjectOK with default headers values
func NewLeaveProjectOK() *LeaveProjectOK {
	return &LeaveProjectOK{}
}

/*
LeaveProjectOK describes a response with status code 200, with default header values.

No response
*/
type LeaveProjectOK struct {
}

// IsSuccess returns true when this leave project o k response has a 2xx status code
func (o *LeaveProjectOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this leave project o k response has a 3xx status code
func (o *LeaveProjectOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this leave project o k response has a 4xx status code
func (o *LeaveProjectOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this leave project o k response has a 5xx status code
func (o *LeaveProjectOK) IsServerError() bool {
	return false
}

// IsCode returns true when this leave project o k response a status code equal to that given
func (o *LeaveProjectOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the leave project o k response
func (o *LeaveProjectOK) Code() int {
	return 200
}

func (o *LeaveProjectOK) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/projects/leave][%d] leaveProjectOK ", 200)
}

func (o *LeaveProjectOK) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/projects/leave][%d] leaveProjectOK ", 200)
}

func (o *LeaveProjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLeaveProjectBadRequest creates a LeaveProjectBadRequest with default headers values
func NewLeaveProjectBadRequest() *LeaveProjectBadRequest {
	return &LeaveProjectBadRequest{}
}

/*
LeaveProjectBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type LeaveProjectBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this leave project bad request response has a 2xx status code
func (o *LeaveProjectBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this leave project bad request response has a 3xx status code
func (o *LeaveProjectBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this leave project bad request response has a 4xx status code
func (o *LeaveProjectBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this leave project bad request response has a 5xx status code
func (o *LeaveProjectBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this leave project bad request response a status code equal to that given
func (o *LeaveProjectBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the leave project bad request response
func (o *LeaveProjectBadRequest) Code() int {
	return 400
}

func (o *LeaveProjectBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/projects/leave][%d] leaveProjectBadRequest  %+v", 400, o.Payload)
}

func (o *LeaveProjectBadRequest) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/projects/leave][%d] leaveProjectBadRequest  %+v", 400, o.Payload)
}

func (o *LeaveProjectBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *LeaveProjectBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLeaveProjectUnauthorized creates a LeaveProjectUnauthorized with default headers values
func NewLeaveProjectUnauthorized() *LeaveProjectUnauthorized {
	return &LeaveProjectUnauthorized{}
}

/*
LeaveProjectUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type LeaveProjectUnauthorized struct {
}

// IsSuccess returns true when this leave project unauthorized response has a 2xx status code
func (o *LeaveProjectUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this leave project unauthorized response has a 3xx status code
func (o *LeaveProjectUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this leave project unauthorized response has a 4xx status code
func (o *LeaveProjectUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this leave project unauthorized response has a 5xx status code
func (o *LeaveProjectUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this leave project unauthorized response a status code equal to that given
func (o *LeaveProjectUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the leave project unauthorized response
func (o *LeaveProjectUnauthorized) Code() int {
	return 401
}

func (o *LeaveProjectUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/projects/leave][%d] leaveProjectUnauthorized ", 401)
}

func (o *LeaveProjectUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/projects/leave][%d] leaveProjectUnauthorized ", 401)
}

func (o *LeaveProjectUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLeaveProjectForbidden creates a LeaveProjectForbidden with default headers values
func NewLeaveProjectForbidden() *LeaveProjectForbidden {
	return &LeaveProjectForbidden{}
}

/*
LeaveProjectForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type LeaveProjectForbidden struct {
}

// IsSuccess returns true when this leave project forbidden response has a 2xx status code
func (o *LeaveProjectForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this leave project forbidden response has a 3xx status code
func (o *LeaveProjectForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this leave project forbidden response has a 4xx status code
func (o *LeaveProjectForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this leave project forbidden response has a 5xx status code
func (o *LeaveProjectForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this leave project forbidden response a status code equal to that given
func (o *LeaveProjectForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the leave project forbidden response
func (o *LeaveProjectForbidden) Code() int {
	return 403
}

func (o *LeaveProjectForbidden) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/projects/leave][%d] leaveProjectForbidden ", 403)
}

func (o *LeaveProjectForbidden) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/projects/leave][%d] leaveProjectForbidden ", 403)
}

func (o *LeaveProjectForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLeaveProjectNotFound creates a LeaveProjectNotFound with default headers values
func NewLeaveProjectNotFound() *LeaveProjectNotFound {
	return &LeaveProjectNotFound{}
}

/*
LeaveProjectNotFound describes a response with status code 404, with default header values.

Not Found
*/
type LeaveProjectNotFound struct {
}

// IsSuccess returns true when this leave project not found response has a 2xx status code
func (o *LeaveProjectNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this leave project not found response has a 3xx status code
func (o *LeaveProjectNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this leave project not found response has a 4xx status code
func (o *LeaveProjectNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this leave project not found response has a 5xx status code
func (o *LeaveProjectNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this leave project not found response a status code equal to that given
func (o *LeaveProjectNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the leave project not found response
func (o *LeaveProjectNotFound) Code() int {
	return 404
}

func (o *LeaveProjectNotFound) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/projects/leave][%d] leaveProjectNotFound ", 404)
}

func (o *LeaveProjectNotFound) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/projects/leave][%d] leaveProjectNotFound ", 404)
}

func (o *LeaveProjectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLeaveProjectRequestTimeout creates a LeaveProjectRequestTimeout with default headers values
func NewLeaveProjectRequestTimeout() *LeaveProjectRequestTimeout {
	return &LeaveProjectRequestTimeout{}
}

/*
LeaveProjectRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type LeaveProjectRequestTimeout struct {
}

// IsSuccess returns true when this leave project request timeout response has a 2xx status code
func (o *LeaveProjectRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this leave project request timeout response has a 3xx status code
func (o *LeaveProjectRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this leave project request timeout response has a 4xx status code
func (o *LeaveProjectRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this leave project request timeout response has a 5xx status code
func (o *LeaveProjectRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this leave project request timeout response a status code equal to that given
func (o *LeaveProjectRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the leave project request timeout response
func (o *LeaveProjectRequestTimeout) Code() int {
	return 408
}

func (o *LeaveProjectRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/projects/leave][%d] leaveProjectRequestTimeout ", 408)
}

func (o *LeaveProjectRequestTimeout) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/projects/leave][%d] leaveProjectRequestTimeout ", 408)
}

func (o *LeaveProjectRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLeaveProjectUnprocessableEntity creates a LeaveProjectUnprocessableEntity with default headers values
func NewLeaveProjectUnprocessableEntity() *LeaveProjectUnprocessableEntity {
	return &LeaveProjectUnprocessableEntity{}
}

/*
LeaveProjectUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type LeaveProjectUnprocessableEntity struct {
}

// IsSuccess returns true when this leave project unprocessable entity response has a 2xx status code
func (o *LeaveProjectUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this leave project unprocessable entity response has a 3xx status code
func (o *LeaveProjectUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this leave project unprocessable entity response has a 4xx status code
func (o *LeaveProjectUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this leave project unprocessable entity response has a 5xx status code
func (o *LeaveProjectUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this leave project unprocessable entity response a status code equal to that given
func (o *LeaveProjectUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the leave project unprocessable entity response
func (o *LeaveProjectUnprocessableEntity) Code() int {
	return 422
}

func (o *LeaveProjectUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/projects/leave][%d] leaveProjectUnprocessableEntity ", 422)
}

func (o *LeaveProjectUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/projects/leave][%d] leaveProjectUnprocessableEntity ", 422)
}

func (o *LeaveProjectUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
