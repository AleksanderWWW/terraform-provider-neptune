// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"terraform-provider-neptune/internal/neptune/models"
)

// CancelSubscriptionReader is a Reader for the CancelSubscription structure.
type CancelSubscriptionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CancelSubscriptionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCancelSubscriptionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCancelSubscriptionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCancelSubscriptionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCancelSubscriptionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCancelSubscriptionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewCancelSubscriptionRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewCancelSubscriptionUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /api/backend/v1/organizations2/cancelSubscription] cancelSubscription", response, response.Code())
	}
}

// NewCancelSubscriptionOK creates a CancelSubscriptionOK with default headers values
func NewCancelSubscriptionOK() *CancelSubscriptionOK {
	return &CancelSubscriptionOK{}
}

/*
CancelSubscriptionOK describes a response with status code 200, with default header values.

No response
*/
type CancelSubscriptionOK struct {
}

// IsSuccess returns true when this cancel subscription o k response has a 2xx status code
func (o *CancelSubscriptionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this cancel subscription o k response has a 3xx status code
func (o *CancelSubscriptionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel subscription o k response has a 4xx status code
func (o *CancelSubscriptionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this cancel subscription o k response has a 5xx status code
func (o *CancelSubscriptionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel subscription o k response a status code equal to that given
func (o *CancelSubscriptionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the cancel subscription o k response
func (o *CancelSubscriptionOK) Code() int {
	return 200
}

func (o *CancelSubscriptionOK) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/organizations2/cancelSubscription][%d] cancelSubscriptionOK ", 200)
}

func (o *CancelSubscriptionOK) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/organizations2/cancelSubscription][%d] cancelSubscriptionOK ", 200)
}

func (o *CancelSubscriptionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCancelSubscriptionBadRequest creates a CancelSubscriptionBadRequest with default headers values
func NewCancelSubscriptionBadRequest() *CancelSubscriptionBadRequest {
	return &CancelSubscriptionBadRequest{}
}

/*
CancelSubscriptionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CancelSubscriptionBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this cancel subscription bad request response has a 2xx status code
func (o *CancelSubscriptionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel subscription bad request response has a 3xx status code
func (o *CancelSubscriptionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel subscription bad request response has a 4xx status code
func (o *CancelSubscriptionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel subscription bad request response has a 5xx status code
func (o *CancelSubscriptionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel subscription bad request response a status code equal to that given
func (o *CancelSubscriptionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the cancel subscription bad request response
func (o *CancelSubscriptionBadRequest) Code() int {
	return 400
}

func (o *CancelSubscriptionBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/organizations2/cancelSubscription][%d] cancelSubscriptionBadRequest  %+v", 400, o.Payload)
}

func (o *CancelSubscriptionBadRequest) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/organizations2/cancelSubscription][%d] cancelSubscriptionBadRequest  %+v", 400, o.Payload)
}

func (o *CancelSubscriptionBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *CancelSubscriptionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelSubscriptionUnauthorized creates a CancelSubscriptionUnauthorized with default headers values
func NewCancelSubscriptionUnauthorized() *CancelSubscriptionUnauthorized {
	return &CancelSubscriptionUnauthorized{}
}

/*
CancelSubscriptionUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CancelSubscriptionUnauthorized struct {
}

// IsSuccess returns true when this cancel subscription unauthorized response has a 2xx status code
func (o *CancelSubscriptionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel subscription unauthorized response has a 3xx status code
func (o *CancelSubscriptionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel subscription unauthorized response has a 4xx status code
func (o *CancelSubscriptionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel subscription unauthorized response has a 5xx status code
func (o *CancelSubscriptionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel subscription unauthorized response a status code equal to that given
func (o *CancelSubscriptionUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the cancel subscription unauthorized response
func (o *CancelSubscriptionUnauthorized) Code() int {
	return 401
}

func (o *CancelSubscriptionUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/organizations2/cancelSubscription][%d] cancelSubscriptionUnauthorized ", 401)
}

func (o *CancelSubscriptionUnauthorized) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/organizations2/cancelSubscription][%d] cancelSubscriptionUnauthorized ", 401)
}

func (o *CancelSubscriptionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCancelSubscriptionForbidden creates a CancelSubscriptionForbidden with default headers values
func NewCancelSubscriptionForbidden() *CancelSubscriptionForbidden {
	return &CancelSubscriptionForbidden{}
}

/*
CancelSubscriptionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CancelSubscriptionForbidden struct {
}

// IsSuccess returns true when this cancel subscription forbidden response has a 2xx status code
func (o *CancelSubscriptionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel subscription forbidden response has a 3xx status code
func (o *CancelSubscriptionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel subscription forbidden response has a 4xx status code
func (o *CancelSubscriptionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel subscription forbidden response has a 5xx status code
func (o *CancelSubscriptionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel subscription forbidden response a status code equal to that given
func (o *CancelSubscriptionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the cancel subscription forbidden response
func (o *CancelSubscriptionForbidden) Code() int {
	return 403
}

func (o *CancelSubscriptionForbidden) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/organizations2/cancelSubscription][%d] cancelSubscriptionForbidden ", 403)
}

func (o *CancelSubscriptionForbidden) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/organizations2/cancelSubscription][%d] cancelSubscriptionForbidden ", 403)
}

func (o *CancelSubscriptionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCancelSubscriptionNotFound creates a CancelSubscriptionNotFound with default headers values
func NewCancelSubscriptionNotFound() *CancelSubscriptionNotFound {
	return &CancelSubscriptionNotFound{}
}

/*
CancelSubscriptionNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CancelSubscriptionNotFound struct {
}

// IsSuccess returns true when this cancel subscription not found response has a 2xx status code
func (o *CancelSubscriptionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel subscription not found response has a 3xx status code
func (o *CancelSubscriptionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel subscription not found response has a 4xx status code
func (o *CancelSubscriptionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel subscription not found response has a 5xx status code
func (o *CancelSubscriptionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel subscription not found response a status code equal to that given
func (o *CancelSubscriptionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the cancel subscription not found response
func (o *CancelSubscriptionNotFound) Code() int {
	return 404
}

func (o *CancelSubscriptionNotFound) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/organizations2/cancelSubscription][%d] cancelSubscriptionNotFound ", 404)
}

func (o *CancelSubscriptionNotFound) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/organizations2/cancelSubscription][%d] cancelSubscriptionNotFound ", 404)
}

func (o *CancelSubscriptionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCancelSubscriptionRequestTimeout creates a CancelSubscriptionRequestTimeout with default headers values
func NewCancelSubscriptionRequestTimeout() *CancelSubscriptionRequestTimeout {
	return &CancelSubscriptionRequestTimeout{}
}

/*
CancelSubscriptionRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type CancelSubscriptionRequestTimeout struct {
}

// IsSuccess returns true when this cancel subscription request timeout response has a 2xx status code
func (o *CancelSubscriptionRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel subscription request timeout response has a 3xx status code
func (o *CancelSubscriptionRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel subscription request timeout response has a 4xx status code
func (o *CancelSubscriptionRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel subscription request timeout response has a 5xx status code
func (o *CancelSubscriptionRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel subscription request timeout response a status code equal to that given
func (o *CancelSubscriptionRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the cancel subscription request timeout response
func (o *CancelSubscriptionRequestTimeout) Code() int {
	return 408
}

func (o *CancelSubscriptionRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/organizations2/cancelSubscription][%d] cancelSubscriptionRequestTimeout ", 408)
}

func (o *CancelSubscriptionRequestTimeout) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/organizations2/cancelSubscription][%d] cancelSubscriptionRequestTimeout ", 408)
}

func (o *CancelSubscriptionRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCancelSubscriptionUnprocessableEntity creates a CancelSubscriptionUnprocessableEntity with default headers values
func NewCancelSubscriptionUnprocessableEntity() *CancelSubscriptionUnprocessableEntity {
	return &CancelSubscriptionUnprocessableEntity{}
}

/*
CancelSubscriptionUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type CancelSubscriptionUnprocessableEntity struct {
}

// IsSuccess returns true when this cancel subscription unprocessable entity response has a 2xx status code
func (o *CancelSubscriptionUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel subscription unprocessable entity response has a 3xx status code
func (o *CancelSubscriptionUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel subscription unprocessable entity response has a 4xx status code
func (o *CancelSubscriptionUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel subscription unprocessable entity response has a 5xx status code
func (o *CancelSubscriptionUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel subscription unprocessable entity response a status code equal to that given
func (o *CancelSubscriptionUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the cancel subscription unprocessable entity response
func (o *CancelSubscriptionUnprocessableEntity) Code() int {
	return 422
}

func (o *CancelSubscriptionUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /api/backend/v1/organizations2/cancelSubscription][%d] cancelSubscriptionUnprocessableEntity ", 422)
}

func (o *CancelSubscriptionUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /api/backend/v1/organizations2/cancelSubscription][%d] cancelSubscriptionUnprocessableEntity ", 422)
}

func (o *CancelSubscriptionUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
