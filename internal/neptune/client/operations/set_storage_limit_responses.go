// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"terraform-provider-neptune/internal/neptune/models"
)

// SetStorageLimitReader is a Reader for the SetStorageLimit structure.
type SetStorageLimitReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetStorageLimitReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSetStorageLimitOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSetStorageLimitBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSetStorageLimitUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSetStorageLimitForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSetStorageLimitNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewSetStorageLimitRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewSetStorageLimitUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /api/backend/v1/projects/storage-limit] setStorageLimit", response, response.Code())
	}
}

// NewSetStorageLimitOK creates a SetStorageLimitOK with default headers values
func NewSetStorageLimitOK() *SetStorageLimitOK {
	return &SetStorageLimitOK{}
}

/*
SetStorageLimitOK describes a response with status code 200, with default header values.

OK
*/
type SetStorageLimitOK struct {
	Payload *models.ProjectStorageLimitTraitDTO
}

// IsSuccess returns true when this set storage limit o k response has a 2xx status code
func (o *SetStorageLimitOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this set storage limit o k response has a 3xx status code
func (o *SetStorageLimitOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set storage limit o k response has a 4xx status code
func (o *SetStorageLimitOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this set storage limit o k response has a 5xx status code
func (o *SetStorageLimitOK) IsServerError() bool {
	return false
}

// IsCode returns true when this set storage limit o k response a status code equal to that given
func (o *SetStorageLimitOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the set storage limit o k response
func (o *SetStorageLimitOK) Code() int {
	return 200
}

func (o *SetStorageLimitOK) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects/storage-limit][%d] setStorageLimitOK  %+v", 200, o.Payload)
}

func (o *SetStorageLimitOK) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects/storage-limit][%d] setStorageLimitOK  %+v", 200, o.Payload)
}

func (o *SetStorageLimitOK) GetPayload() *models.ProjectStorageLimitTraitDTO {
	return o.Payload
}

func (o *SetStorageLimitOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProjectStorageLimitTraitDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetStorageLimitBadRequest creates a SetStorageLimitBadRequest with default headers values
func NewSetStorageLimitBadRequest() *SetStorageLimitBadRequest {
	return &SetStorageLimitBadRequest{}
}

/*
SetStorageLimitBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SetStorageLimitBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this set storage limit bad request response has a 2xx status code
func (o *SetStorageLimitBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set storage limit bad request response has a 3xx status code
func (o *SetStorageLimitBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set storage limit bad request response has a 4xx status code
func (o *SetStorageLimitBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this set storage limit bad request response has a 5xx status code
func (o *SetStorageLimitBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this set storage limit bad request response a status code equal to that given
func (o *SetStorageLimitBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the set storage limit bad request response
func (o *SetStorageLimitBadRequest) Code() int {
	return 400
}

func (o *SetStorageLimitBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects/storage-limit][%d] setStorageLimitBadRequest  %+v", 400, o.Payload)
}

func (o *SetStorageLimitBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects/storage-limit][%d] setStorageLimitBadRequest  %+v", 400, o.Payload)
}

func (o *SetStorageLimitBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetStorageLimitBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetStorageLimitUnauthorized creates a SetStorageLimitUnauthorized with default headers values
func NewSetStorageLimitUnauthorized() *SetStorageLimitUnauthorized {
	return &SetStorageLimitUnauthorized{}
}

/*
SetStorageLimitUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SetStorageLimitUnauthorized struct {
}

// IsSuccess returns true when this set storage limit unauthorized response has a 2xx status code
func (o *SetStorageLimitUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set storage limit unauthorized response has a 3xx status code
func (o *SetStorageLimitUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set storage limit unauthorized response has a 4xx status code
func (o *SetStorageLimitUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this set storage limit unauthorized response has a 5xx status code
func (o *SetStorageLimitUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this set storage limit unauthorized response a status code equal to that given
func (o *SetStorageLimitUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the set storage limit unauthorized response
func (o *SetStorageLimitUnauthorized) Code() int {
	return 401
}

func (o *SetStorageLimitUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects/storage-limit][%d] setStorageLimitUnauthorized ", 401)
}

func (o *SetStorageLimitUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects/storage-limit][%d] setStorageLimitUnauthorized ", 401)
}

func (o *SetStorageLimitUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSetStorageLimitForbidden creates a SetStorageLimitForbidden with default headers values
func NewSetStorageLimitForbidden() *SetStorageLimitForbidden {
	return &SetStorageLimitForbidden{}
}

/*
SetStorageLimitForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SetStorageLimitForbidden struct {
}

// IsSuccess returns true when this set storage limit forbidden response has a 2xx status code
func (o *SetStorageLimitForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set storage limit forbidden response has a 3xx status code
func (o *SetStorageLimitForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set storage limit forbidden response has a 4xx status code
func (o *SetStorageLimitForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this set storage limit forbidden response has a 5xx status code
func (o *SetStorageLimitForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this set storage limit forbidden response a status code equal to that given
func (o *SetStorageLimitForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the set storage limit forbidden response
func (o *SetStorageLimitForbidden) Code() int {
	return 403
}

func (o *SetStorageLimitForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects/storage-limit][%d] setStorageLimitForbidden ", 403)
}

func (o *SetStorageLimitForbidden) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects/storage-limit][%d] setStorageLimitForbidden ", 403)
}

func (o *SetStorageLimitForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSetStorageLimitNotFound creates a SetStorageLimitNotFound with default headers values
func NewSetStorageLimitNotFound() *SetStorageLimitNotFound {
	return &SetStorageLimitNotFound{}
}

/*
SetStorageLimitNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SetStorageLimitNotFound struct {
}

// IsSuccess returns true when this set storage limit not found response has a 2xx status code
func (o *SetStorageLimitNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set storage limit not found response has a 3xx status code
func (o *SetStorageLimitNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set storage limit not found response has a 4xx status code
func (o *SetStorageLimitNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this set storage limit not found response has a 5xx status code
func (o *SetStorageLimitNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this set storage limit not found response a status code equal to that given
func (o *SetStorageLimitNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the set storage limit not found response
func (o *SetStorageLimitNotFound) Code() int {
	return 404
}

func (o *SetStorageLimitNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects/storage-limit][%d] setStorageLimitNotFound ", 404)
}

func (o *SetStorageLimitNotFound) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects/storage-limit][%d] setStorageLimitNotFound ", 404)
}

func (o *SetStorageLimitNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSetStorageLimitRequestTimeout creates a SetStorageLimitRequestTimeout with default headers values
func NewSetStorageLimitRequestTimeout() *SetStorageLimitRequestTimeout {
	return &SetStorageLimitRequestTimeout{}
}

/*
SetStorageLimitRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type SetStorageLimitRequestTimeout struct {
}

// IsSuccess returns true when this set storage limit request timeout response has a 2xx status code
func (o *SetStorageLimitRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set storage limit request timeout response has a 3xx status code
func (o *SetStorageLimitRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set storage limit request timeout response has a 4xx status code
func (o *SetStorageLimitRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this set storage limit request timeout response has a 5xx status code
func (o *SetStorageLimitRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this set storage limit request timeout response a status code equal to that given
func (o *SetStorageLimitRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the set storage limit request timeout response
func (o *SetStorageLimitRequestTimeout) Code() int {
	return 408
}

func (o *SetStorageLimitRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects/storage-limit][%d] setStorageLimitRequestTimeout ", 408)
}

func (o *SetStorageLimitRequestTimeout) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects/storage-limit][%d] setStorageLimitRequestTimeout ", 408)
}

func (o *SetStorageLimitRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSetStorageLimitUnprocessableEntity creates a SetStorageLimitUnprocessableEntity with default headers values
func NewSetStorageLimitUnprocessableEntity() *SetStorageLimitUnprocessableEntity {
	return &SetStorageLimitUnprocessableEntity{}
}

/*
SetStorageLimitUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type SetStorageLimitUnprocessableEntity struct {
}

// IsSuccess returns true when this set storage limit unprocessable entity response has a 2xx status code
func (o *SetStorageLimitUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set storage limit unprocessable entity response has a 3xx status code
func (o *SetStorageLimitUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set storage limit unprocessable entity response has a 4xx status code
func (o *SetStorageLimitUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this set storage limit unprocessable entity response has a 5xx status code
func (o *SetStorageLimitUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this set storage limit unprocessable entity response a status code equal to that given
func (o *SetStorageLimitUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the set storage limit unprocessable entity response
func (o *SetStorageLimitUnprocessableEntity) Code() int {
	return 422
}

func (o *SetStorageLimitUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects/storage-limit][%d] setStorageLimitUnprocessableEntity ", 422)
}

func (o *SetStorageLimitUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/projects/storage-limit][%d] setStorageLimitUnprocessableEntity ", 422)
}

func (o *SetStorageLimitUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
