// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// UpdateProjectInvitationReader is a Reader for the UpdateProjectInvitation structure.
type UpdateProjectInvitationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateProjectInvitationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateProjectInvitationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateProjectInvitationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateProjectInvitationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateProjectInvitationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateProjectInvitationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewUpdateProjectInvitationRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateProjectInvitationUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /api/backend/v1/invitations/project/{invitationId}] updateProjectInvitation", response, response.Code())
	}
}

// NewUpdateProjectInvitationOK creates a UpdateProjectInvitationOK with default headers values
func NewUpdateProjectInvitationOK() *UpdateProjectInvitationOK {
	return &UpdateProjectInvitationOK{}
}

/*
UpdateProjectInvitationOK describes a response with status code 200, with default header values.

OK
*/
type UpdateProjectInvitationOK struct {
	Payload *models.ProjectInvitationDTO
}

// IsSuccess returns true when this update project invitation o k response has a 2xx status code
func (o *UpdateProjectInvitationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update project invitation o k response has a 3xx status code
func (o *UpdateProjectInvitationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project invitation o k response has a 4xx status code
func (o *UpdateProjectInvitationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update project invitation o k response has a 5xx status code
func (o *UpdateProjectInvitationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update project invitation o k response a status code equal to that given
func (o *UpdateProjectInvitationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update project invitation o k response
func (o *UpdateProjectInvitationOK) Code() int {
	return 200
}

func (o *UpdateProjectInvitationOK) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/invitations/project/{invitationId}][%d] updateProjectInvitationOK  %+v", 200, o.Payload)
}

func (o *UpdateProjectInvitationOK) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/invitations/project/{invitationId}][%d] updateProjectInvitationOK  %+v", 200, o.Payload)
}

func (o *UpdateProjectInvitationOK) GetPayload() *models.ProjectInvitationDTO {
	return o.Payload
}

func (o *UpdateProjectInvitationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProjectInvitationDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateProjectInvitationBadRequest creates a UpdateProjectInvitationBadRequest with default headers values
func NewUpdateProjectInvitationBadRequest() *UpdateProjectInvitationBadRequest {
	return &UpdateProjectInvitationBadRequest{}
}

/*
UpdateProjectInvitationBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateProjectInvitationBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update project invitation bad request response has a 2xx status code
func (o *UpdateProjectInvitationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project invitation bad request response has a 3xx status code
func (o *UpdateProjectInvitationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project invitation bad request response has a 4xx status code
func (o *UpdateProjectInvitationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project invitation bad request response has a 5xx status code
func (o *UpdateProjectInvitationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update project invitation bad request response a status code equal to that given
func (o *UpdateProjectInvitationBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update project invitation bad request response
func (o *UpdateProjectInvitationBadRequest) Code() int {
	return 400
}

func (o *UpdateProjectInvitationBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/invitations/project/{invitationId}][%d] updateProjectInvitationBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateProjectInvitationBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/invitations/project/{invitationId}][%d] updateProjectInvitationBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateProjectInvitationBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateProjectInvitationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateProjectInvitationUnauthorized creates a UpdateProjectInvitationUnauthorized with default headers values
func NewUpdateProjectInvitationUnauthorized() *UpdateProjectInvitationUnauthorized {
	return &UpdateProjectInvitationUnauthorized{}
}

/*
UpdateProjectInvitationUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateProjectInvitationUnauthorized struct {
}

// IsSuccess returns true when this update project invitation unauthorized response has a 2xx status code
func (o *UpdateProjectInvitationUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project invitation unauthorized response has a 3xx status code
func (o *UpdateProjectInvitationUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project invitation unauthorized response has a 4xx status code
func (o *UpdateProjectInvitationUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project invitation unauthorized response has a 5xx status code
func (o *UpdateProjectInvitationUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update project invitation unauthorized response a status code equal to that given
func (o *UpdateProjectInvitationUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update project invitation unauthorized response
func (o *UpdateProjectInvitationUnauthorized) Code() int {
	return 401
}

func (o *UpdateProjectInvitationUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/invitations/project/{invitationId}][%d] updateProjectInvitationUnauthorized ", 401)
}

func (o *UpdateProjectInvitationUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/invitations/project/{invitationId}][%d] updateProjectInvitationUnauthorized ", 401)
}

func (o *UpdateProjectInvitationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectInvitationForbidden creates a UpdateProjectInvitationForbidden with default headers values
func NewUpdateProjectInvitationForbidden() *UpdateProjectInvitationForbidden {
	return &UpdateProjectInvitationForbidden{}
}

/*
UpdateProjectInvitationForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateProjectInvitationForbidden struct {
}

// IsSuccess returns true when this update project invitation forbidden response has a 2xx status code
func (o *UpdateProjectInvitationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project invitation forbidden response has a 3xx status code
func (o *UpdateProjectInvitationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project invitation forbidden response has a 4xx status code
func (o *UpdateProjectInvitationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project invitation forbidden response has a 5xx status code
func (o *UpdateProjectInvitationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update project invitation forbidden response a status code equal to that given
func (o *UpdateProjectInvitationForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update project invitation forbidden response
func (o *UpdateProjectInvitationForbidden) Code() int {
	return 403
}

func (o *UpdateProjectInvitationForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/invitations/project/{invitationId}][%d] updateProjectInvitationForbidden ", 403)
}

func (o *UpdateProjectInvitationForbidden) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/invitations/project/{invitationId}][%d] updateProjectInvitationForbidden ", 403)
}

func (o *UpdateProjectInvitationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectInvitationNotFound creates a UpdateProjectInvitationNotFound with default headers values
func NewUpdateProjectInvitationNotFound() *UpdateProjectInvitationNotFound {
	return &UpdateProjectInvitationNotFound{}
}

/*
UpdateProjectInvitationNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateProjectInvitationNotFound struct {
}

// IsSuccess returns true when this update project invitation not found response has a 2xx status code
func (o *UpdateProjectInvitationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project invitation not found response has a 3xx status code
func (o *UpdateProjectInvitationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project invitation not found response has a 4xx status code
func (o *UpdateProjectInvitationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project invitation not found response has a 5xx status code
func (o *UpdateProjectInvitationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update project invitation not found response a status code equal to that given
func (o *UpdateProjectInvitationNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update project invitation not found response
func (o *UpdateProjectInvitationNotFound) Code() int {
	return 404
}

func (o *UpdateProjectInvitationNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/invitations/project/{invitationId}][%d] updateProjectInvitationNotFound ", 404)
}

func (o *UpdateProjectInvitationNotFound) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/invitations/project/{invitationId}][%d] updateProjectInvitationNotFound ", 404)
}

func (o *UpdateProjectInvitationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectInvitationRequestTimeout creates a UpdateProjectInvitationRequestTimeout with default headers values
func NewUpdateProjectInvitationRequestTimeout() *UpdateProjectInvitationRequestTimeout {
	return &UpdateProjectInvitationRequestTimeout{}
}

/*
UpdateProjectInvitationRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type UpdateProjectInvitationRequestTimeout struct {
}

// IsSuccess returns true when this update project invitation request timeout response has a 2xx status code
func (o *UpdateProjectInvitationRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project invitation request timeout response has a 3xx status code
func (o *UpdateProjectInvitationRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project invitation request timeout response has a 4xx status code
func (o *UpdateProjectInvitationRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project invitation request timeout response has a 5xx status code
func (o *UpdateProjectInvitationRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this update project invitation request timeout response a status code equal to that given
func (o *UpdateProjectInvitationRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the update project invitation request timeout response
func (o *UpdateProjectInvitationRequestTimeout) Code() int {
	return 408
}

func (o *UpdateProjectInvitationRequestTimeout) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/invitations/project/{invitationId}][%d] updateProjectInvitationRequestTimeout ", 408)
}

func (o *UpdateProjectInvitationRequestTimeout) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/invitations/project/{invitationId}][%d] updateProjectInvitationRequestTimeout ", 408)
}

func (o *UpdateProjectInvitationRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectInvitationUnprocessableEntity creates a UpdateProjectInvitationUnprocessableEntity with default headers values
func NewUpdateProjectInvitationUnprocessableEntity() *UpdateProjectInvitationUnprocessableEntity {
	return &UpdateProjectInvitationUnprocessableEntity{}
}

/*
UpdateProjectInvitationUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type UpdateProjectInvitationUnprocessableEntity struct {
}

// IsSuccess returns true when this update project invitation unprocessable entity response has a 2xx status code
func (o *UpdateProjectInvitationUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project invitation unprocessable entity response has a 3xx status code
func (o *UpdateProjectInvitationUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project invitation unprocessable entity response has a 4xx status code
func (o *UpdateProjectInvitationUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project invitation unprocessable entity response has a 5xx status code
func (o *UpdateProjectInvitationUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update project invitation unprocessable entity response a status code equal to that given
func (o *UpdateProjectInvitationUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update project invitation unprocessable entity response
func (o *UpdateProjectInvitationUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateProjectInvitationUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /api/backend/v1/invitations/project/{invitationId}][%d] updateProjectInvitationUnprocessableEntity ", 422)
}

func (o *UpdateProjectInvitationUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /api/backend/v1/invitations/project/{invitationId}][%d] updateProjectInvitationUnprocessableEntity ", 422)
}

func (o *UpdateProjectInvitationUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
