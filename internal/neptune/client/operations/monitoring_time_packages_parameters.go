// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewMonitoringTimePackagesParams creates a new MonitoringTimePackagesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewMonitoringTimePackagesParams() *MonitoringTimePackagesParams {
	return &MonitoringTimePackagesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewMonitoringTimePackagesParamsWithTimeout creates a new MonitoringTimePackagesParams object
// with the ability to set a timeout on a request.
func NewMonitoringTimePackagesParamsWithTimeout(timeout time.Duration) *MonitoringTimePackagesParams {
	return &MonitoringTimePackagesParams{
		timeout: timeout,
	}
}

// NewMonitoringTimePackagesParamsWithContext creates a new MonitoringTimePackagesParams object
// with the ability to set a context for a request.
func NewMonitoringTimePackagesParamsWithContext(ctx context.Context) *MonitoringTimePackagesParams {
	return &MonitoringTimePackagesParams{
		Context: ctx,
	}
}

// NewMonitoringTimePackagesParamsWithHTTPClient creates a new MonitoringTimePackagesParams object
// with the ability to set a custom HTTPClient for a request.
func NewMonitoringTimePackagesParamsWithHTTPClient(client *http.Client) *MonitoringTimePackagesParams {
	return &MonitoringTimePackagesParams{
		HTTPClient: client,
	}
}

/*
MonitoringTimePackagesParams contains all the parameters to send to the API endpoint

	for the monitoring time packages operation.

	Typically these are written to a http.Request.
*/
type MonitoringTimePackagesParams struct {

	// DateMax.
	//
	// Format: date-time
	DateMax *strfmt.DateTime

	// DateMin.
	//
	// Format: date-time
	DateMin *strfmt.DateTime

	// Limit.
	//
	// Format: int32
	Limit int32

	// Offset.
	//
	// Format: int32
	Offset int32

	// OrganizationIdentifier.
	OrganizationIdentifier string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the monitoring time packages params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *MonitoringTimePackagesParams) WithDefaults() *MonitoringTimePackagesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the monitoring time packages params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *MonitoringTimePackagesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the monitoring time packages params
func (o *MonitoringTimePackagesParams) WithTimeout(timeout time.Duration) *MonitoringTimePackagesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the monitoring time packages params
func (o *MonitoringTimePackagesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the monitoring time packages params
func (o *MonitoringTimePackagesParams) WithContext(ctx context.Context) *MonitoringTimePackagesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the monitoring time packages params
func (o *MonitoringTimePackagesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the monitoring time packages params
func (o *MonitoringTimePackagesParams) WithHTTPClient(client *http.Client) *MonitoringTimePackagesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the monitoring time packages params
func (o *MonitoringTimePackagesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDateMax adds the dateMax to the monitoring time packages params
func (o *MonitoringTimePackagesParams) WithDateMax(dateMax *strfmt.DateTime) *MonitoringTimePackagesParams {
	o.SetDateMax(dateMax)
	return o
}

// SetDateMax adds the dateMax to the monitoring time packages params
func (o *MonitoringTimePackagesParams) SetDateMax(dateMax *strfmt.DateTime) {
	o.DateMax = dateMax
}

// WithDateMin adds the dateMin to the monitoring time packages params
func (o *MonitoringTimePackagesParams) WithDateMin(dateMin *strfmt.DateTime) *MonitoringTimePackagesParams {
	o.SetDateMin(dateMin)
	return o
}

// SetDateMin adds the dateMin to the monitoring time packages params
func (o *MonitoringTimePackagesParams) SetDateMin(dateMin *strfmt.DateTime) {
	o.DateMin = dateMin
}

// WithLimit adds the limit to the monitoring time packages params
func (o *MonitoringTimePackagesParams) WithLimit(limit int32) *MonitoringTimePackagesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the monitoring time packages params
func (o *MonitoringTimePackagesParams) SetLimit(limit int32) {
	o.Limit = limit
}

// WithOffset adds the offset to the monitoring time packages params
func (o *MonitoringTimePackagesParams) WithOffset(offset int32) *MonitoringTimePackagesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the monitoring time packages params
func (o *MonitoringTimePackagesParams) SetOffset(offset int32) {
	o.Offset = offset
}

// WithOrganizationIdentifier adds the organizationIdentifier to the monitoring time packages params
func (o *MonitoringTimePackagesParams) WithOrganizationIdentifier(organizationIdentifier string) *MonitoringTimePackagesParams {
	o.SetOrganizationIdentifier(organizationIdentifier)
	return o
}

// SetOrganizationIdentifier adds the organizationIdentifier to the monitoring time packages params
func (o *MonitoringTimePackagesParams) SetOrganizationIdentifier(organizationIdentifier string) {
	o.OrganizationIdentifier = organizationIdentifier
}

// WriteToRequest writes these params to a swagger request
func (o *MonitoringTimePackagesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DateMax != nil {

		// query param dateMax
		var qrDateMax strfmt.DateTime

		if o.DateMax != nil {
			qrDateMax = *o.DateMax
		}
		qDateMax := qrDateMax.String()
		if qDateMax != "" {

			if err := r.SetQueryParam("dateMax", qDateMax); err != nil {
				return err
			}
		}
	}

	if o.DateMin != nil {

		// query param dateMin
		var qrDateMin strfmt.DateTime

		if o.DateMin != nil {
			qrDateMin = *o.DateMin
		}
		qDateMin := qrDateMin.String()
		if qDateMin != "" {

			if err := r.SetQueryParam("dateMin", qDateMin); err != nil {
				return err
			}
		}
	}

	// query param limit
	qrLimit := o.Limit
	qLimit := swag.FormatInt32(qrLimit)
	if qLimit != "" {

		if err := r.SetQueryParam("limit", qLimit); err != nil {
			return err
		}
	}

	// query param offset
	qrOffset := o.Offset
	qOffset := swag.FormatInt32(qrOffset)
	if qOffset != "" {

		if err := r.SetQueryParam("offset", qOffset); err != nil {
			return err
		}
	}

	// query param organizationIdentifier
	qrOrganizationIdentifier := o.OrganizationIdentifier
	qOrganizationIdentifier := qrOrganizationIdentifier
	if qOrganizationIdentifier != "" {

		if err := r.SetQueryParam("organizationIdentifier", qOrganizationIdentifier); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
