// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// NewUpdateProjectServiceAccountParams creates a new UpdateProjectServiceAccountParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateProjectServiceAccountParams() *UpdateProjectServiceAccountParams {
	return &UpdateProjectServiceAccountParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateProjectServiceAccountParamsWithTimeout creates a new UpdateProjectServiceAccountParams object
// with the ability to set a timeout on a request.
func NewUpdateProjectServiceAccountParamsWithTimeout(timeout time.Duration) *UpdateProjectServiceAccountParams {
	return &UpdateProjectServiceAccountParams{
		timeout: timeout,
	}
}

// NewUpdateProjectServiceAccountParamsWithContext creates a new UpdateProjectServiceAccountParams object
// with the ability to set a context for a request.
func NewUpdateProjectServiceAccountParamsWithContext(ctx context.Context) *UpdateProjectServiceAccountParams {
	return &UpdateProjectServiceAccountParams{
		Context: ctx,
	}
}

// NewUpdateProjectServiceAccountParamsWithHTTPClient creates a new UpdateProjectServiceAccountParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateProjectServiceAccountParamsWithHTTPClient(client *http.Client) *UpdateProjectServiceAccountParams {
	return &UpdateProjectServiceAccountParams{
		HTTPClient: client,
	}
}

/*
UpdateProjectServiceAccountParams contains all the parameters to send to the API endpoint

	for the update project service account operation.

	Typically these are written to a http.Request.
*/
type UpdateProjectServiceAccountParams struct {

	// Member.
	Member *models.ProjectServiceAccountsUpdateDTO

	// ProjectIdentifier.
	ProjectIdentifier string

	// ServiceAccountID.
	ServiceAccountID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update project service account params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateProjectServiceAccountParams) WithDefaults() *UpdateProjectServiceAccountParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update project service account params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateProjectServiceAccountParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update project service account params
func (o *UpdateProjectServiceAccountParams) WithTimeout(timeout time.Duration) *UpdateProjectServiceAccountParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update project service account params
func (o *UpdateProjectServiceAccountParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update project service account params
func (o *UpdateProjectServiceAccountParams) WithContext(ctx context.Context) *UpdateProjectServiceAccountParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update project service account params
func (o *UpdateProjectServiceAccountParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update project service account params
func (o *UpdateProjectServiceAccountParams) WithHTTPClient(client *http.Client) *UpdateProjectServiceAccountParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update project service account params
func (o *UpdateProjectServiceAccountParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMember adds the member to the update project service account params
func (o *UpdateProjectServiceAccountParams) WithMember(member *models.ProjectServiceAccountsUpdateDTO) *UpdateProjectServiceAccountParams {
	o.SetMember(member)
	return o
}

// SetMember adds the member to the update project service account params
func (o *UpdateProjectServiceAccountParams) SetMember(member *models.ProjectServiceAccountsUpdateDTO) {
	o.Member = member
}

// WithProjectIdentifier adds the projectIdentifier to the update project service account params
func (o *UpdateProjectServiceAccountParams) WithProjectIdentifier(projectIdentifier string) *UpdateProjectServiceAccountParams {
	o.SetProjectIdentifier(projectIdentifier)
	return o
}

// SetProjectIdentifier adds the projectIdentifier to the update project service account params
func (o *UpdateProjectServiceAccountParams) SetProjectIdentifier(projectIdentifier string) {
	o.ProjectIdentifier = projectIdentifier
}

// WithServiceAccountID adds the serviceAccountID to the update project service account params
func (o *UpdateProjectServiceAccountParams) WithServiceAccountID(serviceAccountID string) *UpdateProjectServiceAccountParams {
	o.SetServiceAccountID(serviceAccountID)
	return o
}

// SetServiceAccountID adds the serviceAccountId to the update project service account params
func (o *UpdateProjectServiceAccountParams) SetServiceAccountID(serviceAccountID string) {
	o.ServiceAccountID = serviceAccountID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateProjectServiceAccountParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Member != nil {
		if err := r.SetBodyParam(o.Member); err != nil {
			return err
		}
	}

	// query param projectIdentifier
	qrProjectIdentifier := o.ProjectIdentifier
	qProjectIdentifier := qrProjectIdentifier
	if qProjectIdentifier != "" {

		if err := r.SetQueryParam("projectIdentifier", qProjectIdentifier); err != nil {
			return err
		}
	}

	// path param serviceAccountId
	if err := r.SetPathParam("serviceAccountId", o.ServiceAccountID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
