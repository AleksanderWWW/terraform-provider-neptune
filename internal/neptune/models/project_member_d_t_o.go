// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectMemberDTO project member d t o
//
// swagger:model ProjectMemberDTO
type ProjectMemberDTO struct {

	// can leave project
	// Required: true
	CanLeaveProject *bool `json:"canLeaveProject"`

	// editable role
	// Required: true
	EditableRole *bool `json:"editableRole"`

	// invitation info
	InvitationInfo *ProjectInvitationDTO `json:"invitationInfo,omitempty"`

	// organization invitation info
	OrganizationInvitationInfo *OrganizationInvitationDTO `json:"organizationInvitationInfo,omitempty"`

	// registered member info
	RegisteredMemberInfo *RegisteredMemberInfoDTO `json:"registeredMemberInfo,omitempty"`

	// role
	// Required: true
	Role *ProjectRoleDTO `json:"role"`
}

// Validate validates this project member d t o
func (m *ProjectMemberDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCanLeaveProject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEditableRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvitationInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationInvitationInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredMemberInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectMemberDTO) validateCanLeaveProject(formats strfmt.Registry) error {

	if err := validate.Required("canLeaveProject", "body", m.CanLeaveProject); err != nil {
		return err
	}

	return nil
}

func (m *ProjectMemberDTO) validateEditableRole(formats strfmt.Registry) error {

	if err := validate.Required("editableRole", "body", m.EditableRole); err != nil {
		return err
	}

	return nil
}

func (m *ProjectMemberDTO) validateInvitationInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.InvitationInfo) { // not required
		return nil
	}

	if m.InvitationInfo != nil {
		if err := m.InvitationInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("invitationInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("invitationInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectMemberDTO) validateOrganizationInvitationInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.OrganizationInvitationInfo) { // not required
		return nil
	}

	if m.OrganizationInvitationInfo != nil {
		if err := m.OrganizationInvitationInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organizationInvitationInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("organizationInvitationInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectMemberDTO) validateRegisteredMemberInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.RegisteredMemberInfo) { // not required
		return nil
	}

	if m.RegisteredMemberInfo != nil {
		if err := m.RegisteredMemberInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registeredMemberInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registeredMemberInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectMemberDTO) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	if m.Role != nil {
		if err := m.Role.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("role")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this project member d t o based on the context it is used
func (m *ProjectMemberDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInvitationInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrganizationInvitationInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegisteredMemberInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectMemberDTO) contextValidateInvitationInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.InvitationInfo != nil {

		if swag.IsZero(m.InvitationInfo) { // not required
			return nil
		}

		if err := m.InvitationInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("invitationInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("invitationInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectMemberDTO) contextValidateOrganizationInvitationInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.OrganizationInvitationInfo != nil {

		if swag.IsZero(m.OrganizationInvitationInfo) { // not required
			return nil
		}

		if err := m.OrganizationInvitationInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organizationInvitationInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("organizationInvitationInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectMemberDTO) contextValidateRegisteredMemberInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.RegisteredMemberInfo != nil {

		if swag.IsZero(m.RegisteredMemberInfo) { // not required
			return nil
		}

		if err := m.RegisteredMemberInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registeredMemberInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registeredMemberInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectMemberDTO) contextValidateRole(ctx context.Context, formats strfmt.Registry) error {

	if m.Role != nil {

		if err := m.Role.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("role")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectMemberDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectMemberDTO) UnmarshalBinary(b []byte) error {
	var res ProjectMemberDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
