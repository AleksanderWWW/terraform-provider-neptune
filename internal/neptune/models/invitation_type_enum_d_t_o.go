// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// InvitationTypeEnumDTO invitation type enum d t o
//
// swagger:model InvitationTypeEnumDTO
type InvitationTypeEnumDTO string

func NewInvitationTypeEnumDTO(value InvitationTypeEnumDTO) *InvitationTypeEnumDTO {
	return &value
}

// Pointer returns a pointer to a freshly-allocated InvitationTypeEnumDTO.
func (m InvitationTypeEnumDTO) Pointer() *InvitationTypeEnumDTO {
	return &m
}

const (

	// InvitationTypeEnumDTOUser captures enum value "user"
	InvitationTypeEnumDTOUser InvitationTypeEnumDTO = "user"

	// InvitationTypeEnumDTOEmailRecipient captures enum value "emailRecipient"
	InvitationTypeEnumDTOEmailRecipient InvitationTypeEnumDTO = "emailRecipient"
)

// for schema
var invitationTypeEnumDTOEnum []interface{}

func init() {
	var res []InvitationTypeEnumDTO
	if err := json.Unmarshal([]byte(`["user","emailRecipient"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		invitationTypeEnumDTOEnum = append(invitationTypeEnumDTOEnum, v)
	}
}

func (m InvitationTypeEnumDTO) validateInvitationTypeEnumDTOEnum(path, location string, value InvitationTypeEnumDTO) error {
	if err := validate.EnumCase(path, location, value, invitationTypeEnumDTOEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this invitation type enum d t o
func (m InvitationTypeEnumDTO) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateInvitationTypeEnumDTOEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this invitation type enum d t o based on context it is used
func (m InvitationTypeEnumDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
