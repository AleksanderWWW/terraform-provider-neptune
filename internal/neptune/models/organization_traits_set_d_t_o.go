// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OrganizationTraitsSetDTO organization traits set d t o
//
// swagger:model OrganizationTraitsSetDTO
type OrganizationTraitsSetDTO struct {

	// active projects
	ActiveProjects *ActiveProjectsTraitDTO `json:"activeProjects,omitempty"`

	// dashboards limits
	DashboardsLimits *DashboardsLimitsTraitDTO `json:"dashboardsLimits,omitempty"`

	// model registry limits
	ModelRegistryLimits *ModelRegistryLimitsTraitDTO `json:"modelRegistryLimits,omitempty"`

	// operation limit
	OperationLimit *OperationsLimitTraitDTO `json:"operationLimit,omitempty"`

	// plan upgrade
	PlanUpgrade *PlanUpgradeTraitDTO `json:"planUpgrade,omitempty"`

	// project visibility restricted
	ProjectVisibilityRestricted *ProjectVisibilityRestrictedTraitDTO `json:"projectVisibilityRestricted,omitempty"`

	// service accounts
	ServiceAccounts *ServiceAccountsTraitDTO `json:"serviceAccounts,omitempty"`

	// table views limits
	TableViewsLimits *TableViewsLimitsTraitDTO `json:"tableViewsLimits,omitempty"`

	// ui workspace switching
	UIWorkspaceSwitching UIWorkspaceSwitchingTraitDTO `json:"uiWorkspaceSwitching,omitempty"`
}

// Validate validates this organization traits set d t o
func (m *OrganizationTraitsSetDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActiveProjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDashboardsLimits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModelRegistryLimits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperationLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlanUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectVisibilityRestricted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceAccounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTableViewsLimits(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrganizationTraitsSetDTO) validateActiveProjects(formats strfmt.Registry) error {
	if swag.IsZero(m.ActiveProjects) { // not required
		return nil
	}

	if m.ActiveProjects != nil {
		if err := m.ActiveProjects.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activeProjects")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("activeProjects")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationTraitsSetDTO) validateDashboardsLimits(formats strfmt.Registry) error {
	if swag.IsZero(m.DashboardsLimits) { // not required
		return nil
	}

	if m.DashboardsLimits != nil {
		if err := m.DashboardsLimits.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dashboardsLimits")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dashboardsLimits")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationTraitsSetDTO) validateModelRegistryLimits(formats strfmt.Registry) error {
	if swag.IsZero(m.ModelRegistryLimits) { // not required
		return nil
	}

	if m.ModelRegistryLimits != nil {
		if err := m.ModelRegistryLimits.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modelRegistryLimits")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("modelRegistryLimits")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationTraitsSetDTO) validateOperationLimit(formats strfmt.Registry) error {
	if swag.IsZero(m.OperationLimit) { // not required
		return nil
	}

	if m.OperationLimit != nil {
		if err := m.OperationLimit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operationLimit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operationLimit")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationTraitsSetDTO) validatePlanUpgrade(formats strfmt.Registry) error {
	if swag.IsZero(m.PlanUpgrade) { // not required
		return nil
	}

	if m.PlanUpgrade != nil {
		if err := m.PlanUpgrade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("planUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("planUpgrade")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationTraitsSetDTO) validateProjectVisibilityRestricted(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectVisibilityRestricted) { // not required
		return nil
	}

	if m.ProjectVisibilityRestricted != nil {
		if err := m.ProjectVisibilityRestricted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("projectVisibilityRestricted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("projectVisibilityRestricted")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationTraitsSetDTO) validateServiceAccounts(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceAccounts) { // not required
		return nil
	}

	if m.ServiceAccounts != nil {
		if err := m.ServiceAccounts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceAccounts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceAccounts")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationTraitsSetDTO) validateTableViewsLimits(formats strfmt.Registry) error {
	if swag.IsZero(m.TableViewsLimits) { // not required
		return nil
	}

	if m.TableViewsLimits != nil {
		if err := m.TableViewsLimits.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tableViewsLimits")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tableViewsLimits")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this organization traits set d t o based on the context it is used
func (m *OrganizationTraitsSetDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActiveProjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDashboardsLimits(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModelRegistryLimits(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOperationLimit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlanUpgrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProjectVisibilityRestricted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceAccounts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTableViewsLimits(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrganizationTraitsSetDTO) contextValidateActiveProjects(ctx context.Context, formats strfmt.Registry) error {

	if m.ActiveProjects != nil {

		if swag.IsZero(m.ActiveProjects) { // not required
			return nil
		}

		if err := m.ActiveProjects.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activeProjects")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("activeProjects")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationTraitsSetDTO) contextValidateDashboardsLimits(ctx context.Context, formats strfmt.Registry) error {

	if m.DashboardsLimits != nil {

		if swag.IsZero(m.DashboardsLimits) { // not required
			return nil
		}

		if err := m.DashboardsLimits.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dashboardsLimits")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dashboardsLimits")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationTraitsSetDTO) contextValidateModelRegistryLimits(ctx context.Context, formats strfmt.Registry) error {

	if m.ModelRegistryLimits != nil {

		if swag.IsZero(m.ModelRegistryLimits) { // not required
			return nil
		}

		if err := m.ModelRegistryLimits.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modelRegistryLimits")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("modelRegistryLimits")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationTraitsSetDTO) contextValidateOperationLimit(ctx context.Context, formats strfmt.Registry) error {

	if m.OperationLimit != nil {

		if swag.IsZero(m.OperationLimit) { // not required
			return nil
		}

		if err := m.OperationLimit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operationLimit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operationLimit")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationTraitsSetDTO) contextValidatePlanUpgrade(ctx context.Context, formats strfmt.Registry) error {

	if m.PlanUpgrade != nil {

		if swag.IsZero(m.PlanUpgrade) { // not required
			return nil
		}

		if err := m.PlanUpgrade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("planUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("planUpgrade")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationTraitsSetDTO) contextValidateProjectVisibilityRestricted(ctx context.Context, formats strfmt.Registry) error {

	if m.ProjectVisibilityRestricted != nil {

		if swag.IsZero(m.ProjectVisibilityRestricted) { // not required
			return nil
		}

		if err := m.ProjectVisibilityRestricted.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("projectVisibilityRestricted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("projectVisibilityRestricted")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationTraitsSetDTO) contextValidateServiceAccounts(ctx context.Context, formats strfmt.Registry) error {

	if m.ServiceAccounts != nil {

		if swag.IsZero(m.ServiceAccounts) { // not required
			return nil
		}

		if err := m.ServiceAccounts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceAccounts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceAccounts")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationTraitsSetDTO) contextValidateTableViewsLimits(ctx context.Context, formats strfmt.Registry) error {

	if m.TableViewsLimits != nil {

		if swag.IsZero(m.TableViewsLimits) { // not required
			return nil
		}

		if err := m.TableViewsLimits.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tableViewsLimits")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tableViewsLimits")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrganizationTraitsSetDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrganizationTraitsSetDTO) UnmarshalBinary(b []byte) error {
	var res OrganizationTraitsSetDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
