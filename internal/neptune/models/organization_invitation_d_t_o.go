// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrganizationInvitationDTO organization invitation d t o
//
// swagger:model OrganizationInvitationDTO
type OrganizationInvitationDTO struct {

	// created at
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"createdAt"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// invitation type
	// Required: true
	InvitationType *InvitationTypeEnumDTO `json:"invitationType"`

	// invited by
	// Required: true
	InvitedBy *string `json:"invitedBy"`

	// invitee
	// Required: true
	Invitee *string `json:"invitee"`

	// last sent at
	// Required: true
	// Format: date-time
	LastSentAt *strfmt.DateTime `json:"lastSentAt"`

	// organization name
	// Required: true
	OrganizationName *string `json:"organizationName"`

	// projects
	// Required: true
	Projects []*OrganizationInvitationProjectEntryDTO `json:"projects"`

	// role grant
	// Required: true
	RoleGrant *OrganizationRoleDTO `json:"roleGrant"`

	// status
	// Required: true
	Status *InvitationStatusEnumDTO `json:"status"`
}

// Validate validates this organization invitation d t o
func (m *OrganizationInvitationDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvitationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvitedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvitee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastSentAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleGrant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrganizationInvitationDTO) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrganizationInvitationDTO) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrganizationInvitationDTO) validateInvitationType(formats strfmt.Registry) error {

	if err := validate.Required("invitationType", "body", m.InvitationType); err != nil {
		return err
	}

	if err := validate.Required("invitationType", "body", m.InvitationType); err != nil {
		return err
	}

	if m.InvitationType != nil {
		if err := m.InvitationType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("invitationType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("invitationType")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationInvitationDTO) validateInvitedBy(formats strfmt.Registry) error {

	if err := validate.Required("invitedBy", "body", m.InvitedBy); err != nil {
		return err
	}

	return nil
}

func (m *OrganizationInvitationDTO) validateInvitee(formats strfmt.Registry) error {

	if err := validate.Required("invitee", "body", m.Invitee); err != nil {
		return err
	}

	return nil
}

func (m *OrganizationInvitationDTO) validateLastSentAt(formats strfmt.Registry) error {

	if err := validate.Required("lastSentAt", "body", m.LastSentAt); err != nil {
		return err
	}

	if err := validate.FormatOf("lastSentAt", "body", "date-time", m.LastSentAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrganizationInvitationDTO) validateOrganizationName(formats strfmt.Registry) error {

	if err := validate.Required("organizationName", "body", m.OrganizationName); err != nil {
		return err
	}

	return nil
}

func (m *OrganizationInvitationDTO) validateProjects(formats strfmt.Registry) error {

	if err := validate.Required("projects", "body", m.Projects); err != nil {
		return err
	}

	for i := 0; i < len(m.Projects); i++ {
		if swag.IsZero(m.Projects[i]) { // not required
			continue
		}

		if m.Projects[i] != nil {
			if err := m.Projects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("projects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrganizationInvitationDTO) validateRoleGrant(formats strfmt.Registry) error {

	if err := validate.Required("roleGrant", "body", m.RoleGrant); err != nil {
		return err
	}

	if err := validate.Required("roleGrant", "body", m.RoleGrant); err != nil {
		return err
	}

	if m.RoleGrant != nil {
		if err := m.RoleGrant.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("roleGrant")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("roleGrant")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationInvitationDTO) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this organization invitation d t o based on the context it is used
func (m *OrganizationInvitationDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInvitationType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRoleGrant(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrganizationInvitationDTO) contextValidateInvitationType(ctx context.Context, formats strfmt.Registry) error {

	if m.InvitationType != nil {

		if err := m.InvitationType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("invitationType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("invitationType")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationInvitationDTO) contextValidateProjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Projects); i++ {

		if m.Projects[i] != nil {

			if swag.IsZero(m.Projects[i]) { // not required
				return nil
			}

			if err := m.Projects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("projects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrganizationInvitationDTO) contextValidateRoleGrant(ctx context.Context, formats strfmt.Registry) error {

	if m.RoleGrant != nil {

		if err := m.RoleGrant.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("roleGrant")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("roleGrant")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationInvitationDTO) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {

		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrganizationInvitationDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrganizationInvitationDTO) UnmarshalBinary(b []byte) error {
	var res OrganizationInvitationDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
