// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectUsageDTO project usage d t o
//
// swagger:model ProjectUsageDTO
type ProjectUsageDTO struct {

	// deleted
	// Format: date-time
	Deleted strfmt.DateTime `json:"deleted,omitempty"`

	// last30 days seconds
	// Required: true
	Last30DaysSeconds *int64 `json:"last30DaysSeconds"`

	// project Id
	// Required: true
	// Format: uuid
	ProjectID *strfmt.UUID `json:"projectId"`

	// project name
	// Required: true
	ProjectName *string `json:"projectName"`

	// storage used
	// Required: true
	StorageUsed *int64 `json:"storageUsed"`
}

// Validate validates this project usage d t o
func (m *ProjectUsageDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLast30DaysSeconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageUsed(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectUsageDTO) validateDeleted(formats strfmt.Registry) error {
	if swag.IsZero(m.Deleted) { // not required
		return nil
	}

	if err := validate.FormatOf("deleted", "body", "date-time", m.Deleted.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProjectUsageDTO) validateLast30DaysSeconds(formats strfmt.Registry) error {

	if err := validate.Required("last30DaysSeconds", "body", m.Last30DaysSeconds); err != nil {
		return err
	}

	return nil
}

func (m *ProjectUsageDTO) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("projectId", "body", m.ProjectID); err != nil {
		return err
	}

	if err := validate.FormatOf("projectId", "body", "uuid", m.ProjectID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProjectUsageDTO) validateProjectName(formats strfmt.Registry) error {

	if err := validate.Required("projectName", "body", m.ProjectName); err != nil {
		return err
	}

	return nil
}

func (m *ProjectUsageDTO) validateStorageUsed(formats strfmt.Registry) error {

	if err := validate.Required("storageUsed", "body", m.StorageUsed); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this project usage d t o based on context it is used
func (m *ProjectUsageDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProjectUsageDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectUsageDTO) UnmarshalBinary(b []byte) error {
	var res ProjectUsageDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
