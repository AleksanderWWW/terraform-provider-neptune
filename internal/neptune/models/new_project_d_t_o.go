// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewProjectDTO new project d t o
//
// swagger:model NewProjectDTO
type NewProjectDTO struct {

	// description
	Description string `json:"description,omitempty"`

	// display class
	DisplayClass string `json:"displayClass,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// organization Id
	// Required: true
	// Format: uuid
	OrganizationID *strfmt.UUID `json:"organizationId"`

	// project key
	ProjectKey string `json:"projectKey,omitempty"`

	// version
	Version int32 `json:"version,omitempty"`

	// visibility
	Visibility ProjectVisibilityDTO `json:"visibility,omitempty"`
}

// Validate validates this new project d t o
func (m *NewProjectDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisibility(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewProjectDTO) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *NewProjectDTO) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("organizationId", "body", m.OrganizationID); err != nil {
		return err
	}

	if err := validate.FormatOf("organizationId", "body", "uuid", m.OrganizationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NewProjectDTO) validateVisibility(formats strfmt.Registry) error {
	if swag.IsZero(m.Visibility) { // not required
		return nil
	}

	if err := m.Visibility.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("visibility")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("visibility")
		}
		return err
	}

	return nil
}

// ContextValidate validate this new project d t o based on the context it is used
func (m *NewProjectDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVisibility(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewProjectDTO) contextValidateVisibility(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Visibility) { // not required
		return nil
	}

	if err := m.Visibility.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("visibility")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("visibility")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewProjectDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewProjectDTO) UnmarshalBinary(b []byte) error {
	var res NewProjectDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
