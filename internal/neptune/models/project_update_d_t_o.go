// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProjectUpdateDTO project update d t o
//
// swagger:model ProjectUpdateDTO
type ProjectUpdateDTO struct {

	// archived
	Archived bool `json:"archived,omitempty"`

	// code access
	CodeAccess ProjectCodeAccessDTO `json:"codeAccess,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// display class
	DisplayClass string `json:"displayClass,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// visibility
	Visibility ProjectVisibilityDTO `json:"visibility,omitempty"`
}

// Validate validates this project update d t o
func (m *ProjectUpdateDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCodeAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisibility(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectUpdateDTO) validateCodeAccess(formats strfmt.Registry) error {
	if swag.IsZero(m.CodeAccess) { // not required
		return nil
	}

	if err := m.CodeAccess.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("codeAccess")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("codeAccess")
		}
		return err
	}

	return nil
}

func (m *ProjectUpdateDTO) validateVisibility(formats strfmt.Registry) error {
	if swag.IsZero(m.Visibility) { // not required
		return nil
	}

	if err := m.Visibility.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("visibility")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("visibility")
		}
		return err
	}

	return nil
}

// ContextValidate validate this project update d t o based on the context it is used
func (m *ProjectUpdateDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCodeAccess(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVisibility(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectUpdateDTO) contextValidateCodeAccess(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.CodeAccess) { // not required
		return nil
	}

	if err := m.CodeAccess.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("codeAccess")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("codeAccess")
		}
		return err
	}

	return nil
}

func (m *ProjectUpdateDTO) contextValidateVisibility(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Visibility) { // not required
		return nil
	}

	if err := m.Visibility.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("visibility")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("visibility")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectUpdateDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectUpdateDTO) UnmarshalBinary(b []byte) error {
	var res ProjectUpdateDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
