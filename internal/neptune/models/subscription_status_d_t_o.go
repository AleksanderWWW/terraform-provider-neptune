// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SubscriptionStatusDTO subscription status d t o
//
// swagger:model SubscriptionStatusDTO
type SubscriptionStatusDTO string

func NewSubscriptionStatusDTO(value SubscriptionStatusDTO) *SubscriptionStatusDTO {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SubscriptionStatusDTO.
func (m SubscriptionStatusDTO) Pointer() *SubscriptionStatusDTO {
	return &m
}

const (

	// SubscriptionStatusDTOInactive captures enum value "inactive"
	SubscriptionStatusDTOInactive SubscriptionStatusDTO = "inactive"

	// SubscriptionStatusDTOPastDue captures enum value "past_due"
	SubscriptionStatusDTOPastDue SubscriptionStatusDTO = "past_due"

	// SubscriptionStatusDTOOk captures enum value "ok"
	SubscriptionStatusDTOOk SubscriptionStatusDTO = "ok"
)

// for schema
var subscriptionStatusDTOEnum []interface{}

func init() {
	var res []SubscriptionStatusDTO
	if err := json.Unmarshal([]byte(`["inactive","past_due","ok"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subscriptionStatusDTOEnum = append(subscriptionStatusDTOEnum, v)
	}
}

func (m SubscriptionStatusDTO) validateSubscriptionStatusDTOEnum(path, location string, value SubscriptionStatusDTO) error {
	if err := validate.EnumCase(path, location, value, subscriptionStatusDTOEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this subscription status d t o
func (m SubscriptionStatusDTO) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSubscriptionStatusDTOEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this subscription status d t o based on context it is used
func (m SubscriptionStatusDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
