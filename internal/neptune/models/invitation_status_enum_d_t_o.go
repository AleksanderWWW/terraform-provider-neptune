// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// InvitationStatusEnumDTO invitation status enum d t o
//
// swagger:model InvitationStatusEnumDTO
type InvitationStatusEnumDTO string

func NewInvitationStatusEnumDTO(value InvitationStatusEnumDTO) *InvitationStatusEnumDTO {
	return &value
}

// Pointer returns a pointer to a freshly-allocated InvitationStatusEnumDTO.
func (m InvitationStatusEnumDTO) Pointer() *InvitationStatusEnumDTO {
	return &m
}

const (

	// InvitationStatusEnumDTOPending captures enum value "pending"
	InvitationStatusEnumDTOPending InvitationStatusEnumDTO = "pending"

	// InvitationStatusEnumDTOAccepted captures enum value "accepted"
	InvitationStatusEnumDTOAccepted InvitationStatusEnumDTO = "accepted"

	// InvitationStatusEnumDTORejected captures enum value "rejected"
	InvitationStatusEnumDTORejected InvitationStatusEnumDTO = "rejected"

	// InvitationStatusEnumDTORevoked captures enum value "revoked"
	InvitationStatusEnumDTORevoked InvitationStatusEnumDTO = "revoked"
)

// for schema
var invitationStatusEnumDTOEnum []interface{}

func init() {
	var res []InvitationStatusEnumDTO
	if err := json.Unmarshal([]byte(`["pending","accepted","rejected","revoked"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		invitationStatusEnumDTOEnum = append(invitationStatusEnumDTOEnum, v)
	}
}

func (m InvitationStatusEnumDTO) validateInvitationStatusEnumDTOEnum(path, location string, value InvitationStatusEnumDTO) error {
	if err := validate.EnumCase(path, location, value, invitationStatusEnumDTOEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this invitation status enum d t o
func (m InvitationStatusEnumDTO) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateInvitationStatusEnumDTOEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this invitation status enum d t o based on context it is used
func (m InvitationStatusEnumDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
