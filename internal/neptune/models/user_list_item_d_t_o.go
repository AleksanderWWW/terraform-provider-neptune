// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserListItemDTO user list item d t o
//
// swagger:model UserListItemDTO
type UserListItemDTO struct {

	// avatar source
	// Required: true
	AvatarSource *AvatarSourceEnum `json:"avatarSource"`

	// avatar Url
	// Required: true
	AvatarURL *string `json:"avatarUrl"`

	// first name
	// Required: true
	FirstName *string `json:"firstName"`

	// last name
	// Required: true
	LastName *string `json:"lastName"`

	// username
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this user list item d t o
func (m *UserListItemDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvatarSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvatarURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserListItemDTO) validateAvatarSource(formats strfmt.Registry) error {

	if err := validate.Required("avatarSource", "body", m.AvatarSource); err != nil {
		return err
	}

	if err := validate.Required("avatarSource", "body", m.AvatarSource); err != nil {
		return err
	}

	if m.AvatarSource != nil {
		if err := m.AvatarSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("avatarSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("avatarSource")
			}
			return err
		}
	}

	return nil
}

func (m *UserListItemDTO) validateAvatarURL(formats strfmt.Registry) error {

	if err := validate.Required("avatarUrl", "body", m.AvatarURL); err != nil {
		return err
	}

	return nil
}

func (m *UserListItemDTO) validateFirstName(formats strfmt.Registry) error {

	if err := validate.Required("firstName", "body", m.FirstName); err != nil {
		return err
	}

	return nil
}

func (m *UserListItemDTO) validateLastName(formats strfmt.Registry) error {

	if err := validate.Required("lastName", "body", m.LastName); err != nil {
		return err
	}

	return nil
}

func (m *UserListItemDTO) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this user list item d t o based on the context it is used
func (m *UserListItemDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAvatarSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserListItemDTO) contextValidateAvatarSource(ctx context.Context, formats strfmt.Registry) error {

	if m.AvatarSource != nil {

		if err := m.AvatarSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("avatarSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("avatarSource")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserListItemDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserListItemDTO) UnmarshalBinary(b []byte) error {
	var res UserListItemDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
