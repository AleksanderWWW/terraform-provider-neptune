// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V2IndividualPricingDTO v2 individual pricing d t o
//
// swagger:model V2IndividualPricingDTO
type V2IndividualPricingDTO struct {

	// monitoring time pricing
	// Required: true
	MonitoringTimePricing *GraduatedPricingDTO `json:"monitoringTimePricing"`

	// storage pricing
	// Required: true
	StoragePricing *GraduatedPricingDTO `json:"storagePricing"`
}

// Validate validates this v2 individual pricing d t o
func (m *V2IndividualPricingDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMonitoringTimePricing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoragePricing(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2IndividualPricingDTO) validateMonitoringTimePricing(formats strfmt.Registry) error {

	if err := validate.Required("monitoringTimePricing", "body", m.MonitoringTimePricing); err != nil {
		return err
	}

	if m.MonitoringTimePricing != nil {
		if err := m.MonitoringTimePricing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monitoringTimePricing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monitoringTimePricing")
			}
			return err
		}
	}

	return nil
}

func (m *V2IndividualPricingDTO) validateStoragePricing(formats strfmt.Registry) error {

	if err := validate.Required("storagePricing", "body", m.StoragePricing); err != nil {
		return err
	}

	if m.StoragePricing != nil {
		if err := m.StoragePricing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storagePricing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storagePricing")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v2 individual pricing d t o based on the context it is used
func (m *V2IndividualPricingDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMonitoringTimePricing(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStoragePricing(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2IndividualPricingDTO) contextValidateMonitoringTimePricing(ctx context.Context, formats strfmt.Registry) error {

	if m.MonitoringTimePricing != nil {

		if err := m.MonitoringTimePricing.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monitoringTimePricing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monitoringTimePricing")
			}
			return err
		}
	}

	return nil
}

func (m *V2IndividualPricingDTO) contextValidateStoragePricing(ctx context.Context, formats strfmt.Registry) error {

	if m.StoragePricing != nil {

		if err := m.StoragePricing.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storagePricing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storagePricing")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2IndividualPricingDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2IndividualPricingDTO) UnmarshalBinary(b []byte) error {
	var res V2IndividualPricingDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
