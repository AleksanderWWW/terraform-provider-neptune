// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrganizationOwnerDTO organization owner d t o
//
// swagger:model OrganizationOwnerDTO
type OrganizationOwnerDTO struct {

	// email
	// Required: true
	Email *string `json:"email"`

	// registered member info
	// Required: true
	RegisteredMemberInfo *RegisteredMemberInfoDTO `json:"registeredMemberInfo"`
}

// Validate validates this organization owner d t o
func (m *OrganizationOwnerDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredMemberInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrganizationOwnerDTO) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *OrganizationOwnerDTO) validateRegisteredMemberInfo(formats strfmt.Registry) error {

	if err := validate.Required("registeredMemberInfo", "body", m.RegisteredMemberInfo); err != nil {
		return err
	}

	if m.RegisteredMemberInfo != nil {
		if err := m.RegisteredMemberInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registeredMemberInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registeredMemberInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this organization owner d t o based on the context it is used
func (m *OrganizationOwnerDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRegisteredMemberInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrganizationOwnerDTO) contextValidateRegisteredMemberInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.RegisteredMemberInfo != nil {

		if err := m.RegisteredMemberInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registeredMemberInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registeredMemberInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrganizationOwnerDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrganizationOwnerDTO) UnmarshalBinary(b []byte) error {
	var res OrganizationOwnerDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
