// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MonitoringTimePackageDTO monitoring time package d t o
//
// swagger:model MonitoringTimePackageDTO
type MonitoringTimePackageDTO struct {

	// creation date
	// Required: true
	// Format: date-time
	CreationDate *strfmt.DateTime `json:"creationDate"`

	// description
	Description string `json:"description,omitempty"`

	// expiration date
	// Required: true
	// Format: date-time
	ExpirationDate *strfmt.DateTime `json:"expirationDate"`

	// label
	Label string `json:"label,omitempty"`

	// price in cents
	// Required: true
	PriceInCents *int32 `json:"priceInCents"`

	// seconds in package
	// Required: true
	SecondsInPackage *int64 `json:"secondsInPackage"`

	// seconds used
	// Required: true
	SecondsUsed *int64 `json:"secondsUsed"`
}

// Validate validates this monitoring time package d t o
func (m *MonitoringTimePackageDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceInCents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondsInPackage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondsUsed(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MonitoringTimePackageDTO) validateCreationDate(formats strfmt.Registry) error {

	if err := validate.Required("creationDate", "body", m.CreationDate); err != nil {
		return err
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MonitoringTimePackageDTO) validateExpirationDate(formats strfmt.Registry) error {

	if err := validate.Required("expirationDate", "body", m.ExpirationDate); err != nil {
		return err
	}

	if err := validate.FormatOf("expirationDate", "body", "date-time", m.ExpirationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MonitoringTimePackageDTO) validatePriceInCents(formats strfmt.Registry) error {

	if err := validate.Required("priceInCents", "body", m.PriceInCents); err != nil {
		return err
	}

	return nil
}

func (m *MonitoringTimePackageDTO) validateSecondsInPackage(formats strfmt.Registry) error {

	if err := validate.Required("secondsInPackage", "body", m.SecondsInPackage); err != nil {
		return err
	}

	return nil
}

func (m *MonitoringTimePackageDTO) validateSecondsUsed(formats strfmt.Registry) error {

	if err := validate.Required("secondsUsed", "body", m.SecondsUsed); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this monitoring time package d t o based on context it is used
func (m *MonitoringTimePackageDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MonitoringTimePackageDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MonitoringTimePackageDTO) UnmarshalBinary(b []byte) error {
	var res MonitoringTimePackageDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
