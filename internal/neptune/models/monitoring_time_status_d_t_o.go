// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MonitoringTimeStatusDTO monitoring time status d t o
//
// swagger:model MonitoringTimeStatusDTO
type MonitoringTimeStatusDTO struct {

	// available seconds
	// Required: true
	AvailableSeconds *int64 `json:"availableSeconds"`

	// last30 days seconds
	// Required: true
	Last30DaysSeconds *int64 `json:"last30DaysSeconds"`

	// next top up date
	// Format: date-time
	NextTopUpDate strfmt.DateTime `json:"nextTopUpDate,omitempty"`

	// next top up seconds
	// Required: true
	NextTopUpSeconds *int64 `json:"nextTopUpSeconds"`

	// surplus seconds
	// Required: true
	SurplusSeconds *int64 `json:"surplusSeconds"`
}

// Validate validates this monitoring time status d t o
func (m *MonitoringTimeStatusDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailableSeconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLast30DaysSeconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextTopUpDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextTopUpSeconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSurplusSeconds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MonitoringTimeStatusDTO) validateAvailableSeconds(formats strfmt.Registry) error {

	if err := validate.Required("availableSeconds", "body", m.AvailableSeconds); err != nil {
		return err
	}

	return nil
}

func (m *MonitoringTimeStatusDTO) validateLast30DaysSeconds(formats strfmt.Registry) error {

	if err := validate.Required("last30DaysSeconds", "body", m.Last30DaysSeconds); err != nil {
		return err
	}

	return nil
}

func (m *MonitoringTimeStatusDTO) validateNextTopUpDate(formats strfmt.Registry) error {
	if swag.IsZero(m.NextTopUpDate) { // not required
		return nil
	}

	if err := validate.FormatOf("nextTopUpDate", "body", "date-time", m.NextTopUpDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MonitoringTimeStatusDTO) validateNextTopUpSeconds(formats strfmt.Registry) error {

	if err := validate.Required("nextTopUpSeconds", "body", m.NextTopUpSeconds); err != nil {
		return err
	}

	return nil
}

func (m *MonitoringTimeStatusDTO) validateSurplusSeconds(formats strfmt.Registry) error {

	if err := validate.Required("surplusSeconds", "body", m.SurplusSeconds); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this monitoring time status d t o based on context it is used
func (m *MonitoringTimeStatusDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MonitoringTimeStatusDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MonitoringTimeStatusDTO) UnmarshalBinary(b []byte) error {
	var res MonitoringTimeStatusDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
