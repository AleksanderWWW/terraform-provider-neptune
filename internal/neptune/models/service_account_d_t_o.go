// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceAccountDTO service account d t o
//
// swagger:model ServiceAccountDTO
type ServiceAccountDTO struct {

	// created
	// Required: true
	// Format: date-time
	Created *strfmt.DateTime `json:"created"`

	// created by
	// Required: true
	CreatedBy *string `json:"createdBy"`

	// deactivated
	// Format: date-time
	Deactivated strfmt.DateTime `json:"deactivated,omitempty"`

	// deactivated by
	DeactivatedBy string `json:"deactivatedBy,omitempty"`

	// display name
	// Required: true
	DisplayName *string `json:"displayName"`

	// id
	// Required: true
	ID *string `json:"id"`

	// key generated at
	// Format: date-time
	KeyGeneratedAt strfmt.DateTime `json:"keyGeneratedAt,omitempty"`

	// key generated by
	KeyGeneratedBy string `json:"keyGeneratedBy,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// organization Id
	// Required: true
	// Format: uuid
	OrganizationID *strfmt.UUID `json:"organizationId"`
}

// Validate validates this service account d t o
func (m *ServiceAccountDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeactivated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyGeneratedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceAccountDTO) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", m.Created); err != nil {
		return err
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServiceAccountDTO) validateCreatedBy(formats strfmt.Registry) error {

	if err := validate.Required("createdBy", "body", m.CreatedBy); err != nil {
		return err
	}

	return nil
}

func (m *ServiceAccountDTO) validateDeactivated(formats strfmt.Registry) error {
	if swag.IsZero(m.Deactivated) { // not required
		return nil
	}

	if err := validate.FormatOf("deactivated", "body", "date-time", m.Deactivated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServiceAccountDTO) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("displayName", "body", m.DisplayName); err != nil {
		return err
	}

	return nil
}

func (m *ServiceAccountDTO) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceAccountDTO) validateKeyGeneratedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.KeyGeneratedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("keyGeneratedAt", "body", "date-time", m.KeyGeneratedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServiceAccountDTO) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ServiceAccountDTO) validateOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("organizationId", "body", m.OrganizationID); err != nil {
		return err
	}

	if err := validate.FormatOf("organizationId", "body", "uuid", m.OrganizationID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this service account d t o based on context it is used
func (m *ServiceAccountDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServiceAccountDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceAccountDTO) UnmarshalBinary(b []byte) error {
	var res ServiceAccountDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
