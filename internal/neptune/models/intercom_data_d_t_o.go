// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IntercomDataDTO intercom data d t o
//
// swagger:model IntercomDataDTO
type IntercomDataDTO struct {

	// organization data
	OrganizationData *OrganizationIntercomDataDTO `json:"organizationData,omitempty"`

	// user data
	UserData *UserIntercomDataDTO `json:"userData,omitempty"`
}

// Validate validates this intercom data d t o
func (m *IntercomDataDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrganizationData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IntercomDataDTO) validateOrganizationData(formats strfmt.Registry) error {
	if swag.IsZero(m.OrganizationData) { // not required
		return nil
	}

	if m.OrganizationData != nil {
		if err := m.OrganizationData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organizationData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("organizationData")
			}
			return err
		}
	}

	return nil
}

func (m *IntercomDataDTO) validateUserData(formats strfmt.Registry) error {
	if swag.IsZero(m.UserData) { // not required
		return nil
	}

	if m.UserData != nil {
		if err := m.UserData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userData")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this intercom data d t o based on the context it is used
func (m *IntercomDataDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOrganizationData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IntercomDataDTO) contextValidateOrganizationData(ctx context.Context, formats strfmt.Registry) error {

	if m.OrganizationData != nil {

		if swag.IsZero(m.OrganizationData) { // not required
			return nil
		}

		if err := m.OrganizationData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organizationData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("organizationData")
			}
			return err
		}
	}

	return nil
}

func (m *IntercomDataDTO) contextValidateUserData(ctx context.Context, formats strfmt.Registry) error {

	if m.UserData != nil {

		if swag.IsZero(m.UserData) { // not required
			return nil
		}

		if err := m.UserData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userData")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IntercomDataDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IntercomDataDTO) UnmarshalBinary(b []byte) error {
	var res IntercomDataDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
