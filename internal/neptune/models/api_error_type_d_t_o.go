// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// APIErrorTypeDTO Api error type d t o
//
// swagger:model ApiErrorTypeDTO
type APIErrorTypeDTO string

func NewAPIErrorTypeDTO(value APIErrorTypeDTO) *APIErrorTypeDTO {
	return &value
}

// Pointer returns a pointer to a freshly-allocated APIErrorTypeDTO.
func (m APIErrorTypeDTO) Pointer() *APIErrorTypeDTO {
	return &m
}

const (

	// APIErrorTypeDTOLIMITOFPROJECTSREACHED captures enum value "LIMIT_OF_PROJECTS_REACHED"
	APIErrorTypeDTOLIMITOFPROJECTSREACHED APIErrorTypeDTO = "LIMIT_OF_PROJECTS_REACHED"

	// APIErrorTypeDTOLIMITOFMEMBERSINORGANIZATIONREACHED captures enum value "LIMIT_OF_MEMBERS_IN_ORGANIZATION_REACHED"
	APIErrorTypeDTOLIMITOFMEMBERSINORGANIZATIONREACHED APIErrorTypeDTO = "LIMIT_OF_MEMBERS_IN_ORGANIZATION_REACHED"

	// APIErrorTypeDTOWORKSPACEREADONLY captures enum value "WORKSPACE_READONLY"
	APIErrorTypeDTOWORKSPACEREADONLY APIErrorTypeDTO = "WORKSPACE_READONLY"

	// APIErrorTypeDTOUSERNOTINPROJECT captures enum value "USER_NOT_IN_PROJECT"
	APIErrorTypeDTOUSERNOTINPROJECT APIErrorTypeDTO = "USER_NOT_IN_PROJECT"

	// APIErrorTypeDTOSERVICEACCOUNTALREADYEXISTSINORGANIZATION captures enum value "SERVICE_ACCOUNT_ALREADY_EXISTS_IN_ORGANIZATION"
	APIErrorTypeDTOSERVICEACCOUNTALREADYEXISTSINORGANIZATION APIErrorTypeDTO = "SERVICE_ACCOUNT_ALREADY_EXISTS_IN_ORGANIZATION"

	// APIErrorTypeDTOSERVICEACCOUNTNOTINPROJECT captures enum value "SERVICE_ACCOUNT_NOT_IN_PROJECT"
	APIErrorTypeDTOSERVICEACCOUNTNOTINPROJECT APIErrorTypeDTO = "SERVICE_ACCOUNT_NOT_IN_PROJECT"

	// APIErrorTypeDTOLIMITOFSERVICEACCOUNTSINORGANIZATIONREACHED captures enum value "LIMIT_OF_SERVICE_ACCOUNTS_IN_ORGANIZATION_REACHED"
	APIErrorTypeDTOLIMITOFSERVICEACCOUNTSINORGANIZATIONREACHED APIErrorTypeDTO = "LIMIT_OF_SERVICE_ACCOUNTS_IN_ORGANIZATION_REACHED"

	// APIErrorTypeDTOCANNOTADDMEMBERSTOPRIVATEINDIVIDUALPROJECT captures enum value "CANNOT_ADD_MEMBERS_TO_PRIVATE_INDIVIDUAL_PROJECT"
	APIErrorTypeDTOCANNOTADDMEMBERSTOPRIVATEINDIVIDUALPROJECT APIErrorTypeDTO = "CANNOT_ADD_MEMBERS_TO_PRIVATE_INDIVIDUAL_PROJECT"

	// APIErrorTypeDTOCANNOTADDMANAGERTOINDIVIDUALPROJECT captures enum value "CANNOT_ADD_MANAGER_TO_INDIVIDUAL_PROJECT"
	APIErrorTypeDTOCANNOTADDMANAGERTOINDIVIDUALPROJECT APIErrorTypeDTO = "CANNOT_ADD_MANAGER_TO_INDIVIDUAL_PROJECT"

	// APIErrorTypeDTOCANNOTADDOUTSIDERSTOTEAMPROJECT captures enum value "CANNOT_ADD_OUTSIDERS_TO_TEAM_PROJECT"
	APIErrorTypeDTOCANNOTADDOUTSIDERSTOTEAMPROJECT APIErrorTypeDTO = "CANNOT_ADD_OUTSIDERS_TO_TEAM_PROJECT"

	// APIErrorTypeDTOCANNOTLEAVETEAMPROJECT captures enum value "CANNOT_LEAVE_TEAM_PROJECT"
	APIErrorTypeDTOCANNOTLEAVETEAMPROJECT APIErrorTypeDTO = "CANNOT_LEAVE_TEAM_PROJECT"

	// APIErrorTypeDTOADMINCANNOTLEAVEPROJECT captures enum value "ADMIN_CANNOT_LEAVE_PROJECT"
	APIErrorTypeDTOADMINCANNOTLEAVEPROJECT APIErrorTypeDTO = "ADMIN_CANNOT_LEAVE_PROJECT"

	// APIErrorTypeDTOLIMITOFPROJECTMEMBERSREACHED captures enum value "LIMIT_OF_PROJECT_MEMBERS_REACHED"
	APIErrorTypeDTOLIMITOFPROJECTMEMBERSREACHED APIErrorTypeDTO = "LIMIT_OF_PROJECT_MEMBERS_REACHED"

	// APIErrorTypeDTOVISIBILITYRESTRICTED captures enum value "VISIBILITY_RESTRICTED"
	APIErrorTypeDTOVISIBILITYRESTRICTED APIErrorTypeDTO = "VISIBILITY_RESTRICTED"

	// APIErrorTypeDTOPLANNOTAVAILABLE captures enum value "PLAN_NOT_AVAILABLE"
	APIErrorTypeDTOPLANNOTAVAILABLE APIErrorTypeDTO = "PLAN_NOT_AVAILABLE"

	// APIErrorTypeDTOPAYMENTSNOTSUPPORTED captures enum value "PAYMENTS_NOT_SUPPORTED"
	APIErrorTypeDTOPAYMENTSNOTSUPPORTED APIErrorTypeDTO = "PAYMENTS_NOT_SUPPORTED"

	// APIErrorTypeDTOPROJECTNAMECOLLISION captures enum value "PROJECT_NAME_COLLISION"
	APIErrorTypeDTOPROJECTNAMECOLLISION APIErrorTypeDTO = "PROJECT_NAME_COLLISION"

	// APIErrorTypeDTOPROJECTKEYCOLLISION captures enum value "PROJECT_KEY_COLLISION"
	APIErrorTypeDTOPROJECTKEYCOLLISION APIErrorTypeDTO = "PROJECT_KEY_COLLISION"

	// APIErrorTypeDTOPROJECTNAMEINVALID captures enum value "PROJECT_NAME_INVALID"
	APIErrorTypeDTOPROJECTNAMEINVALID APIErrorTypeDTO = "PROJECT_NAME_INVALID"

	// APIErrorTypeDTOPROJECTKEYINVALID captures enum value "PROJECT_KEY_INVALID"
	APIErrorTypeDTOPROJECTKEYINVALID APIErrorTypeDTO = "PROJECT_KEY_INVALID"

	// APIErrorTypeDTOUSERSTILLOWNSSOMEORGANIZATIONS captures enum value "USER_STILL_OWNS_SOME_ORGANIZATIONS"
	APIErrorTypeDTOUSERSTILLOWNSSOMEORGANIZATIONS APIErrorTypeDTO = "USER_STILL_OWNS_SOME_ORGANIZATIONS"

	// APIErrorTypeDTOLIMITOFACTIVEPROJECTSREACHED captures enum value "LIMIT_OF_ACTIVE_PROJECTS_REACHED"
	APIErrorTypeDTOLIMITOFACTIVEPROJECTSREACHED APIErrorTypeDTO = "LIMIT_OF_ACTIVE_PROJECTS_REACHED"

	// APIErrorTypeDTOACTIVEPROJECTSQUOTACOULDNOTBECHANGED captures enum value "ACTIVE_PROJECTS_QUOTA_COULD_NOT_BE_CHANGED"
	APIErrorTypeDTOACTIVEPROJECTSQUOTACOULDNOTBECHANGED APIErrorTypeDTO = "ACTIVE_PROJECTS_QUOTA_COULD_NOT_BE_CHANGED"

	// APIErrorTypeDTOLIMITOFACTIVEPROJECTSQUOTAREACHED captures enum value "LIMIT_OF_ACTIVE_PROJECTS_QUOTA_REACHED"
	APIErrorTypeDTOLIMITOFACTIVEPROJECTSQUOTAREACHED APIErrorTypeDTO = "LIMIT_OF_ACTIVE_PROJECTS_QUOTA_REACHED"

	// APIErrorTypeDTOINSUFFICIENTACTIVEPROJECTSQUOTA captures enum value "INSUFFICIENT_ACTIVE_PROJECTS_QUOTA"
	APIErrorTypeDTOINSUFFICIENTACTIVEPROJECTSQUOTA APIErrorTypeDTO = "INSUFFICIENT_ACTIVE_PROJECTS_QUOTA"
)

// for schema
var apiErrorTypeDTOEnum []interface{}

func init() {
	var res []APIErrorTypeDTO
	if err := json.Unmarshal([]byte(`["LIMIT_OF_PROJECTS_REACHED","LIMIT_OF_MEMBERS_IN_ORGANIZATION_REACHED","WORKSPACE_READONLY","USER_NOT_IN_PROJECT","SERVICE_ACCOUNT_ALREADY_EXISTS_IN_ORGANIZATION","SERVICE_ACCOUNT_NOT_IN_PROJECT","LIMIT_OF_SERVICE_ACCOUNTS_IN_ORGANIZATION_REACHED","CANNOT_ADD_MEMBERS_TO_PRIVATE_INDIVIDUAL_PROJECT","CANNOT_ADD_MANAGER_TO_INDIVIDUAL_PROJECT","CANNOT_ADD_OUTSIDERS_TO_TEAM_PROJECT","CANNOT_LEAVE_TEAM_PROJECT","ADMIN_CANNOT_LEAVE_PROJECT","LIMIT_OF_PROJECT_MEMBERS_REACHED","VISIBILITY_RESTRICTED","PLAN_NOT_AVAILABLE","PAYMENTS_NOT_SUPPORTED","PROJECT_NAME_COLLISION","PROJECT_KEY_COLLISION","PROJECT_NAME_INVALID","PROJECT_KEY_INVALID","USER_STILL_OWNS_SOME_ORGANIZATIONS","LIMIT_OF_ACTIVE_PROJECTS_REACHED","ACTIVE_PROJECTS_QUOTA_COULD_NOT_BE_CHANGED","LIMIT_OF_ACTIVE_PROJECTS_QUOTA_REACHED","INSUFFICIENT_ACTIVE_PROJECTS_QUOTA"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		apiErrorTypeDTOEnum = append(apiErrorTypeDTOEnum, v)
	}
}

func (m APIErrorTypeDTO) validateAPIErrorTypeDTOEnum(path, location string, value APIErrorTypeDTO) error {
	if err := validate.EnumCase(path, location, value, apiErrorTypeDTOEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this Api error type d t o
func (m APIErrorTypeDTO) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAPIErrorTypeDTOEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this Api error type d t o based on context it is used
func (m APIErrorTypeDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
