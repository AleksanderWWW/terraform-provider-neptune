// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// LinkTypeDTO link type d t o
//
// swagger:model LinkTypeDTO
type LinkTypeDTO string

func NewLinkTypeDTO(value LinkTypeDTO) *LinkTypeDTO {
	return &value
}

// Pointer returns a pointer to a freshly-allocated LinkTypeDTO.
func (m LinkTypeDTO) Pointer() *LinkTypeDTO {
	return &m
}

const (

	// LinkTypeDTOGithub captures enum value "github"
	LinkTypeDTOGithub LinkTypeDTO = "github"

	// LinkTypeDTOTwitter captures enum value "twitter"
	LinkTypeDTOTwitter LinkTypeDTO = "twitter"

	// LinkTypeDTOKaggle captures enum value "kaggle"
	LinkTypeDTOKaggle LinkTypeDTO = "kaggle"

	// LinkTypeDTOLinkedin captures enum value "linkedin"
	LinkTypeDTOLinkedin LinkTypeDTO = "linkedin"

	// LinkTypeDTOOther captures enum value "other"
	LinkTypeDTOOther LinkTypeDTO = "other"
)

// for schema
var linkTypeDTOEnum []interface{}

func init() {
	var res []LinkTypeDTO
	if err := json.Unmarshal([]byte(`["github","twitter","kaggle","linkedin","other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		linkTypeDTOEnum = append(linkTypeDTOEnum, v)
	}
}

func (m LinkTypeDTO) validateLinkTypeDTOEnum(path, location string, value LinkTypeDTO) error {
	if err := validate.EnumCase(path, location, value, linkTypeDTOEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this link type d t o
func (m LinkTypeDTO) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLinkTypeDTOEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this link type d t o based on context it is used
func (m LinkTypeDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
