// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ActiveProjectsTraitDTO active projects trait d t o
//
// swagger:model ActiveProjectsTraitDTO
type ActiveProjectsTraitDTO struct {

	// current quota
	// Required: true
	CurrentQuota *int32 `json:"currentQuota"`

	// max quota
	MaxQuota int32 `json:"maxQuota,omitempty"`

	// quota editable
	// Required: true
	QuotaEditable *bool `json:"quotaEditable"`
}

// Validate validates this active projects trait d t o
func (m *ActiveProjectsTraitDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrentQuota(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuotaEditable(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ActiveProjectsTraitDTO) validateCurrentQuota(formats strfmt.Registry) error {

	if err := validate.Required("currentQuota", "body", m.CurrentQuota); err != nil {
		return err
	}

	return nil
}

func (m *ActiveProjectsTraitDTO) validateQuotaEditable(formats strfmt.Registry) error {

	if err := validate.Required("quotaEditable", "body", m.QuotaEditable); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this active projects trait d t o based on context it is used
func (m *ActiveProjectsTraitDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ActiveProjectsTraitDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ActiveProjectsTraitDTO) UnmarshalBinary(b []byte) error {
	var res ActiveProjectsTraitDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
