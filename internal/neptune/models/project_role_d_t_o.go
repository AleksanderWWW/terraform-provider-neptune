// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ProjectRoleDTO project role d t o
//
// swagger:model ProjectRoleDTO
type ProjectRoleDTO string

func NewProjectRoleDTO(value ProjectRoleDTO) *ProjectRoleDTO {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ProjectRoleDTO.
func (m ProjectRoleDTO) Pointer() *ProjectRoleDTO {
	return &m
}

const (

	// ProjectRoleDTOViewer captures enum value "viewer"
	ProjectRoleDTOViewer ProjectRoleDTO = "viewer"

	// ProjectRoleDTOMember captures enum value "member"
	ProjectRoleDTOMember ProjectRoleDTO = "member"

	// ProjectRoleDTOManager captures enum value "manager"
	ProjectRoleDTOManager ProjectRoleDTO = "manager"
)

// for schema
var projectRoleDTOEnum []interface{}

func init() {
	var res []ProjectRoleDTO
	if err := json.Unmarshal([]byte(`["viewer","member","manager"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectRoleDTOEnum = append(projectRoleDTOEnum, v)
	}
}

func (m ProjectRoleDTO) validateProjectRoleDTOEnum(path, location string, value ProjectRoleDTO) error {
	if err := validate.EnumCase(path, location, value, projectRoleDTOEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this project role d t o
func (m ProjectRoleDTO) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateProjectRoleDTOEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this project role d t o based on context it is used
func (m ProjectRoleDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
