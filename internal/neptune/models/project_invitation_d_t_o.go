// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectInvitationDTO project invitation d t o
//
// swagger:model ProjectInvitationDTO
type ProjectInvitationDTO struct {

	// created at
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"createdAt"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// invitation type
	// Required: true
	InvitationType *InvitationTypeEnumDTO `json:"invitationType"`

	// invited by
	// Required: true
	InvitedBy *string `json:"invitedBy"`

	// invitee
	// Required: true
	Invitee *string `json:"invitee"`

	// organization name
	// Required: true
	OrganizationName *string `json:"organizationName"`

	// project name
	// Required: true
	ProjectName *string `json:"projectName"`

	// role grant
	// Required: true
	RoleGrant *ProjectRoleDTO `json:"roleGrant"`

	// status
	// Required: true
	Status *InvitationStatusEnumDTO `json:"status"`
}

// Validate validates this project invitation d t o
func (m *ProjectInvitationDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvitationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvitedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvitee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleGrant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectInvitationDTO) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProjectInvitationDTO) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProjectInvitationDTO) validateInvitationType(formats strfmt.Registry) error {

	if err := validate.Required("invitationType", "body", m.InvitationType); err != nil {
		return err
	}

	if err := validate.Required("invitationType", "body", m.InvitationType); err != nil {
		return err
	}

	if m.InvitationType != nil {
		if err := m.InvitationType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("invitationType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("invitationType")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectInvitationDTO) validateInvitedBy(formats strfmt.Registry) error {

	if err := validate.Required("invitedBy", "body", m.InvitedBy); err != nil {
		return err
	}

	return nil
}

func (m *ProjectInvitationDTO) validateInvitee(formats strfmt.Registry) error {

	if err := validate.Required("invitee", "body", m.Invitee); err != nil {
		return err
	}

	return nil
}

func (m *ProjectInvitationDTO) validateOrganizationName(formats strfmt.Registry) error {

	if err := validate.Required("organizationName", "body", m.OrganizationName); err != nil {
		return err
	}

	return nil
}

func (m *ProjectInvitationDTO) validateProjectName(formats strfmt.Registry) error {

	if err := validate.Required("projectName", "body", m.ProjectName); err != nil {
		return err
	}

	return nil
}

func (m *ProjectInvitationDTO) validateRoleGrant(formats strfmt.Registry) error {

	if err := validate.Required("roleGrant", "body", m.RoleGrant); err != nil {
		return err
	}

	if err := validate.Required("roleGrant", "body", m.RoleGrant); err != nil {
		return err
	}

	if m.RoleGrant != nil {
		if err := m.RoleGrant.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("roleGrant")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("roleGrant")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectInvitationDTO) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this project invitation d t o based on the context it is used
func (m *ProjectInvitationDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInvitationType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRoleGrant(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectInvitationDTO) contextValidateInvitationType(ctx context.Context, formats strfmt.Registry) error {

	if m.InvitationType != nil {

		if err := m.InvitationType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("invitationType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("invitationType")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectInvitationDTO) contextValidateRoleGrant(ctx context.Context, formats strfmt.Registry) error {

	if m.RoleGrant != nil {

		if err := m.RoleGrant.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("roleGrant")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("roleGrant")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectInvitationDTO) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {

		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectInvitationDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectInvitationDTO) UnmarshalBinary(b []byte) error {
	var res ProjectInvitationDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
