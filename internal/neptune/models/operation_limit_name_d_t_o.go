// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OperationLimitNameDTO operation limit name d t o
//
// swagger:model OperationLimitNameDTO
type OperationLimitNameDTO string

func NewOperationLimitNameDTO(value OperationLimitNameDTO) *OperationLimitNameDTO {
	return &value
}

// Pointer returns a pointer to a freshly-allocated OperationLimitNameDTO.
func (m OperationLimitNameDTO) Pointer() *OperationLimitNameDTO {
	return &m
}

const (

	// OperationLimitNameDTOOpExecution captures enum value "opExecution"
	OperationLimitNameDTOOpExecution OperationLimitNameDTO = "opExecution"

	// OperationLimitNameDTOOpExecutionSeriesPointFloat captures enum value "opExecutionSeriesPointFloat"
	OperationLimitNameDTOOpExecutionSeriesPointFloat OperationLimitNameDTO = "opExecutionSeriesPointFloat"

	// OperationLimitNameDTOOpExecutionSeriesPointString captures enum value "opExecutionSeriesPointString"
	OperationLimitNameDTOOpExecutionSeriesPointString OperationLimitNameDTO = "opExecutionSeriesPointString"

	// OperationLimitNameDTOOpExecutionSeriesPointOther captures enum value "opExecutionSeriesPointOther"
	OperationLimitNameDTOOpExecutionSeriesPointOther OperationLimitNameDTO = "opExecutionSeriesPointOther"

	// OperationLimitNameDTOAPICallExecuteOperations captures enum value "apiCallExecuteOperations"
	OperationLimitNameDTOAPICallExecuteOperations OperationLimitNameDTO = "apiCallExecuteOperations"
)

// for schema
var operationLimitNameDTOEnum []interface{}

func init() {
	var res []OperationLimitNameDTO
	if err := json.Unmarshal([]byte(`["opExecution","opExecutionSeriesPointFloat","opExecutionSeriesPointString","opExecutionSeriesPointOther","apiCallExecuteOperations"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		operationLimitNameDTOEnum = append(operationLimitNameDTOEnum, v)
	}
}

func (m OperationLimitNameDTO) validateOperationLimitNameDTOEnum(path, location string, value OperationLimitNameDTO) error {
	if err := validate.EnumCase(path, location, value, operationLimitNameDTOEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this operation limit name d t o
func (m OperationLimitNameDTO) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOperationLimitNameDTOEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this operation limit name d t o based on context it is used
func (m OperationLimitNameDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
