// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrganizationLimitsDTO organization limits d t o
//
// swagger:model OrganizationLimitsDTO
type OrganizationLimitsDTO struct {

	// expiration date
	// Format: date-time
	ExpirationDate strfmt.DateTime `json:"expirationDate,omitempty"`

	// is expired
	// Required: true
	IsExpired *bool `json:"isExpired"`

	// members limit
	MembersLimit int64 `json:"membersLimit,omitempty"`

	// private project members
	PrivateProjectMembers int64 `json:"privateProjectMembers,omitempty"`

	// projects limit
	ProjectsLimit int64 `json:"projectsLimit,omitempty"`

	// storage size
	StorageSize int64 `json:"storageSize,omitempty"`

	// subscription hours
	SubscriptionHours int32 `json:"subscriptionHours,omitempty"`
}

// Validate validates this organization limits d t o
func (m *OrganizationLimitsDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpirationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsExpired(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrganizationLimitsDTO) validateExpirationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpirationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("expirationDate", "body", "date-time", m.ExpirationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrganizationLimitsDTO) validateIsExpired(formats strfmt.Registry) error {

	if err := validate.Required("isExpired", "body", m.IsExpired); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this organization limits d t o based on context it is used
func (m *OrganizationLimitsDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OrganizationLimitsDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrganizationLimitsDTO) UnmarshalBinary(b []byte) error {
	var res OrganizationLimitsDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
