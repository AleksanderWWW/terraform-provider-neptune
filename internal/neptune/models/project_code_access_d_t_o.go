// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ProjectCodeAccessDTO project code access d t o
//
// swagger:model ProjectCodeAccessDTO
type ProjectCodeAccessDTO string

func NewProjectCodeAccessDTO(value ProjectCodeAccessDTO) *ProjectCodeAccessDTO {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ProjectCodeAccessDTO.
func (m ProjectCodeAccessDTO) Pointer() *ProjectCodeAccessDTO {
	return &m
}

const (

	// ProjectCodeAccessDTODefault captures enum value "default"
	ProjectCodeAccessDTODefault ProjectCodeAccessDTO = "default"

	// ProjectCodeAccessDTORestricted captures enum value "restricted"
	ProjectCodeAccessDTORestricted ProjectCodeAccessDTO = "restricted"
)

// for schema
var projectCodeAccessDTOEnum []interface{}

func init() {
	var res []ProjectCodeAccessDTO
	if err := json.Unmarshal([]byte(`["default","restricted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectCodeAccessDTOEnum = append(projectCodeAccessDTOEnum, v)
	}
}

func (m ProjectCodeAccessDTO) validateProjectCodeAccessDTOEnum(path, location string, value ProjectCodeAccessDTO) error {
	if err := validate.EnumCase(path, location, value, projectCodeAccessDTOEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this project code access d t o
func (m ProjectCodeAccessDTO) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateProjectCodeAccessDTOEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this project code access d t o based on context it is used
func (m ProjectCodeAccessDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
