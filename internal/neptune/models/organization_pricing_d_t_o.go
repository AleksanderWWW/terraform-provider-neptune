// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrganizationPricingDTO organization pricing d t o
//
// swagger:model OrganizationPricingDTO
type OrganizationPricingDTO struct {

	// active projects
	ActiveProjects *GraduatedPricingDTO `json:"activeProjects,omitempty"`

	// flat fee
	FlatFee *FlatPricingDTO `json:"flatFee,omitempty"`

	// monitoring time
	MonitoringTime *GraduatedPricingDTO `json:"monitoringTime,omitempty"`

	// organization plan pricing
	OrganizationPlanPricing *PaidSubscriptionPricingDTO `json:"organizationPlanPricing,omitempty"`

	// pricing plan
	// Required: true
	PricingPlan *PricingPlanDTO `json:"pricingPlan"`

	// storage
	Storage *GraduatedPricingDTO `json:"storage,omitempty"`

	// supports payments
	// Required: true
	SupportsPayments *bool `json:"supportsPayments"`

	// users
	Users *SimplePricingDTO `json:"users,omitempty"`

	// v1 team pricing
	V1TeamPricing *V1TeamPricingDTO `json:"v1TeamPricing,omitempty"`

	// v2 individual pricing
	V2IndividualPricing *V2IndividualPricingDTO `json:"v2IndividualPricing,omitempty"`

	// v2 team pricing
	V2TeamPricing *PaidSubscriptionPricingDTO `json:"v2TeamPricing,omitempty"`
}

// Validate validates this organization pricing d t o
func (m *OrganizationPricingDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActiveProjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlatFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonitoringTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationPlanPricing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePricingPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportsPayments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateV1TeamPricing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateV2IndividualPricing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateV2TeamPricing(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrganizationPricingDTO) validateActiveProjects(formats strfmt.Registry) error {
	if swag.IsZero(m.ActiveProjects) { // not required
		return nil
	}

	if m.ActiveProjects != nil {
		if err := m.ActiveProjects.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activeProjects")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("activeProjects")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationPricingDTO) validateFlatFee(formats strfmt.Registry) error {
	if swag.IsZero(m.FlatFee) { // not required
		return nil
	}

	if m.FlatFee != nil {
		if err := m.FlatFee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flatFee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flatFee")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationPricingDTO) validateMonitoringTime(formats strfmt.Registry) error {
	if swag.IsZero(m.MonitoringTime) { // not required
		return nil
	}

	if m.MonitoringTime != nil {
		if err := m.MonitoringTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monitoringTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monitoringTime")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationPricingDTO) validateOrganizationPlanPricing(formats strfmt.Registry) error {
	if swag.IsZero(m.OrganizationPlanPricing) { // not required
		return nil
	}

	if m.OrganizationPlanPricing != nil {
		if err := m.OrganizationPlanPricing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organizationPlanPricing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("organizationPlanPricing")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationPricingDTO) validatePricingPlan(formats strfmt.Registry) error {

	if err := validate.Required("pricingPlan", "body", m.PricingPlan); err != nil {
		return err
	}

	if err := validate.Required("pricingPlan", "body", m.PricingPlan); err != nil {
		return err
	}

	if m.PricingPlan != nil {
		if err := m.PricingPlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pricingPlan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pricingPlan")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationPricingDTO) validateStorage(formats strfmt.Registry) error {
	if swag.IsZero(m.Storage) { // not required
		return nil
	}

	if m.Storage != nil {
		if err := m.Storage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storage")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationPricingDTO) validateSupportsPayments(formats strfmt.Registry) error {

	if err := validate.Required("supportsPayments", "body", m.SupportsPayments); err != nil {
		return err
	}

	return nil
}

func (m *OrganizationPricingDTO) validateUsers(formats strfmt.Registry) error {
	if swag.IsZero(m.Users) { // not required
		return nil
	}

	if m.Users != nil {
		if err := m.Users.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("users")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("users")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationPricingDTO) validateV1TeamPricing(formats strfmt.Registry) error {
	if swag.IsZero(m.V1TeamPricing) { // not required
		return nil
	}

	if m.V1TeamPricing != nil {
		if err := m.V1TeamPricing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v1TeamPricing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("v1TeamPricing")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationPricingDTO) validateV2IndividualPricing(formats strfmt.Registry) error {
	if swag.IsZero(m.V2IndividualPricing) { // not required
		return nil
	}

	if m.V2IndividualPricing != nil {
		if err := m.V2IndividualPricing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v2IndividualPricing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("v2IndividualPricing")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationPricingDTO) validateV2TeamPricing(formats strfmt.Registry) error {
	if swag.IsZero(m.V2TeamPricing) { // not required
		return nil
	}

	if m.V2TeamPricing != nil {
		if err := m.V2TeamPricing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v2TeamPricing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("v2TeamPricing")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this organization pricing d t o based on the context it is used
func (m *OrganizationPricingDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActiveProjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFlatFee(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMonitoringTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrganizationPlanPricing(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePricingPlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateV1TeamPricing(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateV2IndividualPricing(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateV2TeamPricing(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrganizationPricingDTO) contextValidateActiveProjects(ctx context.Context, formats strfmt.Registry) error {

	if m.ActiveProjects != nil {

		if swag.IsZero(m.ActiveProjects) { // not required
			return nil
		}

		if err := m.ActiveProjects.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activeProjects")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("activeProjects")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationPricingDTO) contextValidateFlatFee(ctx context.Context, formats strfmt.Registry) error {

	if m.FlatFee != nil {

		if swag.IsZero(m.FlatFee) { // not required
			return nil
		}

		if err := m.FlatFee.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flatFee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flatFee")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationPricingDTO) contextValidateMonitoringTime(ctx context.Context, formats strfmt.Registry) error {

	if m.MonitoringTime != nil {

		if swag.IsZero(m.MonitoringTime) { // not required
			return nil
		}

		if err := m.MonitoringTime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monitoringTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monitoringTime")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationPricingDTO) contextValidateOrganizationPlanPricing(ctx context.Context, formats strfmt.Registry) error {

	if m.OrganizationPlanPricing != nil {

		if swag.IsZero(m.OrganizationPlanPricing) { // not required
			return nil
		}

		if err := m.OrganizationPlanPricing.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organizationPlanPricing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("organizationPlanPricing")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationPricingDTO) contextValidatePricingPlan(ctx context.Context, formats strfmt.Registry) error {

	if m.PricingPlan != nil {

		if err := m.PricingPlan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pricingPlan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pricingPlan")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationPricingDTO) contextValidateStorage(ctx context.Context, formats strfmt.Registry) error {

	if m.Storage != nil {

		if swag.IsZero(m.Storage) { // not required
			return nil
		}

		if err := m.Storage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storage")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationPricingDTO) contextValidateUsers(ctx context.Context, formats strfmt.Registry) error {

	if m.Users != nil {

		if swag.IsZero(m.Users) { // not required
			return nil
		}

		if err := m.Users.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("users")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("users")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationPricingDTO) contextValidateV1TeamPricing(ctx context.Context, formats strfmt.Registry) error {

	if m.V1TeamPricing != nil {

		if swag.IsZero(m.V1TeamPricing) { // not required
			return nil
		}

		if err := m.V1TeamPricing.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v1TeamPricing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("v1TeamPricing")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationPricingDTO) contextValidateV2IndividualPricing(ctx context.Context, formats strfmt.Registry) error {

	if m.V2IndividualPricing != nil {

		if swag.IsZero(m.V2IndividualPricing) { // not required
			return nil
		}

		if err := m.V2IndividualPricing.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v2IndividualPricing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("v2IndividualPricing")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationPricingDTO) contextValidateV2TeamPricing(ctx context.Context, formats strfmt.Registry) error {

	if m.V2TeamPricing != nil {

		if swag.IsZero(m.V2TeamPricing) { // not required
			return nil
		}

		if err := m.V2TeamPricing.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("v2TeamPricing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("v2TeamPricing")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrganizationPricingDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrganizationPricingDTO) UnmarshalBinary(b []byte) error {
	var res OrganizationPricingDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
