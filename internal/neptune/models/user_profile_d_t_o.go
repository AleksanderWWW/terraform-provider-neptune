// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserProfileDTO user profile d t o
//
// swagger:model UserProfileDTO
type UserProfileDTO struct {

	// avatar source
	// Required: true
	AvatarSource *AvatarSourceEnum `json:"avatarSource"`

	// avatar Url
	// Required: true
	AvatarURL *string `json:"avatarUrl"`

	// biography
	// Required: true
	Biography *string `json:"biography"`

	// created
	// Required: true
	// Format: date-time
	Created *strfmt.DateTime `json:"created"`

	// email
	// Required: true
	Email *string `json:"email"`

	// first name
	// Required: true
	FirstName *string `json:"firstName"`

	// has created experiments
	// Required: true
	HasCreatedExperiments *bool `json:"hasCreatedExperiments"`

	// has logged to cli
	// Required: true
	HasLoggedToCli *bool `json:"hasLoggedToCli"`

	// intercom identity hash
	// Required: true
	IntercomIdentityHash *string `json:"intercomIdentityHash"`

	// last name
	// Required: true
	LastName *string `json:"lastName"`

	// links
	// Required: true
	Links *UserProfileLinksDTO `json:"links"`

	// short info
	// Required: true
	ShortInfo *string `json:"shortInfo"`

	// userflow identity hash
	// Required: true
	UserflowIdentityHash *string `json:"userflowIdentityHash"`

	// username
	// Required: true
	Username *string `json:"username"`

	// username hash
	// Required: true
	UsernameHash *string `json:"usernameHash"`
}

// Validate validates this user profile d t o
func (m *UserProfileDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvatarSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvatarURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBiography(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHasCreatedExperiments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHasLoggedToCli(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntercomIdentityHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShortInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserflowIdentityHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsernameHash(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserProfileDTO) validateAvatarSource(formats strfmt.Registry) error {

	if err := validate.Required("avatarSource", "body", m.AvatarSource); err != nil {
		return err
	}

	if err := validate.Required("avatarSource", "body", m.AvatarSource); err != nil {
		return err
	}

	if m.AvatarSource != nil {
		if err := m.AvatarSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("avatarSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("avatarSource")
			}
			return err
		}
	}

	return nil
}

func (m *UserProfileDTO) validateAvatarURL(formats strfmt.Registry) error {

	if err := validate.Required("avatarUrl", "body", m.AvatarURL); err != nil {
		return err
	}

	return nil
}

func (m *UserProfileDTO) validateBiography(formats strfmt.Registry) error {

	if err := validate.Required("biography", "body", m.Biography); err != nil {
		return err
	}

	return nil
}

func (m *UserProfileDTO) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", m.Created); err != nil {
		return err
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserProfileDTO) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *UserProfileDTO) validateFirstName(formats strfmt.Registry) error {

	if err := validate.Required("firstName", "body", m.FirstName); err != nil {
		return err
	}

	return nil
}

func (m *UserProfileDTO) validateHasCreatedExperiments(formats strfmt.Registry) error {

	if err := validate.Required("hasCreatedExperiments", "body", m.HasCreatedExperiments); err != nil {
		return err
	}

	return nil
}

func (m *UserProfileDTO) validateHasLoggedToCli(formats strfmt.Registry) error {

	if err := validate.Required("hasLoggedToCli", "body", m.HasLoggedToCli); err != nil {
		return err
	}

	return nil
}

func (m *UserProfileDTO) validateIntercomIdentityHash(formats strfmt.Registry) error {

	if err := validate.Required("intercomIdentityHash", "body", m.IntercomIdentityHash); err != nil {
		return err
	}

	return nil
}

func (m *UserProfileDTO) validateLastName(formats strfmt.Registry) error {

	if err := validate.Required("lastName", "body", m.LastName); err != nil {
		return err
	}

	return nil
}

func (m *UserProfileDTO) validateLinks(formats strfmt.Registry) error {

	if err := validate.Required("links", "body", m.Links); err != nil {
		return err
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

func (m *UserProfileDTO) validateShortInfo(formats strfmt.Registry) error {

	if err := validate.Required("shortInfo", "body", m.ShortInfo); err != nil {
		return err
	}

	return nil
}

func (m *UserProfileDTO) validateUserflowIdentityHash(formats strfmt.Registry) error {

	if err := validate.Required("userflowIdentityHash", "body", m.UserflowIdentityHash); err != nil {
		return err
	}

	return nil
}

func (m *UserProfileDTO) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

func (m *UserProfileDTO) validateUsernameHash(formats strfmt.Registry) error {

	if err := validate.Required("usernameHash", "body", m.UsernameHash); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this user profile d t o based on the context it is used
func (m *UserProfileDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAvatarSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserProfileDTO) contextValidateAvatarSource(ctx context.Context, formats strfmt.Registry) error {

	if m.AvatarSource != nil {

		if err := m.AvatarSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("avatarSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("avatarSource")
			}
			return err
		}
	}

	return nil
}

func (m *UserProfileDTO) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {

		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserProfileDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserProfileDTO) UnmarshalBinary(b []byte) error {
	var res UserProfileDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
